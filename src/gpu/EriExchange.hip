//
//                              VELOXCHEM
//         ----------------------------------------------------
//                     An Electronic Structure Code
//
//  Copyright © 2018-2023 by VeloxChem developers. All rights reserved.
//  Contact: https://veloxchem.org/contact
//
//  SPDX-License-Identifier: LGPL-3.0-or-later
//
//  This file is part of VeloxChem.
//
//  VeloxChem is free software: you can redistribute it and/or modify it under
//  the terms of the GNU Lesser General Public License as published by the Free
//  Software Foundation, either version 3 of the License, or (at your option)
//  any later version.
//
//  VeloxChem is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
//  License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with VeloxChem. If not, see <https://www.gnu.org/licenses/>.

#include <hip/hip_runtime.h>

#include "BoysFuncGPU.hpp"
#include "GpuConstants.hpp"

namespace gpu {  // gpu namespace

__global__ void
computeExchangeFockSSSS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < s_prim_count) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_ss[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_ss[k * s_prim_count + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const auto x_PQ = (a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j);
                    const auto y_PQ = (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j);
                    const auto z_PQ = (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j);

                    const auto r2_PQ = x_PQ * x_PQ + y_PQ * y_PQ + z_PQ * z_PQ;

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    const auto t = (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ;

                    double F0_t[1];

                    gpu::computeBoysFunction(F0_t, t, 0, boys_func_table, boys_func_ft);

                    const auto S_ij = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    ERIs[threadIdx.y][threadIdx.x] = Lambda * S_ij * S_kl * F0_t[0] * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSSSP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_sp,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < s_prim_count) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_sp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_sp[k * p_prim_count * 3 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F1_t[2];

                    gpu::computeBoysFunction(F1_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);

                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F1_t[0] * (-a_k / (a_k + a_l)) * rkl[d0]

                            + F1_t[1] * (a_i + a_j) / (a_i + a_j + a_k + a_l) * PQ[d0] * (-1.0)

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPSS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_sp,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < p_prim_count * 3) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_ss[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_ss[k * s_prim_count + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto b0 = j_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F1_t[2];

                    gpu::computeBoysFunction(F1_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);

                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F1_t[0] * (-a_i / (a_i + a_j)) * rij[b0]

                            + F1_t[1] * (a_k + a_l) / (a_i + a_j + a_k + a_l) * PQ[b0]

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPSP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_sp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_sp[k * p_prim_count * 3 + l];

                    // TODO: s_prim_aoinds not needed
                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto b0 = j_prim % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F2_t[3];

                    gpu::computeBoysFunction(F2_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];

                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F2_t[0] * (

                                (
                                    PB_0 * QD_0
                                )

                            )

                            + F2_t[1] * (

                                S1 / S4 * (
                                    PB_0 * PQ[d0] * (-1.0)
                                )

                                + 0.5 / S4 * (
                                    delta[b0][d0]
                                )

                                + S2 / S4 * (
                                    PQ[b0] * QD_0
                                )

                            )

                            + F2_t[2] * (

                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    PQ[b0] * PQ[d0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSSPS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_ps,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < s_prim_count) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_ps[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_ps[k * s_prim_count + l];

                    // TODO: p_prim_aoinds not needed
                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto c0 = k % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F1_t[2];

                    gpu::computeBoysFunction(F1_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);

                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F1_t[0] * (a_l / (a_k + a_l)) * rkl[c0]

                            + F1_t[1] * (a_i + a_j) / (a_i + a_j + a_k + a_l) * PQ[c0] * (-1.0)

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSSPP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_pp,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < s_prim_count) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_pp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_pp[k * p_prim_count * 3 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto c0 = k % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F2_t[3];

                    gpu::computeBoysFunction(F2_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);

                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F2_t[0] * (

                                (

                                    + QD_0 * QC_0
                                )

                                + 0.5 / S2 * (
                                    delta[d0][c0]
                                )

                            )

                            + F2_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][c0] * (-1.0)
                                )

                                + S1 / S4 * (
                                    PQ[c0] * QD_0 * (-1.0)
                                    + PQ[d0] * QC_0 * (-1.0)
                                )

                            )

                            + F2_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PQ[c0] * PQ[d0]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPPS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_ps,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < p_prim_count * 3) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_ps[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_ps[k * s_prim_count + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto b0 = j_prim % 3;
                    const auto c0 = k % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F2_t[3];

                    gpu::computeBoysFunction(F2_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];

                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F2_t[0] * (

                                (
                                    PB_0 * QC_0
                                )

                            )

                            + F2_t[1] * (

                                S1 / S4 * (
                                    PB_0 * PQ[c0] * (-1.0)
                                )

                                + 0.5 / S4 * (
                                    delta[b0][c0]
                                )

                                + S2 / S4 * (
                                    PQ[b0] * QC_0
                                )

                            )

                            + F2_t[2] * (

                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPPP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_pp,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_pp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_pp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto b0 = j_prim % 3;
                    const auto c0 = k % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];

                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                (

                                    + PB_0 * QD_0 * QC_0
                                )

                                + 0.5 / S2 * (
                                    delta[d0][c0] * PB_0
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][c0] * (PB_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[b0][d0] * QC_0
                                    + delta[d0][c0] * (PQ[b0])
                                    + delta[b0][c0] * QD_0
                                )

                                + S1 / S4 * (

                                    + PB_0 * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PQ[d0] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (

                                    + PQ[b0] * QD_0 * QC_0
                                )

                            )

                            + F3_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[c0] * PQ[d0]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                                    + PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][c0] * (PQ[b0] * (-1.0))
                                    + delta[b0][d0] * (PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[d0] * (-1.0))
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * PQ[d0]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPSPS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ps,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < s_prim_count) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_ps[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_ps[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ps[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_ps[k * s_prim_count + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = i % 3;
                    const auto c0 = k % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F2_t[3];

                    gpu::computeBoysFunction(F2_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F2_t[0] * (

                                (

                                    + PA_0 * QC_0
                                )

                            )

                            + F2_t[1] * (

                                S1 / S4 * (

                                    + PA_0 * PQ[c0] * (-1.0)
                                )

                                + S2 / S4 * (

                                    + PQ[a0] * QC_0
                                )

                                + 0.5 / S4 * (
                                    delta[a0][c0]
                                )

                            )

                            + F2_t[2] * (

                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPSPP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ps,
                        const double*   mat_Q_for_K_pp,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < s_prim_count) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_ps[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_pp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ps[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_pp[k * p_prim_count * 3 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto c0 = k % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                0.5 / S2 * (
                                    delta[c0][d0] * (PA_0)
                                )

                                + (

                                    + PA_0 * QD_0 * QC_0
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][d0] * (PA_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[a0][d0] * (QC_0)
                                    + delta[c0][d0] * (PQ[a0])
                                    + delta[a0][c0] * (QD_0)
                                )

                                + S1 / S4 * (

                                    + PA_0 * PQ[c0] * QD_0 * (-1.0)
                                    + PA_0 * PQ[d0] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (

                                    + PQ[a0] * QD_0 * QC_0
                                )

                            )

                            + F3_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (

                                    + PA_0 * PQ[c0] * PQ[d0]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (

                                    + PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[a0][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[d0] * (-1.0))
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * PQ[d0]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPPS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_ps,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < p_prim_count * 3) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_ps[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_ps[k * s_prim_count + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = k % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                0.5 / S1 * (
                                    delta[a0][b0] * (QC_0)
                                )

                                + (

                                    + PB_0 * PA_0 * QC_0
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][b0] * (QC_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[b0][c0] * (PA_0)
                                    + delta[a0][b0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0)
                                )

                                + S1 / S4 * (

                                    + PB_0 * PA_0 * PQ[c0] * (-1.0)
                                )

                                + S2 / S4 * (

                                    + PB_0 * PQ[a0] * QC_0
                                    + PA_0 * PQ[b0] * QC_0
                                )

                            )

                            + F3_t[2] * (

                                ( S1 * S2 ) / ( S4 * S4 ) * (

                                    + PB_0 * PQ[a0] * PQ[c0] * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * (-1.0)
                                )

                                + ( S2 * S2 ) / ( S4 * S4 ) * (

                                    + PQ[a0] * PQ[b0] * QC_0
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[b0][c0] * (PQ[a0])
                                    + delta[a0][c0] * (PQ[b0])
                                    + delta[a0][b0] * (PQ[c0])
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPPP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_pp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_pp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = k % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S1 * (
                                    delta[a0][b0] * (QD_0 * QC_0)
                                )

                                + 0.5 / S2 * (
                                    delta[c0][d0] * (PB_0 * PA_0)
                                )

                                + (

                                    + PB_0 * PA_0 * QD_0 * QC_0
                                )

                                + 0.25 / ( S1 * S2 ) * (
                                    delta[a0][b0] * delta[c0][d0]
                                )

                            )

                            + F4_t[1] * (

                                0.25 / ( S1 * S4 ) * (
                                    delta[a0][b0] * delta[c0][d0] * (-1.0)
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[a0][b0] * delta[c0][d0] * (-1.0)
                                )

                                + 0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                                )

                                + 0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][b0] * (QD_0 * QC_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b0][d0] * (PA_0 * QC_0)
                                    + delta[b0][c0] * (PA_0 * QD_0)
                                    + delta[a0][d0] * (PB_0 * QC_0)
                                    + delta[a0][b0] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * QD_0)
                                )

                                + S1 / S4 * (

                                    + PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (

                                    + PB_0 * PQ[a0] * QD_0 * QC_0
                                    + PA_0 * PQ[b0] * QD_0 * QC_0
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (

                                    + PB_0 * PA_0 * PQ[c0] * PQ[d0]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (

                                    + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                                )

                                + ( S2 * S2 ) / ( S4 * S4 ) * (

                                    + PQ[a0] * PQ[b0] * QD_0 * QC_0
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[d0])
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[b0][d0] * (PQ[a0] * QC_0)
                                    + delta[a0][d0] * (PQ[b0] * QC_0)
                                    + delta[a0][b0] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0])
                                    + delta[b0][c0] * (PQ[a0] * QD_0)
                                    + delta[a0][c0] * (PQ[b0] * QD_0)
                                )

                                + 0.25 / ( S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][d0]
                                    + delta[a0][d0] * delta[b0][c0]
                                    + delta[a0][b0] * delta[c0][d0]
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (

                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[d0]
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[d0]
                                )

                                + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (

                                    + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                                )

                                + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[d0] * (-1.0))
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSSSD(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_sd,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_sd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_sd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F2_t[3];

                    gpu::computeBoysFunction(F2_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F2_t[0] * (

                                0.5 / S2 * (
                                    delta[d0][d1]
                                )

                                + (
                                    QD_0 * QD_1
                                )

                            )

                            + F2_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (-1.0)
                                )

                                + S1 / S4 * (
                                    PQ[d0] * QD_1 * (-1.0)
                                    + PQ[d1] * QD_0 * (-1.0)
                                )

                            )

                            + F2_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PQ[d0] * PQ[d1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDSS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_ss,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ss[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ss[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F2_t[3];

                    gpu::computeBoysFunction(F2_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F2_t[0] * (

                                0.5 / S1 * (
                                    delta[b0][b1]
                                )

                                + (
                                    PB_0 * PB_1
                                )

                            )

                            + F2_t[1] * (

                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (-1.0)
                                )

                                + S2 / S4 * (
                                    PB_0 * PQ[b1]
                                    + PB_1 * PQ[b0]
                                )

                            )

                            + F2_t[2] * (

                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    PQ[b0] * PQ[b1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPSD(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_sd,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_sd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_sd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = j_prim % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0)
                                )

                                + (
                                    PB_0 * QD_0 * QD_1
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * (-1.0))
                                )

                                + S1 / S4 * (
                                    PB_0 * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PQ[d1] * QD_0 * (-1.0)
                                )

                                + 0.5 / S4 * (
                                    delta[d0][d1] * (PQ[b0])
                                    + delta[b0][d1] * (QD_0)
                                    + delta[b0][d0] * (QD_1)
                                )

                                + S2 / S4 * (
                                    PQ[b0] * QD_0 * QD_1
                                )

                            )

                            + F3_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[d0] * PQ[d1]
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[b0][d1] * (PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[d1] * (-1.0))
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[d0] * PQ[d1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDSP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_sp,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_sp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_sp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                0.5 / S1 * (
                                    delta[b0][b1] * (QD_0)
                                )

                                + (
                                    PB_0 * PB_1 * QD_0
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (QD_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[b0][b1] * (PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PB_0)
                                    + delta[b0][d0] * (PB_1)
                                )

                                + S1 / S4 * (
                                    PB_0 * PB_1 * PQ[d0] * (-1.0)
                                )

                                + S2 / S4 * (
                                    PB_0 * PQ[b1] * QD_0
                                    + PB_1 * PQ[b0] * QD_0
                                )

                            )

                            + F3_t[2] * (

                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * QD_0
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[d0] * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d0] * (-1.0)
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[b1][d0] * (PQ[b0])
                                    + delta[b0][d0] * (PQ[b1])
                                    + delta[b0][b1] * (PQ[d0])
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[d0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDSD(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_ss,
                        const uint32_t* pair_inds_k_for_K_ss,
                        const uint32_t  pair_inds_count_for_K_ss,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_ss) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_ss[ik];
                const auto k = pair_inds_k_for_K_ss[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_sd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_sd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = s_prim_info[k + s_prim_count * 0];
                    const auto c_k = s_prim_info[k + s_prim_count * 1];
                    const auto x_k = s_prim_info[k + s_prim_count * 2];
                    const auto y_k = s_prim_info[k + s_prim_count * 3];
                    const auto z_k = s_prim_info[k + s_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[d0][d1]
                                )

                                + 0.5 / S1 * (
                                    delta[b0][b1] * (QD_0 * QD_1)
                                )

                                + 0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PB_1)
                                )

                                + (
                                    PB_0 * PB_1 * QD_0 * QD_1
                                )

                            )

                            + F4_t[1] * (

                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (-1.0)
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (-1.0)
                                )

                                + 0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                                )

                                + 0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (QD_0 * QD_1 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[b1][d1] * (PB_0 * QD_0)
                                    + delta[b1][d0] * (PB_0 * QD_1)
                                    + delta[b0][d1] * (PB_1 * QD_0)
                                    + delta[b0][d0] * (PB_1 * QD_1)
                                )

                                + S1 / S4 * (
                                    PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    PB_0 * PQ[b1] * QD_0 * QD_1
                                    + PB_1 * PQ[b0] * QD_0 * QD_1
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[d0] * PQ[d1]
                                )

                                + ( S2 * S2 ) / ( S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * QD_0 * QD_1
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PQ[d0] * PQ[d1])
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                                )

                                + 0.25 / ( S4 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1]
                                    + delta[b0][d0] * delta[b1][d1]
                                    + delta[b0][d1] * delta[b1][d0]
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[b1][d1] * (PQ[b0] * QD_0)
                                    + delta[b1][d0] * (PQ[b0] * QD_1)
                                    + delta[b0][d1] * (PQ[b1] * QD_0)
                                    + delta[b0][d0] * (PQ[b1] * QD_1)
                                    + delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[d0] * PQ[d1]
                                    + PB_1 * PQ[b0] * PQ[d0] * PQ[d1]
                                )

                                + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                )

                                + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_ss))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSSPD(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                0.5 / S2 * (
                                    delta[d0][d1] * (QC_0)
                                    + delta[c0][d1] * (QD_0)
                                    + delta[c0][d0] * (QD_1)
                                )

                                + (
                                    
                                    + QD_0 * QD_1 * QC_0
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                )

                                + S1 / S4 * (
                                    PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )

                            )

                            + F3_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PQ[c0] * PQ[d0] * QD_1
                                    + PQ[c0] * PQ[d1] * QD_0
                                    + PQ[d0] * PQ[d1] * QC_0
                                )

                                + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[c0])
                                    + delta[c0][d1] * (PQ[d0])
                                    + delta[c0][d0] * (PQ[d1])
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDPS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_ps,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ps[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ps[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                0.5 / S1 * (
                                    delta[b0][b1] * (QC_0)
                                )

                                + (
                                    
                                    + PB_0 * PB_1 * QC_0
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (QC_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[b0][b1] * (PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0)
                                    + delta[b0][c0] * (PB_1)
                                )

                                + S1 / S4 * (
                                    PB_0 * PB_1 * PQ[c0] * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PB_0 * PQ[b1] * QC_0
                                    + PB_1 * PQ[b0] * QC_0
                                )

                            )

                            + F3_t[2] * (

                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * QC_0
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * (-1.0)
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[b1][c0] * (PQ[b0])
                                    + delta[b0][c0] * (PQ[b1])
                                    + delta[b0][b1] * (PQ[c0])
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPPD(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = j_prim % 3;
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * QC_0)
                                    + delta[c0][d1] * (PB_0 * QD_0)
                                    + delta[c0][d0] * (PB_0 * QD_1)
                                )

                                + (
                                    
                                    + PB_0 * QD_0 * QD_1 * QC_0
                                )

                            )

                            + F4_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[d0][d1] * (PQ[b0] * QC_0)
                                    + delta[b0][d1] * (QD_0 * QC_0)
                                    + delta[b0][d0] * (QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[b0] * QD_0)
                                    + delta[c0][d0] * (PQ[b0] * QD_1)
                                    + delta[b0][c0] * (QD_0 * QD_1)
                                )

                                + S1 / S4 * (
                                    PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PQ[b0] * QD_0 * QD_1 * QC_0
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[b0][c0] * delta[d0][d1]
                                    + delta[b0][d0] * delta[c0][d1]
                                    + delta[b0][d1] * delta[c0][d0]
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PQ[d0] * PQ[d1] * QC_0
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )

                                + 0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[d0][d1] * (-1.0)
                                    + delta[b0][d0] * delta[c0][d1] * (-1.0)
                                    + delta[b0][d1] * delta[c0][d0] * (-1.0)
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                )

                                + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[c0])
                                    + delta[c0][d1] * (PB_0 * PQ[d0])
                                    + delta[c0][d0] * (PB_0 * PQ[d1])
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                                    + PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                                    + PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                                )

                                + ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )

                                + 0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[c0])
                                    + delta[c0][d1] * (PQ[b0] * PQ[d0])
                                    + delta[c0][d0] * (PQ[b0] * PQ[d1])
                                    + delta[b0][d1] * (PQ[c0] * PQ[d0])
                                    + delta[b0][d0] * (PQ[c0] * PQ[d1])
                                    + delta[b0][c0] * (PQ[d0] * PQ[d1])
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDPP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_pp,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S1 * (
                                    delta[b0][b1] * (QD_0 * QC_0)
                                )

                                + (
                                    
                                    + PB_0 * PB_1 * QD_0 * QC_0
                                )

                                + 0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[c0][d0]
                                )

                                + 0.5 / S2 * (
                                    delta[c0][d0] * (PB_0 * PB_1)
                                )

                            )

                            + F4_t[1] * (

                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[c0][d0] * (-1.0)
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][d0] * (-1.0)
                                )

                                + 0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                                )

                                + 0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[b1][d0] * (PB_0 * QC_0)
                                    + delta[b0][d0] * (PB_1 * QC_0)
                                    + delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[b1][c0] * (PB_0 * QD_0)
                                    + delta[b0][c0] * (PB_1 * QD_0)
                                )

                                + S1 / S4 * (
                                    PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PB_0 * PQ[b1] * QD_0 * QC_0
                                    + PB_1 * PQ[b0] * QD_0 * QC_0
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[c0] * PQ[d0]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                                )

                                + ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * QD_0 * QC_0
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[d0])
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[b1][d0] * (PQ[b0] * QC_0)
                                    + delta[b0][d0] * (PQ[b1] * QC_0)
                                    + delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1])
                                    + delta[b1][c0] * (PQ[b0] * QD_0)
                                    + delta[b0][c0] * (PQ[b1] * QD_0)
                                )

                                + 0.25 / ( S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][d0]
                                    + delta[b0][c0] * delta[b1][d0]
                                    + delta[b0][d0] * delta[b1][c0]
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * PQ[d0]
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[d0]
                                )

                                + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                                )

                                + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}


__global__ void
computeExchangeFockSDPD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (QD_0)
                                    + delta[b0][b1] * delta[c0][d0] * (QD_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (QD_0 * QD_1 * QC_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PB_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * QD_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * QD_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (QD_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0)
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0)
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[b1][d1] * (PB_0 * QD_0 * QC_0)
                                    + delta[b1][d0] * (PB_0 * QD_1 * QC_0)
                                    + delta[b0][d1] * (PB_1 * QD_0 * QC_0)
                                    + delta[b0][d0] * (PB_1 * QD_1 * QC_0)
                                    + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                                    + delta[b1][c0] * (PB_0 * QD_0 * QD_1)
                                    + delta[b0][c0] * (PB_1 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0
                                    + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[d0][d1] * (PB_0 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[c0])
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[d0])
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[d1])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PQ[c0] + QC_0)
                                    + delta[b0][d0] * delta[b1][d1] * (QC_0)
                                    + delta[b0][d1] * delta[b1][d0] * (QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[b0])
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[b0])
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[b0])
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[b1])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[b1])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[b1])
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[d0] + QD_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[d1] + QD_1)
                                    + delta[b0][c0] * delta[b1][d1] * (QD_0)
                                    + delta[b0][d1] * delta[b1][c0] * (QD_0)
                                    + delta[b0][c0] * delta[b1][d0] * (QD_1)
                                    + delta[b0][d0] * delta[b1][c0] * (QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDPD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sp,
                        const uint32_t* pair_inds_k_for_K_sp,
                        const uint32_t  pair_inds_count_for_K_sp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sp) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sp[ik];
                const auto k = pair_inds_k_for_K_sp[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[b1][d1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][d0] * (PQ[b0] * QD_1 * QC_0)
                                    + delta[b0][d1] * (PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][d0] * (PQ[b1] * QD_1 * QC_0)
                                    + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                                    + delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0)
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1)
                                    + delta[b1][c0] * (PQ[b0] * QD_0 * QD_1)
                                    + delta[b0][c0] * (PQ[b1] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[c0])
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[d0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[d1])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                                    + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[c0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                                    + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                                    + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[d1])
                                    + delta[b1][c0] * (PB_0 * PQ[d0] * PQ[d1])
                                    + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[d1])
                                    + delta[b0][c0] * (PB_1 * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                                    + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                                    + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[b1][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[b0][c0] * (PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sp))
    {
        mat_K[ik] += K_ik;
    }
}


__global__ void
computeExchangeFockSSDS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < s_prim_count) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F2_t[3];

                    gpu::computeBoysFunction(F2_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F2_t[0] * (

                                (
                                    
                                    + QC_0 * QC_1
                                )

                                + 0.5 / S2 * (
                                    delta[c0][c1]
                                )

                            )

                            + F2_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (-1.0)
                                )

                                + S1 / S4 * (
                                    
                                    + PQ[c0] * QC_1 * (-1.0)
                                    + PQ[c1] * QC_0 * (-1.0)
                                )

                            )

                            + F2_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PQ[c0] * PQ[c1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSSDP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < s_prim_count) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                0.5 / S2 * (
                                    delta[c1][d0] * (QC_0)
                                    + delta[c0][d0] * (QC_1)
                                    + delta[c0][c1] * (QD_0)
                                )

                                + (
                                    
                                    + QD_0 * QC_0 * QC_1
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                )

                                + S1 / S4 * (
                                    
                                    + PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )

                            )

                            + F3_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PQ[c0] * PQ[c1] * QD_0
                                    + PQ[c0] * PQ[d0] * QC_1
                                    + PQ[c1] * PQ[d0] * QC_0
                                )

                                + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[c0])
                                    + delta[c0][d0] * (PQ[c1])
                                    + delta[c0][c1] * (PQ[d0])
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPDS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < p_prim_count * 3) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                (
                                    
                                    + PB_0 * QC_0 * QC_1
                                )

                                + 0.5 / S2 * (
                                    delta[c0][c1] * (PB_0)
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[b0][c1] * (QC_0)
                                    + delta[b0][c0] * (QC_1)
                                    + delta[c0][c1] * (PQ[b0])
                                )

                                + S1 / S4 * (
                                    
                                    + PB_0 * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PQ[c1] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PQ[b0] * QC_0 * QC_1
                                )

                            )

                            + F3_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[c0] * PQ[c1]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[b0][c1] * (PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[c1] * (-1.0))
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * PQ[c1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPDP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S2 * (
                                    delta[c1][d0] * (PB_0 * QC_0)
                                    + delta[c0][d0] * (PB_0 * QC_1)
                                    + delta[c0][c1] * (PB_0 * QD_0)
                                )

                                + (
                                    
                                    + PB_0 * QD_0 * QC_0 * QC_1
                                )

                            )

                            + F4_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[c1][d0] * (PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PQ[b0] * QC_1)
                                    + delta[b0][d0] * (QC_0 * QC_1)
                                    + delta[b0][c1] * (QD_0 * QC_0)
                                    + delta[b0][c0] * (QD_0 * QC_1)
                                    + delta[c0][c1] * (PQ[b0] * QD_0)
                                )

                                + S1 / S4 * (
                                    
                                    + PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PQ[b0] * QD_0 * QC_0 * QC_1
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0]
                                    + delta[b0][c1] * delta[c0][d0]
                                    + delta[b0][d0] * delta[c0][c1]
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PQ[c1] * PQ[d0] * QC_0
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )

                                + 0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (-1.0)
                                    + delta[b0][c1] * delta[c0][d0] * (-1.0)
                                    + delta[b0][d0] * delta[c0][c1] * (-1.0)
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                                    + delta[b0][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                )

                                + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PQ[d0])
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )

                                + ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )

                                + 0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PQ[b0] * PQ[d0])
                                    + delta[b0][d0] * (PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PQ[c1] * PQ[d0])
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSSDD(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ss,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ss,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_ss[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ss[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S2 * (
                                    delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[c0][c1] * (QD_0 * QD_1)
                                )

                                + (
                                    
                                    + QD_0 * QD_1 * QC_0 * QC_1
                                )

                                + 0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1]
                                    + delta[c0][d0] * delta[c1][d1]
                                    + delta[c1][d0] * delta[c0][d1]
                                )

                            )

                            + F4_t[1] * (

                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[c1][d0] * delta[c0][d1] * (-2.0)
                                )

                                + 0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                )

                                + S1 / S4 * (
                                    
                                    + PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )

                                + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                )

                                + 0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1]
                                    + delta[c0][d0] * delta[c1][d1]
                                    + delta[c1][d0] * delta[c0][d1]
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )

                                + 0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S1 * (
                                    delta[b0][b1] * (QC_0 * QC_1)
                                )

                                + (
                                    
                                    + PB_0 * PB_1 * QC_0 * QC_1
                                )

                                + 0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[c0][c1]
                                )

                                + 0.5 / S2 * (
                                    delta[c0][c1] * (PB_0 * PB_1)
                                )

                            )

                            + F4_t[1] * (

                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (-1.0)
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (-1.0)
                                )

                                + 0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PB_1 * (-1.0))
                                )

                                + 0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (QC_0 * QC_1 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[b1][c1] * (PB_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * QC_1)
                                    + delta[b0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                )

                                + S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PB_0 * PQ[b1] * QC_0 * QC_1
                                    + PB_1 * PQ[b0] * QC_0 * QC_1
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[c0] * PQ[c1]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )

                                + ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * QC_0 * QC_1
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1])
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[b1][c1] * (PQ[b0] * QC_0)
                                    + delta[b1][c0] * (PQ[b0] * QC_1)
                                    + delta[b0][c1] * (PQ[b1] * QC_0)
                                    + delta[b0][c0] * (PQ[b1] * QC_1)
                                    + delta[b0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[c0][c1] * (PQ[b0] * PQ[b1])
                                )

                                + 0.25 / ( S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1]
                                    + delta[b0][c0] * delta[b1][c1]
                                    + delta[b0][c1] * delta[b1][c0]
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * PQ[c1]
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[c1]
                                )

                                + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                )

                                + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][c1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPDD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PB_0 * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * (-2.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][c1] * delta[d0][d1] * (QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (QC_1)
                                    + delta[c0][c1] * delta[d0][d1] * (PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[b0])
                                    + delta[b0][c0] * delta[c1][d1] * (QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (QD_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PQ[b0] * QD_1 * QC_1)
                                    + delta[b0][d1] * (QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (QD_0 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PQ[b0] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPDD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-2.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSPDD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[d1])
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}
__global__ void
computeExchangeFockSDDP0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (QD_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c1][d0] * (PB_0 * PB_1 * QC_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * QD_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c1][d0] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                                    + delta[b1][d0] * (PB_0 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * QD_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * QD_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * QD_0 * QC_0)
                                    + delta[b0][c0] * (PB_1 * QD_0 * QC_1)
                                    + delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PQ[b1] * QD_0 * QC_0 * QC_1
                                    + PB_1 * PQ[b0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDP1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (QC_1)
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[b0])
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[b0])
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[b0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[b1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[b1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[b1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[b0][c0] * delta[b1][c1] * (QD_0)
                                    + delta[b0][c1] * delta[b1][c0] * (QD_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * QC_1)
                                    + delta[b1][d0] * (PQ[b0] * QC_0 * QC_1)
                                    + delta[b1][c1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][c0] * (PQ[b0] * QD_0 * QC_1)
                                    + delta[b0][d0] * (PQ[b1] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PQ[b1] * QD_0 * QC_1)
                                    + delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDP2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[b1] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[2];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PB_1 * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.125 / ( S1 * S2 * S2 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S2 * S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-2.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b1][c1] * delta[d0][d1] * (PB_0 * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * QC_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * QC_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                    + delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * QD_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[b1][d1] * (PB_0 * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PB_0 * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PB_1 * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b1][c1] * delta[d0][d1] * (PQ[b0] * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[b0] * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[b0] * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[b0] * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[b0] * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[b0] * QC_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[b1] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[b1] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[b1] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[b1] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[b1] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[b1] * QC_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][d1] * (QC_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][d0] * (QC_0 * QC_1)
                                    + delta[b0][c1] * delta[b1][d1] * (QD_0 * QC_0)
                                    + delta[b0][d1] * delta[b1][c1] * (QD_0 * QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (QD_1 * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (QD_1 * QC_0)
                                    + delta[b0][c0] * delta[b1][d1] * (QD_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][c0] * (QD_0 * QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (QD_1 * QC_1)
                                    + delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[b0] * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[b0] * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[b0] * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[b0] * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[b0] * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[b0] * QD_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[b1] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[b1] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[b1] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[b1] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[b1] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[b1] * QD_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                                    + delta[b0][c0] * delta[b1][c1] * (QD_0 * QD_1)
                                    + delta[b0][c1] * delta[b1][c0] * (QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[b1][d1] * (PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * 2.0
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * 2.0
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * 2.0
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1]
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1]
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0]
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1]
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1]
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0]
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1]
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1]
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1]
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0]
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0]
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDD3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[4];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0) + PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0) + PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0) + PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0) + PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0) + PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0) + PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDD4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[5];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockSDDD5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_sd,
                        const uint32_t* pair_inds_k_for_K_sd,
                        const uint32_t  pair_inds_count_for_K_sd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_sd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_sd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_sd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_sd[ik];
                const auto k = pair_inds_k_for_K_sd[ik];

                const auto Q_ij = mat_Q_for_K_sd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_sd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = s_prim_info[i + s_prim_count * 0];
                    const auto c_i = s_prim_info[i + s_prim_count * 1];
                    const auto x_i = s_prim_info[i + s_prim_count * 2];
                    const auto y_i = s_prim_info[i + s_prim_count * 3];
                    const auto z_i = s_prim_info[i + s_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[7];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[4] * (
        
                                0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1])
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[c0] * PQ[c1])
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[c0] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[c1] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[6] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_sd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPSPD(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ps,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_ps[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ps[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S2 * (
                                    delta[d0][d1] * (PA_0 * QC_0)
                                    + delta[c0][d1] * (PA_0 * QD_0)
                                    + delta[c0][d0] * (PA_0 * QD_1)
                                )

                                + (
                                    
                                    + PA_0 * QD_0 * QD_1 * QC_0
                                )

                            )

                            + F4_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[d0][d1] * (PQ[a0] * QC_0)
                                    + delta[a0][d1] * (QD_0 * QC_0)
                                    + delta[a0][d0] * (QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * QD_0)
                                    + delta[c0][d0] * (PQ[a0] * QD_1)
                                    + delta[a0][c0] * (QD_0 * QD_1)
                                )

                                + S1 / S4 * (
                                    
                                    + PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PQ[a0] * QD_0 * QD_1 * QC_0
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[a0][c0] * delta[d0][d1]
                                    + delta[a0][d0] * delta[c0][d1]
                                    + delta[a0][d1] * delta[c0][d0]
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[c0] * PQ[d0] * QD_1
                                    + PA_0 * PQ[c0] * PQ[d1] * QD_0
                                    + PA_0 * PQ[d0] * PQ[d1] * QC_0
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )

                                + 0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d1] * delta[c0][d0] * (-1.0)
                                )

                                + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PQ[c0])
                                    + delta[c0][d1] * (PA_0 * PQ[d0])
                                    + delta[c0][d0] * (PA_0 * PQ[d1])
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                                    + delta[a0][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )

                                + ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                                    + PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                                    + PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                                )

                                + 0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[c0])
                                    + delta[c0][d1] * (PQ[a0] * PQ[d0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[d1])
                                    + delta[a0][d1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * (PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * (PQ[d0] * PQ[d1])
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_ps,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ps[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ps[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * QC_0)
                                    + delta[a0][b1] * (PB_0 * QC_0)
                                    + delta[a0][b0] * (PB_1 * QC_0)
                                )

                                + (
                                    
                                    + PB_0 * PB_1 * PA_0 * QC_0
                                )

                            )

                            + F4_t[1] * (

                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a0][b1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][b0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                )

                                + 0.5 / S4 * (
                                    delta[b1][c0] * (PB_0 * PA_0)
                                    + delta[b0][c0] * (PB_1 * PA_0)
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1)
                                )

                                + S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * QC_0
                                    + PB_0 * PA_0 * PQ[b1] * QC_0
                                    + PB_1 * PA_0 * PQ[b0] * QC_0
                                )

                                + 0.25 / ( S1 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1]
                                    + delta[a0][b0] * delta[b1][c0]
                                    + delta[b0][c0] * delta[a0][b1]
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0)
                                )

                                + ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * QC_0
                                    + PB_1 * PQ[a0] * PQ[b0] * QC_0
                                    + PA_0 * PQ[b0] * PQ[b1] * QC_0
                                )

                                + 0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * (-1.0)
                                    + delta[a0][b0] * delta[b1][c0] * (-1.0)
                                    + delta[b0][c0] * delta[a0][b1] * (-1.0)
                                )

                                + 0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * QC_0 * (-1.0))
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[b1][c0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b0][c0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[c0])
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[c0])
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[c0])
                                    + delta[a0][c0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0)
                                )

                                + ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * QC_0
                                )

                                + 0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[b1][c0] * (PQ[a0] * PQ[b0])
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1])
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0])
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0])
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0])
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPPD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[a0][b0] * delta[d0][d1] * (QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (QD_0)
                                    + delta[a0][b0] * delta[c0][d0] * (QD_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S1 * (
                                    delta[a0][b0] * (QD_0 * QD_1 * QC_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PA_0 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PA_0 * QD_0)
                                    + delta[c0][d0] * (PB_0 * PA_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PB_0 * PA_0 * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[a0][b0] * delta[d0][d1] * (QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][c0] * delta[d0][d1] * (PA_0)
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0)
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][b0] * (QD_0 * QD_1 * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                                    + delta[b0][d1] * (PA_0 * QD_0 * QC_0)
                                    + delta[b0][d0] * (PA_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PA_0 * QD_0 * QD_1)
                                    + delta[a0][d1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][d0] * (PB_0 * QD_1 * QC_0)
                                    + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0
                                    + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPPD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[d0][d1] * (PA_0 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[d0])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[d1])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[a0][d0] * delta[b0][d1] * (QC_0)
                                    + delta[a0][d1] * delta[b0][d0] * (QC_0)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] + QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0])
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0])
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0])
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][c0] * delta[b0][d1] * (QD_0)
                                    + delta[a0][d1] * delta[b0][c0] * (QD_0)
                                    + delta[a0][c0] * delta[b0][d0] * (QD_1)
                                    + delta[a0][d0] * delta[b0][c0] * (QD_1)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[d0])
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[d1])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b0][d1] * (PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][d0] * (PQ[a0] * QD_1 * QC_0)
                                    + delta[a0][d1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][d0] * (PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1)
                                    + delta[b0][c0] * (PQ[a0] * QD_0 * QD_1)
                                    + delta[a0][c0] * (PQ[b0] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                                    + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPPD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                                    + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[d1])
                                    + delta[b0][c0] * (PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * (PB_0 * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                                    + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                                    + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[b0][c0] * (PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PQ[c0] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}
__global__ void
computeExchangeFockPDPP0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_pp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[c0][d0] * (PA_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * QD_0 * QC_0)
                                    + delta[a0][b1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][b0] * (PB_1 * QD_0 * QC_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c0][d0] * (PB_0 * PB_1 * PA_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * PA_0 * QD_0 * QC_0
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][d0] * delta[b0][b1] * (QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (QD_0)
                                    + delta[a0][b0] * delta[b1][c0] * (QD_0)
                                    + delta[b0][c0] * delta[a0][b1] * (QD_0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][d0] * (PB_0 * PB_1 * PA_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                                    + delta[a0][b1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][b0] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[b1][d0] * (PB_0 * PA_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * QD_0)
                                    + delta[b0][d0] * (PB_1 * PA_0 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * QD_0)
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * QC_0)
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * QD_0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0
                                    + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0
                                    + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPP1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_pp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0
                                    + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0
                                    + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0)
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0)
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0]
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0]
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0]
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPP2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_pp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0)
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][d0] * (PQ[a0])
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0])
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0])
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[b0])
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[b0])
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[b1])
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[b1])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1])
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0])
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0])
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[d0])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[d0])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[d0])
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0]
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0]
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPSDS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ps,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < s_prim_count) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_ps[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ps[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = i % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F3_t[4];

                    gpu::computeBoysFunction(F3_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F3_t[0] * (

                                0.5 / S2 * (
                                    delta[c0][c1] * (PA_0)
                                )

                                + (
                                    
                                    + PA_0 * QC_0 * QC_1
                                )

                            )

                            + F3_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (PA_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[a0][c1] * (QC_0)
                                    + delta[a0][c0] * (QC_1)
                                    + delta[c0][c1] * (PQ[a0])
                                )

                                + S1 / S4 * (
                                    
                                    + PA_0 * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PQ[c1] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PQ[a0] * QC_0 * QC_1
                                )

                            )

                            + F3_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[c0] * PQ[c1]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[c0] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[c1] * QC_0 * (-1.0)
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a0][c1] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[c1] * (-1.0))
                                )

                            )

                            + F3_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * PQ[c1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPSDP(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ps,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < s_prim_count) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_ps[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ps[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S2 * (
                                    delta[c1][d0] * (PA_0 * QC_0)
                                    + delta[c0][d0] * (PA_0 * QC_1)
                                    + delta[c0][c1] * (PA_0 * QD_0)
                                )

                                + (
                                    
                                    + PA_0 * QD_0 * QC_0 * QC_1
                                )

                            )

                            + F4_t[1] * (

                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[c1][d0] * (PQ[a0] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * QC_1)
                                    + delta[a0][d0] * (QC_0 * QC_1)
                                    + delta[a0][c1] * (QD_0 * QC_0)
                                    + delta[a0][c0] * (QD_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * QD_0)
                                )

                                + S1 / S4 * (
                                    
                                    + PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PQ[a0] * QD_0 * QC_0 * QC_1
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[a0][c0] * delta[c1][d0]
                                    + delta[a0][c1] * delta[c0][d0]
                                    + delta[a0][d0] * delta[c0][c1]
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PQ[c1] * PQ[d0] * QC_0
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )

                                + 0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[c0][c1] * (-1.0)
                                )

                                + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PA_0 * PQ[c0])
                                    + delta[c0][d0] * (PA_0 * PQ[c1])
                                    + delta[c0][c1] * (PA_0 * PQ[d0])
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                                    + delta[a0][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )

                                + ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * PQ[c1] * QD_0
                                    + PQ[a0] * PQ[c0] * PQ[d0] * QC_1
                                    + PQ[a0] * PQ[c1] * PQ[d0] * QC_0
                                )

                                + 0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[c0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[c1])
                                    + delta[c0][c1] * (PQ[a0] * PQ[d0])
                                    + delta[a0][d0] * (PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PQ[c1] * PQ[d0])
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S1 * (
                                    delta[a0][b0] * (QC_0 * QC_1)
                                )

                                + 0.5 / S2 * (
                                    delta[c0][c1] * (PB_0 * PA_0)
                                )

                                + (
                                    
                                    + PB_0 * PA_0 * QC_0 * QC_1
                                )

                                + 0.25 / ( S1 * S2 ) * (
                                    delta[a0][b0] * delta[c0][c1]
                                )

                            )

                            + F4_t[1] * (

                                0.25 / ( S1 * S4 ) * (
                                    delta[a0][b0] * delta[c0][c1] * (-1.0)
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[a0][b0] * delta[c0][c1] * (-1.0)
                                )

                                + 0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PA_0 * (-1.0))
                                )

                                + 0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][b0] * (QC_0 * QC_1 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[c0][c1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b0][c1] * (PA_0 * QC_0)
                                    + delta[b0][c0] * (PA_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * QC_1)
                                    + delta[a0][b0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                )

                                + S1 / S4 * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PB_0 * PQ[a0] * QC_0 * QC_1
                                    + PA_0 * PQ[b0] * QC_0 * QC_1
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * PQ[c1]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )

                                + ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * QC_0 * QC_1
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1])
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[b0][c1] * (PQ[a0] * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * QC_1)
                                    + delta[a0][c1] * (PQ[b0] * QC_0)
                                    + delta[a0][c0] * (PQ[b0] * QC_1)
                                    + delta[a0][b0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0])
                                )

                                + 0.25 / ( S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][c1]
                                    + delta[a0][c1] * delta[b0][c0]
                                    + delta[a0][b0] * delta[c0][c1]
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[c1]
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[c1]
                                )

                                + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )

                                + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * (-1.0))
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPSDD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ps,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_ps[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ps[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0)
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0)
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PA_0 * QC_0 * QC_1)
                                    + delta[c1][d1] * (PA_0 * QD_0 * QC_0)
                                    + delta[c1][d0] * (PA_0 * QD_1 * QC_0)
                                    + delta[c0][d1] * (PA_0 * QD_0 * QC_1)
                                    + delta[c0][d0] * (PA_0 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PA_0 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PA_0 * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0 * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0 * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0 * (-2.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[a0][c1] * delta[d0][d1] * (QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (QC_1)
                                    + delta[c0][c1] * delta[d0][d1] * (PQ[a0])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0])
                                    + delta[a0][c0] * delta[c1][d1] * (QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (QD_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PA_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PA_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PA_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PA_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PA_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PA_0 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PQ[a0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PQ[a0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PQ[a0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PQ[a0] * QD_1 * QC_1)
                                    + delta[a0][d1] * (QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (QD_0 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPSDD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ps,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_ps[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ps[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0)
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0)
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-2.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][d1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1)
                                    + delta[a0][d1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPSDD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ps,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ps,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_ps[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ps[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0])
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[d1])
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}
__global__ void
computeExchangeFockPDDS0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PA_0)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PA_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * PA_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * (QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (QC_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PA_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[b1][c1] * (PB_0 * PA_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * QC_1)
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1
                                    + PB_0 * PA_0 * PQ[b1] * QC_0 * QC_1
                                    + PB_1 * PA_0 * PQ[b0] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDS1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1
                                    + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0)
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0)
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0)
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1]
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1]
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDS2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[b1][c1] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PQ[a0])
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0])
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0])
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[b0])
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[b0])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[b1])
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[b1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0])
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0])
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1])
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1]
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1]
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDP0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[a0][b0] * delta[c1][d0] * (QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (QD_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S1 * (
                                    delta[a0][b0] * (QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c1][d0] * (PB_0 * PA_0 * QC_0)
                                    + delta[c0][d0] * (PB_0 * PA_0 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * QD_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PB_0 * PA_0 * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[a0][b0] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (PA_0)
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0)
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][b0] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[b0][d0] * (PA_0 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PA_0 * QD_0 * QC_0)
                                    + delta[b0][c0] * (PA_0 * QD_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][b0] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PQ[a0] * QD_0 * QC_0 * QC_1
                                    + PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDP1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[a0][c1] * delta[b0][d0] * (QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * (QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0])
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * (QD_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b0][d0] * (PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * QD_0 * QC_1)
                                    + delta[a0][d0] * (PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b0] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDP2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PB_0 * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[2];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[a0][b0] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S1 * (
                                    delta[a0][b0] * (QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PA_0 * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PA_0 * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PA_0 * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PA_0 * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PA_0 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                (
                                    
                                    + PB_0 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.125 / ( S1 * S2 * S2 ) * (
                                    delta[a0][b0] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S2 * S2 * S4 ) * (
                                    delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-2.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[a0][b0] * delta[d0][d1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * QC_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * QD_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * QC_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][b0] * (QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                                    + delta[b0][d1] * (PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][d1] * (PB_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b0][c1] * delta[d0][d1] * (PQ[a0] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * QC_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * QC_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * (QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * (QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d1] * (QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * (QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * (QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d1] * (QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * (QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * (QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (QD_1 * QC_1)
                                    + delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * QD_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * QD_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                                    + delta[a0][c0] * delta[b0][c1] * (QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * (QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_1)
                                    + delta[b0][d1] * (PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PQ[a0] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][d1] * (PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                                    delta[a0][b0] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][c1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1]
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0]
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1]
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1]
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0]
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1]
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1]
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0]
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * 2.0
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * 2.0
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * 2.0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDD3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[4];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[d1])
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-2.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0) + PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0) + PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0) + PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0) + PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0) + PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0) + PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDD4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[5];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPPDD5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[7];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[4] * (
        
                                0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1])
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[6] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDP0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[2];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PA_0 * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * QC_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * QD_0)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * PA_0 * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a0][d0] * delta[b0][b1] * (QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (QD_0 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (QD_0 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (QD_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (QD_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                                    + delta[b1][d0] * (PB_0 * PA_0 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PA_0 * QD_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PA_0 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * QD_0 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QC_1)
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PB_1 * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * QD_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDP1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 * QC_1
                                    + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 * QC_1
                                    + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * delta[c1][d0]
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0]
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0]
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0]
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1]
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0]
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0]
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1]
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1
                                    + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S1 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0])
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1])
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0])
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1])
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0])
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1])
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDP2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (QD_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (QD_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * QC_0)
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * QC_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * QD_0)
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * QD_0)
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * QD_0)
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * QD_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[d0] * QC_0 * QC_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDP3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[4];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QC_1)
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[b0] * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[b1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0])
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * QD_0)
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[b0] * QD_0)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[b1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDP4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[5];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.125 / ( S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * delta[c1][d0]
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0]
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1]
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0]
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0]
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0]
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1]
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0]
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0]
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0]
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1]
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0]
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0]
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1]
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDP5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[7];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[4] * (
        
                                0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[6] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[2];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[0] * (
        
                                0.125 / ( S1 * S2 * S2 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0)
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * QD_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (QC_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (QC_1)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (QC_1)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (QD_0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (QD_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (QD_0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (QD_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (QD_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (QD_0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (QD_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (QD_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (QD_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (QD_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (QD_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (QD_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (QD_1)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (QD_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (QD_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (QD_1)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (QD_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[2];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[1] * (
        
                                0.125 / ( S2 * S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-2.0))
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-2.0))
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-2.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-2.0))
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-2.0))
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-2.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * (-2.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * (-2.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * (-2.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * (-2.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[b0][b1] * (QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * (QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (QD_0 * QD_1 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (QD_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1 * QC_1)
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * QC_1)
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * QD_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * QC_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * QD_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PA_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PA_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PA_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PA_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PA_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PA_0 * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * QC_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_1 * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1)
                                    + delta[b1][d1] * (PB_0 * PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PB_0 * PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PB_1 * PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PB_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PB_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0)
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.125 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (QD_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0)
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0)
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0)
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0)
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0)
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0)
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0)
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0)
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0)
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0)
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0)
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0)
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[b1] * (-2.0) + PB_1 * 2.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[b1] * (-2.0) + PB_1 * 2.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[b1] * (-2.0) + PB_1 * 2.0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0)
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0)
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0)
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0)
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0)
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0)
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0)
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0)
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0)
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0)
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0)
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1)
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1)
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1)
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1)
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1)
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1)
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1)
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1)
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1)
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[b0] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_1 * PA_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_1 * PA_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_1 * PA_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PA_0 * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PA_0 * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PA_0 * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_1 * PA_0 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_1 * PA_0 * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_1 * PA_0 * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] + PB_1 * PQ[c1] * QD_1 + PB_1 * PQ[d1] * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * QD_1 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QD_1 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0 + PA_0 * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0 + PA_0 * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0 + PA_0 * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1 + PA_0 * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1 + PA_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0 + PA_0 * QD_0 * QD_1)
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * QC_0 * QC_1)
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * QD_0 * QC_0)
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * QD_1 * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * QD_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * QD_1 * QC_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * QD_0 * QD_1)
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0 + PB_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0 + PB_0 * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1 + PB_0 * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0 + PB_0 * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1 + PB_0 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0 + PB_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0 + PB_1 * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1 + PB_1 * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0 + PB_1 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 + PB_1 * PQ[d1] * QC_1 + PB_1 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0 + PB_0 * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0 + PB_1 * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PA_0 * PQ[c0] * QC_1 + PB_0 * PB_1 * PA_0 * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD6(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0])
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[c0])
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[c0])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[c0])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[c0])
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[c0])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[c1])
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[c1])
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[c1])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[c1])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[c1])
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[c1])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[d0])
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0])
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0])
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[d0])
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[d0])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[d0])
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[d0])
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[d0])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[d0])
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[d1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1])
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[d1])
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[d1])
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[d1])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[d1])
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[d1])
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[d1])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[d1])
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.125 / ( S4 * S4 * S4 ) * (
                                    delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] + QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (QC_0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] + QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (QC_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (QC_0)
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[c0] + QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[c0] + QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] + QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] + QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[c1] + QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] + QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (QC_1)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[c1] + QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[c1] + QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[c1] + QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] + QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * 2.0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * 2.0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * 2.0)
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0])
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0])
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0])
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0])
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0])
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0])
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0])
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0])
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0])
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0])
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0])
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0])
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[b0])
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[b0])
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[b0])
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0])
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0])
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[b0])
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[b0])
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0])
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * 2.0)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * 2.0)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * 2.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[b1])
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[b1])
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[b1])
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1])
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1])
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[b1])
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[b1])
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[b1])
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1])
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1])
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1])
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[b1] * 2.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[b1] * 2.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[b1] * 2.0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[d0] + QD_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] + QD_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[d1] + QD_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[d1] + QD_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[d1] + QD_1)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] + QD_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[d1] + QD_1)
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (QD_0)
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (QD_0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (QD_0)
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (QD_0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (QD_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (QD_1)
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (QD_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (QD_1)
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD7(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d1])
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d1])
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1)
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] + PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] + PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] + PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] + PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] + PQ[b1] * PQ[c1] * QD_1 + PQ[b1] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] + PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD8(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QC_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0 + PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0 + PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1 + PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0 + PQ[a0] * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1 + PQ[a0] * QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * QD_1 * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * QD_1 * QC_0)
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QD_1 * QC_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0 + PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0 + PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1 + PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0 + PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1 + PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b1][d1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b1][c1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0 + PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0 + PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1 + PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0 + PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * QD_1 + PQ[b1] * PQ[d1] * QC_1 + PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                                    + delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * QD_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0 + PQ[a0] * QD_0 * QD_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * QD_0 * QD_1)
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0 + PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0 + PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[b1] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD9(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD10(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                0.125 * S1 / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[d1] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] + PA_0 * PQ[b1] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] + PA_0 * PQ[b1] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] + PA_0 * PQ[b1] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d1])
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[d0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD11(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD12(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[6];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD13(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[6];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[5] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                0.25 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d1])
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDDD14(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pd,
                        const uint32_t* pair_inds_k_for_K_pd,
                        const uint32_t  pair_inds_count_for_K_pd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pd[ik];
                const auto k = pair_inds_k_for_K_pd[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[8];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 7, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[6] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F7_t[6] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[6] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F7_t[7] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDS(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)
{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F4_t[5];

                    gpu::computeBoysFunction(F4_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F4_t[0] * (

                                0.5 / S1 * (
                                    delta[a0][a1] * (QC_0 * QC_1)
                                )

                                + 0.5 / S2 * (
                                    delta[c0][c1] * (PA_0 * PA_1)
                                )

                                + (
                                    
                                    + PA_0 * PA_1 * QC_0 * QC_1
                                )

                                + 0.25 / ( S1 * S2 ) * (
                                    delta[a0][a1] * delta[c0][c1]
                                )

                            )

                            + F4_t[1] * (

                                0.25 / ( S1 * S4 ) * (
                                    delta[a0][a1] * delta[c0][c1] * (-1.0)
                                )

                                + 0.25 / ( S2 * S4 ) * (
                                    delta[a0][a1] * delta[c0][c1] * (-1.0)
                                )

                                + 0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (PA_0 * PA_1 * (-1.0))
                                )

                                + 0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][a1] * (QC_0 * QC_1 * (-1.0))
                                )

                                + 0.5 / S4 * (
                                    delta[c0][c1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[a1][c1] * (PA_0 * QC_0)
                                    + delta[a1][c0] * (PA_0 * QC_1)
                                    + delta[a0][c1] * (PA_1 * QC_0)
                                    + delta[a0][c0] * (PA_1 * QC_1)
                                    + delta[a0][a1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                )

                                + S1 / S4 * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0)
                                )

                                + S2 / S4 * (
                                    
                                    + PA_0 * PQ[a1] * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * QC_0 * QC_1
                                )

                            )

                            + F4_t[2] * (

                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * PQ[c1]
                                )

                                + ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0)
                                )

                                + ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * QC_0 * QC_1
                                )

                                + 0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[a1][c1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1])
                                )

                                + 0.5 * S2 / ( S4 * S4 ) * (
                                    delta[a1][c1] * (PQ[a0] * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * QC_1)
                                    + delta[a0][c1] * (PQ[a1] * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * QC_1)
                                    + delta[a0][a1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1])
                                )

                                + 0.25 / ( S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1]
                                    + delta[a0][c1] * delta[a1][c0]
                                    + delta[a0][a1] * delta[c0][c1]
                                )

                            )

                            + F4_t[3] * (

                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[c1]
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[c1]
                                )

                                + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0)
                                )

                                + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * (-1.0))
                                )

                            )

                            + F4_t[4] * (

                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1]
                                )

                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDP0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * sp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[a0][a1] * delta[c1][d0] * (QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (QD_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S1 * (
                                    delta[a0][a1] * (QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c1][d0] * (PA_0 * PA_1 * QC_0)
                                    + delta[c0][d0] * (PA_0 * PA_1 * QC_1)
                                    + delta[c0][c1] * (PA_0 * PA_1 * QD_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PA_0 * PA_1 * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[a0][a1] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[a1][c0] * delta[c1][d0] * (PA_0)
                                    + delta[a1][c1] * delta[c0][d0] * (PA_0)
                                    + delta[a1][d0] * delta[c0][c1] * (PA_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PA_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PA_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PA_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * (-1.0) + PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PA_1 * QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][a1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c1][d0] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                                    + delta[c0][d0] * (PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * QC_1)
                                    + delta[c0][c1] * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                                    + delta[a1][d0] * (PA_0 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PA_0 * QD_0 * QC_0)
                                    + delta[a1][c0] * (PA_0 * QD_0 * QC_1)
                                    + delta[a0][d0] * (PA_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PA_1 * QD_0 * QC_0)
                                    + delta[a0][c0] * (PA_1 * QD_0 * QC_1)
                                    + delta[a0][a1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDP1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * sp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PA_1 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[a0][c1] * delta[a1][d0] * (QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * (QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0])
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0])
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0])
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * (QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * (QD_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PA_0 * PA_1 * PQ[c0])
                                    + delta[c0][d0] * (PA_0 * PA_1 * PQ[c1])
                                    + delta[c0][c1] * (PA_0 * PA_1 * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][d0] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * QC_1)
                                    + delta[a1][d0] * (PQ[a0] * QC_0 * QC_1)
                                    + delta[a1][c1] * (PQ[a0] * QD_0 * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * QD_0 * QC_1)
                                    + delta[a0][d0] * (PQ[a1] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[a1] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * QD_0 * QC_1)
                                    + delta[a0][a1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * QD_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDP2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * sp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[a0] * PQ[c0])
                                    + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[a0] * PQ[c1])
                                    + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                                    + delta[a1][d0] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0
                                    + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1])
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0])
                                    + delta[a1][d0] * (PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}
__global__ void
computeExchangeFockDPDS0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ps_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ps_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[3];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[a1][b0] * delta[c0][c1] * (PA_0)
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S1 * (
                                    delta[a1][b0] * (PA_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PA_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c0][c1] * (PB_0 * PA_0 * PA_1)
                                )
        
                            )

                            +

                            F5_t[0] * (
        
                                (
                                    
                                    + PB_0 * PA_0 * PA_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[a1][b0] * delta[c0][c1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][c1] * delta[a1][b0] * (QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (QC_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[a1][b0] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PA_0 * PA_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a1][b0] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PA_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[b0][c1] * (PA_0 * PA_1 * QC_0)
                                    + delta[b0][c0] * (PA_0 * PA_1 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PA_0 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PA_0 * QC_1)
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PA_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PA_1 * QC_1)
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * QC_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * QC_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDS1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ps_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ps_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[4];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * QC_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[a1][b0] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][c1] * (PA_0)
                                    + delta[a1][c1] * delta[b0][c0] * (PA_0)
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PA_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PA_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0)
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0)
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[a1][b0] * (PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1])
                                )
        
                            )

                            +

                            F5_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * QC_1)
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * QC_1 + PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QC_1 + PA_1 * PQ[c1] * QC_0)
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1]
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1]
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDS2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ps_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ps_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F5_t[6];

                    gpu::computeBoysFunction(F5_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F5_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[b0][c1] * (PQ[a0] * PQ[a1] * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * QC_1)
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * QC_1 + PQ[a1] * PQ[c1] * QC_0)
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0])
                                )
        
                            )

                            +

                            F5_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][c1] * (PQ[a0])
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0])
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0])
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1])
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1])
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0])
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0])
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0])
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0])
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1])
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1])
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1])
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1]
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1]
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F5_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                )
        
                            )

                            +

                            F5_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[2];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[a0][a1] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1)
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1)
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S1 * (
                                    delta[a0][a1] * (QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[c1][d1] * (PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[c1][d0] * (PA_0 * PA_1 * QD_1 * QC_0)
                                    + delta[c0][d1] * (PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[c0][d0] * (PA_0 * PA_1 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PA_0 * PA_1 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                (
                                    
                                    + PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.125 / ( S1 * S2 * S2 ) * (
                                    delta[a0][a1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S2 * S2 * S4 ) * (
                                    delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-2.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[a0][a1] * delta[d0][d1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[a1][c1] * delta[d0][d1] * (PA_0 * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PA_0 * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PA_0 * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PA_0 * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PA_0 * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PA_0 * QC_1)
                                    + delta[a1][c0] * delta[c1][d1] * (PA_0 * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PA_0 * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PA_0 * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PA_0 * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PA_0 * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PA_0 * QD_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PA_1 * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PA_1 * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PA_1 * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PA_1 * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PA_1 * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PA_1 * QC_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PA_1 * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PA_1 * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PA_1 * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PA_1 * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PA_1 * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PA_1 * QD_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a0][a1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                                    + delta[a1][d1] * (PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][d1] * (PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1)
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1)
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[a1][c1] * delta[d0][d1] * (PQ[a0] * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * QC_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * QC_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * (QC_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * (QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][d1] * (QD_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * (QD_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][d0] * (QD_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d1] * (QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * (QD_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][d0] * (QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (QD_1 * QC_1)
                                    + delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1])
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * QD_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * QD_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                                    + delta[a0][c0] * delta[a1][c1] * (QD_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * (QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0))
                                    + delta[a1][d1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_1)
                                    + delta[a1][d1] * (PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PQ[a0] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PQ[a0] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][d1] * (PQ[a1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PQ[a1] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[a1] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * (PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1]
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0]
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1]
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1]
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0]
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1]
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1]
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0]
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1]
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * 2.0
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * 2.0
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * 2.0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDD3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[4];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[a1][c1] * delta[d0][d1] * (PA_0 * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PA_0 * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PA_0 * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PA_0 * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PA_0 * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PA_0 * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PA_0 * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PA_0 * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PA_0 * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PA_0 * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PA_0 * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PA_0 * PQ[d1])
                                    + delta[a0][c1] * delta[d0][d1] * (PA_1 * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PA_1 * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PA_1 * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PA_1 * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PA_1 * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PA_1 * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PA_1 * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PA_1 * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PA_1 * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PA_1 * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PA_1 * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PA_1 * PQ[d1])
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-2.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0) + PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0) + PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0) + PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0) + PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0) + PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0) + PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDD4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[5];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_0 * PQ[a1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0)
                                    + delta[a1][d1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][d1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0))
                                    + delta[a1][d1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][d1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_1)
                                    + delta[a1][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDSDD5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    sd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_ds,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < s_prim_count) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_ds[i * s_prim_count + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * sd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_ds[i * s_prim_count + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = s_prim_aoinds[j_prim];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = s_prim_info[j_prim + s_prim_count * 0];
                    const auto c_j = s_prim_info[j_prim + s_prim_count * 1];
                    const auto x_j = s_prim_info[j_prim + s_prim_count * 2];
                    const auto y_j = s_prim_info[j_prim + s_prim_count * 3];
                    const auto z_j = s_prim_info[j_prim + s_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[7];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[4] * (
        
                                0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1])
                                    + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1])
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][d1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][d0] * (PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][d1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * (PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[6] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}
__global__ void
computeExchangeFockDDDS0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[2];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[0] * (
        
                                0.25 / ( S1 * S1 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * (QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * (QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PA_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PB_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.125 / ( S1 * S1 * S2 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1]
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S1 * S1 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (-2.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 * S2 / ( S1 * S1 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QC_0 * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * (QC_0 * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * (QC_0 * QC_1 * (-2.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDS1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * PA_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PA_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PA_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PB_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * QC_1)
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 * QC_1
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 * QC_1
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1]
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 * QC_1
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * (QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * (QC_0 * QC_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDS2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1)
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1)
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0)
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PB_0 * PA_0)
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0)
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0)
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1)
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PB_0 * PA_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1)
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1)
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1])
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDS3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[4];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * QC_0 + PB_1 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * QC_1 + PB_1 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b1] * QC_1)
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[c1] * QC_0)
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[c1] * QC_0)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[c1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[b1] * QC_1 + PB_1 * PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QC_1 + PB_0 * PA_1 * PQ[c1] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QC_1 + PB_1 * PA_1 * PQ[c1] * QC_0)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 * S2 / ( S1 * S1 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1]
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S1 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[b0][b1]
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1]
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1]
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1]
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0]
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * 2.0
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1]
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0]
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1]
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1]
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0]
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * 2.0
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * 2.0
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1]
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1]
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1]
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.125 * S2 / ( S1 * S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (-1.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (-1.0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (-1.0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (-1.0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (-1.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * ( S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDS4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[5];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[c0])
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[c0])
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[c0])
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[c1])
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[c1])
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[c1])
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[c0])
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[c0])
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[c0])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[c1])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[c1])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[c1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[c0])
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[c0])
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[c0])
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * (-1.0) + PB_0 * PQ[c1])
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * (-1.0) + PB_0 * PQ[c1])
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * (-1.0) + PB_0 * PQ[c1])
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[c0])
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[c0])
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[c0])
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[c1])
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[c1])
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[c1])
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * (-2.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0)
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1]
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1]
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1]
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1]
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1]
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDS5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   s_prim_info,
                        const uint32_t* s_prim_aoinds,
                        const uint32_t  s_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    ds_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_ds,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_ds,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (s_prim_count + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < s_prim_count))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_ds[k * s_prim_count + l];

                if (fabs(Q_ij * Q_kl * ds_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_ds[k * s_prim_count + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = s_prim_aoinds[l_prim];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = s_prim_info[l_prim + s_prim_count * 0];
                    const auto c_l = s_prim_info[l_prim + s_prim_count * 1];
                    const auto x_l = s_prim_info[l_prim + s_prim_count * 2];
                    const auto y_l = s_prim_info[l_prim + s_prim_count * 3];
                    const auto z_l = s_prim_info[l_prim + s_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[7];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[4] * (
        
                                ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0)
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.25 * ( S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1])
                                    + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0])
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1])
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0])
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0])
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0])
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1])
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1])
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1])
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0])
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0])
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1])
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0])
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0])
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1])
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1])
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0])
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0])
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1])
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1])
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1]
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1]
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1]
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                0.5 * ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[6] * (
        
                                ( S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[2];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[0] * (
        
                                0.125 / ( S1 * S2 * S2 ) * (
                                    delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PA_0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PA_0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PA_0)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PA_1)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PA_1)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PA_1)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[a1][b0] * delta[d0][d1] * (PA_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PA_0 * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PA_0 * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PA_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PA_1 * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PA_1 * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * QD_0 * QD_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.5 / S1 * (
                                    delta[a1][b0] * (PA_0 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PA_1 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PA_0 * PA_1 * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PA_0 * PA_1 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * PA_1 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                (
                                    
                                    + PB_0 * PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (QD_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (QD_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (QD_0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (QD_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (QD_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (QD_0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (QD_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (QD_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (QD_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (QD_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (QD_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (QD_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (QD_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (QD_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (QD_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (QD_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (QD_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[2];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[1] * (
        
                                0.125 / ( S2 * S2 * S4 ) * (
                                    delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-2.0))
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-2.0))
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-2.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PA_1 * (-2.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PA_1 * (-2.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PA_1 * (-2.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-2.0))
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-2.0))
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-2.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * (-2.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[a1][b0] * delta[d0][d1] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PA_0 * QD_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PA_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PA_1 * QD_0 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PA_1 * QD_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * QD_1 * QC_1 * (-1.0) + PQ[a1] * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * QD_0 * QD_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * QD_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[a1][b0] * (QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * (QD_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * (QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (QD_1 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (QD_0 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (QD_0 * QD_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (QD_0 * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (QD_0 * QD_1 * QC_1)
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * PA_1 * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * PA_1 * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * PA_1 * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * PA_1 * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * PA_1 * QC_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * PA_1 * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * PA_1 * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PA_1 * QD_1)
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PA_0 * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PA_0 * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PA_0 * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PA_0 * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PA_0 * QC_1)
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PA_0 * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PA_0 * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PA_0 * QD_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PA_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PA_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PA_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PA_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PA_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PA_0 * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PA_1 * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PA_1 * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PA_1 * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PA_1 * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PA_1 * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PA_1 * QC_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PA_1 * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PA_1 * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PA_1 * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PA_1 * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PA_1 * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PA_1 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0) + PA_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0) + PA_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * (-1.0) + PA_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_1 * (-1.0) + PA_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_1 * (-1.0) + PA_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * (-1.0) + PA_1 * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a1][b0] * (PA_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PA_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * QC_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 * QC_0 + PB_0 * PA_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[b0][d1] * (PA_0 * PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PA_0 * PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PA_0 * PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PA_0 * PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a1][d1] * (PB_0 * PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                                    delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PA_0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PA_0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PA_0)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PA_1)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PA_1)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PA_1)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.125 / ( S1 * S4 * S4 ) * (
                                    delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (QD_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PA_0)
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PA_0)
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PA_0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PA_0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PA_0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PA_0)
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PA_0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PA_0)
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PA_0)
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PA_0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PA_0)
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PA_0)
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PA_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PA_1)
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PA_1)
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PA_1)
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PA_1)
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PA_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PA_1)
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PA_1)
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PA_1)
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PA_1)
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PA_1)
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PA_1)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * (-2.0) + PA_1 * 2.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * (-2.0) + PA_1 * 2.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * (-2.0) + PA_1 * 2.0)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0)
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0)
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * (-2.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c1] * (-1.0) + PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * (-1.0) + PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * (-1.0) + PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * PA_1 * PQ[d1] * (-1.0) + PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[d1] * (-1.0) + PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d1] * (-1.0) + PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[c0] * PQ[c1] + PA_1 * PQ[c0] * QC_1 + PA_1 * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d1] * (PA_1 * PQ[c0] * PQ[d0] + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[c0] * PQ[d1] + PA_1 * PQ[c0] * QD_1 + PA_1 * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[c1] * PQ[d0] + PA_1 * PQ[c1] * QD_0 + PA_1 * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[c1] * PQ[d1] + PA_1 * PQ[c1] * QD_1 + PA_1 * PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[d0] * PQ[d1] + PA_1 * PQ[d0] * QD_1 + PA_1 * PQ[d1] * QD_0)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[a1][b0] * delta[d0][d1] * (PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * (QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (QD_0 * QD_1 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * QC_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * QD_1)
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0 + PA_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0 + PA_0 * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0 + PA_0 * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1 + PA_0 * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1 + PA_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0 + PA_0 * QD_0 * QD_1)
                                    + delta[a1][d0] * delta[b0][d1] * (PA_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][d0] * (PA_0 * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][d1] * (PA_0 * QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * (PA_0 * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * (PA_0 * QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PA_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b0][d1] * (PA_0 * QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * (PA_0 * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * (PA_0 * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PA_0 * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[b0][c1] * (PA_0 * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][c0] * (PA_0 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * QC_1 + PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * QC_1 + PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * QC_1 + PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * QD_1 + PA_1 * PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * QD_1 + PA_1 * PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * QD_1 + PA_1 * PQ[b0] * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QC_1 + PA_1 * PQ[c1] * QC_0 + PA_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0 + PA_1 * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_1 + PA_1 * PQ[d1] * QC_0 + PA_1 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 + PA_1 * PQ[d0] * QC_1 + PA_1 * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_1 + PA_1 * PQ[d1] * QC_1 + PA_1 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 + PA_1 * PQ[d1] * QD_0 + PA_1 * QD_0 * QD_1)
                                    + delta[a0][d0] * delta[b0][d1] * (PA_1 * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * (PA_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d1] * (PA_1 * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * (PA_1 * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PA_1 * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PA_1 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d1] * (PA_1 * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * (PA_1 * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * (PA_1 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PA_1 * QD_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PA_1 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PA_1 * QD_0 * QD_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0 + PB_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0 + PB_0 * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1 + PB_0 * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0 + PB_0 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1 + PB_0 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0 + PB_0 * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PA_1 * PQ[c0] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[c0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[c1] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[d0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[a1][b0] * (PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1)
                                    + delta[b0][d1] * (PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PA_0 * PQ[a1] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD6(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PA_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PA_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PA_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PA_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PA_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[c0])
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[c0])
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[c0])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[c0])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[c0])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[c0])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[c1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[c1])
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[c1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[c1])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[c1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[c1])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[d0])
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[d0])
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[d0])
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[d0])
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[d0])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[d0])
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[d0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[d0])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[d0])
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[d1])
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[d1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[d1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[d1])
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[d1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[d1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[d1])
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[d1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[d1])
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.125 / ( S4 * S4 * S4 ) * (
                                    delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (QC_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[c0] + QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (QC_0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[c0] + QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (QC_0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[c0] + QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[c0] + QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[c0] + QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[c0] + QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[c0] + QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (QC_1)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[c1] + QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[c1] + QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[c1] + QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[c1] + QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[c1] + QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[c1] + QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[c1] + QC_1)
                                    + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a0])
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a0])
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a0])
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a0])
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a0])
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a0])
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a0])
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a0])
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a0])
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a0])
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a0])
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a0])
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * 2.0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * 2.0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * 2.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a1])
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a1])
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a1])
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a1])
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a1])
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a1])
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a1])
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a1])
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a1])
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a1])
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a1])
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * 2.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * 2.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * 2.0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PQ[b0])
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PQ[b0])
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PQ[b0])
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PQ[b0])
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PQ[b0])
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PQ[b0])
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PQ[b0])
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PQ[b0])
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * 2.0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * 2.0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * 2.0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[d0] + QD_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[d0] + QD_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[d0] + QD_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[d0] + QD_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[d1] + QD_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[d1] + QD_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[d1] + QD_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[d1] + QD_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[d1] + QD_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[d1] + QD_1)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (QD_0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (QD_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (QD_0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (QD_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (QD_1)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (QD_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (QD_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (QD_1)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD7(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * PA_1 * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * PA_1 * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d1])
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d1])
                                    + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PA_1 * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PA_1 * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d1])
                                    + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * (-2.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[b0][d1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[b0][d1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] + PQ[a1] * PQ[c0] * QC_1 + PQ[a1] * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d1] * (PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] + PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] + PQ[a1] * PQ[c0] * QD_1 + PQ[a1] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * (PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] + PQ[a1] * PQ[c1] * QD_0 + PQ[a1] * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] + PQ[a1] * PQ[c1] * QD_1 + PQ[a1] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * (PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] + PQ[a1] * PQ[d0] * QD_1 + PQ[a1] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD8(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * QC_1)
                                    + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0 + PQ[a0] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0 + PQ[a0] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1 + PQ[a0] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0 + PQ[a0] * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1 + PQ[a0] * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * QD_1 * QC_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * QC_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[c0] * QC_1 + PQ[a1] * PQ[c1] * QC_0 + PQ[a1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0 + PQ[a1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * QD_0 + PQ[a1] * PQ[d0] * QC_1 + PQ[a1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[c0] * QD_1 + PQ[a1] * PQ[d1] * QC_0 + PQ[a1] * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[c1] * QD_1 + PQ[a1] * PQ[d1] * QC_1 + PQ[a1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0 + PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0 + PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1 + PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0 + PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1 + PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                                    + delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * QD_1)
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0 + PQ[a0] * QD_0 * QD_1)
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * QD_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[d0] * QD_1 + PQ[a1] * PQ[d1] * QD_0 + PQ[a1] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * QD_0 * QD_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0 + PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[b0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD9(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_1)
                                    + delta[b0][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD10(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                0.125 * S1 / ( S4 * S4 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[c0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[a0] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[a0] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[a0] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[a0] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[a0] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[a0] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[a0] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[a0] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[a0] * PQ[d1])
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][d1] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b0][d0] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b0][d1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][d0] * (PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][d1] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][d0] * (PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][c1] * (PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][c0] * (PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * (PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][d1] * (PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * (PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * (PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d1] * (PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * (PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * (PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * (PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * (PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD11(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * (-2.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD12(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[6];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD13(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[6];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[5] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                0.25 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d1])
                                    + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDD14(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * pd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[8];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 7, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[6] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F7_t[6] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[6] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F7_t[7] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[2];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[0] * (
        
                                0.125 / ( S1 * S1 * S2 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.25 / ( S1 * S1 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * (QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * (QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * QC_0)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * QD_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * QD_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * QD_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * QC_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_0)
                                )
        
                            )

                            +

                            F7_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.125 / ( S1 * S1 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QC_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QC_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QC_0 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QC_1 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0 * (-2.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[2];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[1] * (
        
                                0.25 * S2 / ( S1 * S1 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QD_0 * QC_0 * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * (QD_0 * QC_0 * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * (QD_0 * QC_0 * QC_1 * (-2.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * QD_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QC_1 + PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 + PA_1 * PQ[b1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QC_1 + PA_1 * PQ[b1] * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * QD_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PA_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PA_1)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PA_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PA_1)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * (-1.0) + PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_0)
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0)
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_1 * PA_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PA_0 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_1)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PA_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * (-1.0) + PB_1 * PA_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PA_1 * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0)
                                    + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0 * QC_1
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.125 * S2 / ( S1 * S1 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.125 / ( S1 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * (-1.0) + PQ[a0])
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * (-1.0) + PQ[a1])
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * (-1.0) + PQ[b0])
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * (-1.0) + PQ[b1])
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * 2.0 + QC_0 * 2.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * 2.0 + QC_0 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * 2.0 + QC_0 * 2.0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * 2.0 + QC_1 * 2.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * 2.0 + QC_1 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * 2.0 + QC_1 * 2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * 2.0 + QD_0 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * 2.0 + QD_0 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * 2.0 + QD_0 * 2.0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (QD_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (QD_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (QD_0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (QD_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (QD_0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (QD_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0])
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0])
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * (QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * (QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0])
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1])
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0])
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1])
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0])
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0])
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1])
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0])
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1])
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0])
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1])
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0])
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0])
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1])
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0])
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0)
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * QD_0 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * QD_0 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * QD_0 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 * 2.0 + PQ[c1] * QD_0 * QC_0 * 2.0 + PQ[d0] * QC_0 * QC_1 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QC_1 * 2.0 + PQ[c1] * QD_0 * QC_0 * 2.0 + PQ[d0] * QC_0 * QC_1 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QC_1 * 2.0 + PQ[c1] * QD_0 * QC_0 * 2.0 + PQ[d0] * QC_0 * QC_1 * 2.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[3];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] + PB_1 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] + PB_1 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] + PB_1 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b1])
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] + PA_0 * PA_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] + PA_0 * PA_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] + PA_0 * PA_1 * QD_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PA_1 * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PA_1 * QC_0)
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * QC_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1 * QD_0)
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1 * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] + PB_0 * PA_0 * QC_0)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] + PB_0 * PA_0 * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] + PB_0 * PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PA_0 * QC_0)
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PA_0 * QC_0)
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * QC_1)
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * QC_1)
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0 * QD_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] + PB_1 * PA_0 * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] + PB_1 * PA_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] + PB_1 * PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PA_0 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PA_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0 * QD_0)
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] + PB_0 * PA_1 * PQ[b1] + PB_1 * PA_1 * PQ[b0])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] + PB_0 * PA_1 * PQ[b1] + PB_1 * PA_1 * PQ[b0])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] + PB_0 * PA_1 * PQ[b1] + PB_1 * PA_1 * PQ[b0])
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] + PB_0 * PA_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] + PB_0 * PA_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] + PB_0 * PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PA_1 * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PA_1 * QC_0)
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * QC_1)
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1 * QD_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] + PB_1 * PA_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] + PB_1 * PA_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] + PB_1 * PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PA_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PA_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1 * QD_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PB_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PB_1 * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] + PB_0 * PB_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] + PB_0 * PB_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] + PB_0 * PB_1 * QD_0)
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1 * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1 * QD_0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0])
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F7_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * QC_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * QC_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b1] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PA_1 * PQ[b1] * QD_0 * QC_1)
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 + PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PA_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 * QC_1 + PB_1 * PA_0 * PQ[c1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * QC_0 * QC_1 + PB_0 * PA_1 * PQ[b1] * QC_0 * QC_1 + PB_1 * PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QC_1 + PB_0 * PA_1 * PQ[b1] * QD_0 * QC_1 + PB_1 * PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 * QC_1 + PB_0 * PA_1 * PQ[c1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 * QC_1 + PB_1 * PA_1 * PQ[c1] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 * QC_1 + PB_0 * PB_1 * PQ[c1] * QD_0 * QC_0 + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.125 * S2 / ( S1 * S4 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP6(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.125 / ( S4 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PA_0)
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PA_0)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PA_0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PA_0)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PA_0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PA_0)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * (-1.0) + PA_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PA_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PA_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PA_1)
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PA_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PA_1)
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PA_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * (-1.0) + PA_1)
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * (-1.0) + PB_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * (-1.0) + PB_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-2.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * (-2.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-2.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * (-2.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-2.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * (-2.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PB_0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PB_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PB_0)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PB_0)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PB_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PB_0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PB_1)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PB_1)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PB_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PB_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PB_1)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PB_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.25 * ( S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP7(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[4];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[a0] * PQ[c0])
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[a0] * PQ[c1])
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] + PA_0 * PQ[b1] * PQ[c0])
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c1])
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] + PA_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] + PA_1 * PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] + PA_1 * PQ[b1] * PQ[c1])
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] + PA_1 * PQ[b1] * PQ[d0])
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1])
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] + PA_1 * PQ[a0] * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] + PA_1 * PQ[a0] * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] + PA_1 * PQ[a0] * QD_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * QC_1 + PA_1 * PQ[a0] * QC_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] + PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] + PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] + PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] + PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] + PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * PQ[c0] + PA_0 * PQ[b1] * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] + PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] + PA_0 * PQ[b1] * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] + PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] + PA_0 * PQ[b1] * QD_0)
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0] + PA_1 * PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0] + PA_1 * PQ[b0] * PQ[b1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0] + PA_1 * PQ[b0] * PQ[b1])
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] + PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] + PB_0 * PQ[a1] * QC_1 + PA_1 * PQ[b0] * PQ[c1] + PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] + PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * QC_1 + PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * QC_1 + PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] + PB_1 * PQ[a1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] + PA_1 * PQ[b1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] + PB_1 * PQ[a1] * QC_1 + PA_1 * PQ[b1] * PQ[c1] + PA_1 * PQ[b1] * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] + PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] + PA_1 * PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[a1] * QC_0 + PA_1 * PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[a1] * QC_0 + PA_1 * PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * QC_1 + PA_1 * PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * QC_1 + PA_1 * PQ[b1] * QC_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * QD_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QC_1 + PA_1 * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QC_1 + PA_1 * PQ[c1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QC_1 + PA_1 * PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 + PA_1 * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 + PA_1 * PQ[d0] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 + PA_1 * PQ[d0] * QC_1)
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] + PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] + PB_1 * PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] + PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] + PB_1 * PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] + PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] + PB_1 * PQ[b0] * QD_0)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * (-2.0) + PQ[c0] * PQ[d0] * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QC_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 * (-2.0) + PQ[c0] * PQ[d0] * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QC_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * (-2.0) + PQ[c0] * PQ[d0] * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QC_0 * (-2.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP8(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F7_t[3] * (
        
                                0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP9(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0])
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1])
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0])
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1])
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0])
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1])
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0])
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * 2.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP10(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                0.25 * ( S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] + PQ[a0] * PQ[a1] * QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] + PQ[a0] * PQ[a1] * QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QC_1)
                                    + delta[a1][c1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[a1][d0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] + PQ[a0] * PQ[b0] * QC_0)
                                    + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] + PQ[a0] * PQ[b0] * QC_1)
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] + PQ[a0] * PQ[b1] * QC_0)
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] + PQ[a0] * PQ[b1] * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1)
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] + PQ[a1] * PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] + PQ[a1] * PQ[b0] * QC_1)
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] + PQ[a1] * PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] + PQ[a1] * PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QC_1 + PQ[a1] * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * QC_1 + PQ[a1] * PQ[c1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QC_1 + PQ[a1] * PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * QD_0 + PQ[a1] * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * QD_0 + PQ[a1] * PQ[d0] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * QD_0 + PQ[a1] * PQ[d0] * QC_1)
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] + PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] + PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] + PQ[a0] * PQ[a1] * QD_0)
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * QD_0)
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] + PQ[a0] * PQ[b0] * QD_0)
                                    + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0)
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] + PQ[a0] * PQ[b1] * QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] + PQ[a1] * PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_0)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] + PQ[a1] * PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_0)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] + PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP11(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[5];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.5 * ( S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1)
                                    + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_1)
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                                )
        
                            )

                            +

                            F7_t[4] * (
        
                                0.125 * S2 / ( S4 * S4 * S4 * S4 ) * (
                                    delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0])
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a0])
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a0])
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0])
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0])
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0])
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0])
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a0])
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a0])
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0])
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0])
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0])
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0])
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0])
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0])
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1])
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a1])
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1])
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1])
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1])
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a1])
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a1])
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1])
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1])
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1])
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1])
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PQ[b0])
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PQ[b0])
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0])
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0])
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0])
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PQ[b0])
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PQ[b0])
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0])
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0])
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0])
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0])
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0])
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PQ[b1])
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PQ[b1])
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1])
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1])
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1])
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1])
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PQ[b1])
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PQ[b1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1])
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1])
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1])
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0])
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0])
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0])
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0])
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0])
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0])
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0])
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0])
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0])
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0])
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1])
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1])
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1])
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1])
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1])
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1])
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0])
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0])
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0])
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0])
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0])
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0])
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0])
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0])
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0])
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0])
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0])
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP12(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[6];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                ( S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                0.25 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDP13(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];

                if (fabs(Q_ij * Q_kl * dp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F7_t[8];

                    gpu::computeBoysFunction(F7_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 7, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F7_t[5] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F7_t[5] * (
        
                                0.5 * ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F7_t[6] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F7_t[6] * (
        
                                ( S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F7_t[6] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F7_t[7] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[1];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 0, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[0] * (
        
                                0.125 / ( S1 * S1 * S2 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0 * QD_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                                )
        
                            )

                            +

                            F8_t[0] * (
        
                                0.125 / ( S1 * S2 * S2 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1)
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0)
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0)
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0)
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                                )
        
                            )

                            +

                            F8_t[0] * (
        
                                0.25 / ( S1 * S1 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0 * QD_1)
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * QD_1 * QC_0)
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1 * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0 * QD_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * QD_0 * QD_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * QD_0 * QD_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F8_t[0] * (
        
                                0.25 / ( S2 * S2 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                                )
        
                            )

                            +

                            F8_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[2];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F8_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[0] * (
        
                                0.0625 / ( S1 * S1 * S2 * S2 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.0625 / ( S1 * S1 * S2 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.0625 / ( S1 * S2 * S2 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.125 / ( S1 * S1 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0 * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0 * QC_1 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (QD_0 * QC_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (QD_0 * QC_0 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QD_1 * QC_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QD_1 * QC_0 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0 * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0 * QC_1 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1 * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1 * QC_1 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0 * QD_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0 * QD_1 * (-2.0))
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * QC_0)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * QC_0)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * QC_1)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * QD_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * QD_0)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * QD_0)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * QD_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * QD_0)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * QD_0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_1)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * QD_1)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * QD_1)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * QD_1)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * QD_1)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * QD_1)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * QD_1)
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * QC_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * QC_1)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * QD_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * QD_0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * QD_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * QD_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * QD_0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * QD_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * QD_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * QD_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * QD_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * QD_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * QD_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * QD_1)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * QD_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * QD_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * QD_1)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * QD_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * QD_1)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * QC_0)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * QC_0)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * QD_0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * QD_0)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * QD_0)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * QD_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * QD_0)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * QD_0)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * QD_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0)
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * QD_1)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * QD_1)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * QD_1)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * QD_1)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * QD_1)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * QD_1)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * QD_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * QD_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * QD_0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * QD_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * QD_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * QD_0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * QD_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * QD_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * QD_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * QD_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * QD_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * QD_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * QD_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * QD_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[2];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[1] * (
        
                                0.125 / ( S2 * S2 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-2.0))
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-2.0))
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-2.0))
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-2.0))
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-2.0))
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-2.0))
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0 * (-2.0))
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0 * (-2.0))
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-2.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1 * (-2.0))
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1 * (-2.0))
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1 * (-2.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1 * (-2.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1 * (-2.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1 * (-2.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-2.0))
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-2.0))
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-2.0))
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.25 * S1 / ( S2 * S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * (-2.0))
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.25 * S2 / ( S1 * S1 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-2.0))
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                                    + delta[a1][d1] * delta[b0][b1] * (PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d1] * (PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a1][b1] * (PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[b0][b1] * (PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * (PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * (PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[a1][b1] * (PB_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d1] * (PB_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b1] * (PB_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * (PB_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * (PB_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * (PB_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[2];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * QC_1)
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * QD_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * QC_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * QD_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QC_1)
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * QD_1)
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * QD_0 * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * QC_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * QD_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[3];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F8_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1)
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0)
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0)
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0)
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.125 * S2 / ( S1 * S1 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0 * QD_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[3];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[2] * (
        
                                0.125 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                                    + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0 + QC_0 * QC_1 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0 + QC_0 * QC_1 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0 + QC_0 * QC_1 * 2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0 + QD_0 * QC_0 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0 + QD_0 * QC_0 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0 + QD_0 * QC_0 * 2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * 2.0 + PQ[d0] * QC_1 * 2.0 + QD_0 * QC_1 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * 2.0 + PQ[d0] * QC_1 * 2.0 + QD_0 * QC_1 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * 2.0 + PQ[d0] * QC_1 * 2.0 + QD_0 * QC_1 * 2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * 2.0 + PQ[d1] * QC_0 * 2.0 + QD_1 * QC_0 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * 2.0 + PQ[d1] * QC_0 * 2.0 + QD_1 * QC_0 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * 2.0 + PQ[d1] * QC_0 * 2.0 + QD_1 * QC_0 * 2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * 2.0 + PQ[d1] * QC_1 * 2.0 + QD_1 * QC_1 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * 2.0 + PQ[d1] * QC_1 * 2.0 + QD_1 * QC_1 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * 2.0 + PQ[d1] * QC_1 * 2.0 + QD_1 * QC_1 * 2.0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (QC_0 * QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (QC_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (QC_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (QC_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (QD_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (QD_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (QD_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (QD_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (QD_1 * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (QD_1 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (QD_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (QD_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (QD_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (QD_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (QD_1 * QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (QD_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (QD_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0 + QD_0 * QD_1 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0 + QD_0 * QD_1 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0 + QD_0 * QD_1 * 2.0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (QD_0 * QD_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (QD_0 * QD_1)
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (QD_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * QD_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (QD_0 * QD_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (QD_0 * QD_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (QD_0 * QD_1)
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (QD_0 * QD_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD6(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[3];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * 2.0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * 2.0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * 2.0)
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PA_1)
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PA_1)
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PA_1)
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PA_1)
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PA_1)
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PA_1)
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PA_1)
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PA_1)
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PA_1)
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PA_1)
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PA_1)
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PA_1)
                                    + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0)
                                    + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0)
                                    + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0)
                                    + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0)
                                    + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                                    + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0)
                                    + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0)
                                    + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0)
                                    + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0)
                                    + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0)
                                    + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0)
                                    + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0)
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0) + PB_0 * PA_0 * 2.0)
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0) + PB_0 * PA_0 * 2.0)
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0) + PB_0 * PA_0 * 2.0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0)
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0)
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0)
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0)
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0)
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0)
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0)
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * (-2.0) + PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * 2.0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-2.0) + PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * 2.0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-2.0) + PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * 2.0)
                                    + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_1)
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_1)
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_1)
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_1)
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_1)
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_1)
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_1)
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_1)
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_1)
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_1)
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_1)
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_1)
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-2.0) + PA_1 * PQ[b0] * (-2.0) + PB_0 * PA_1 * 2.0)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-2.0) + PA_1 * PQ[b0] * (-2.0) + PB_0 * PA_1 * 2.0)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * (-2.0) + PA_1 * PQ[b0] * (-2.0) + PB_0 * PA_1 * 2.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_1)
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_1)
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_1)
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_1)
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_1)
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_1)
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_1)
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_1)
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_1)
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_1)
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] * (-2.0) + PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_1 * 2.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-2.0) + PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_1 * 2.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a1] * (-2.0) + PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_1 * 2.0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0) + PB_0 * PB_1 * 2.0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0) + PB_0 * PB_1 * 2.0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0) + PB_0 * PB_1 * 2.0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1)
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1)
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1)
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1)
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1)
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1)
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1)
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1)
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD7(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[3];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[2] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[c1] * QC_0)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0)
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * (-1.0))
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[c1] * QC_0)
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_0)
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QD_0)
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PQ[c0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1] + PB_1 * PA_0 * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[d1] * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QD_0)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] + PB_0 * PA_1 * PQ[c0] * QC_1 + PB_0 * PA_1 * PQ[c1] * QC_0)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[c0] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[d1] + PB_0 * PA_1 * PQ[c0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * PQ[d0] + PB_0 * PA_1 * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1] + PB_0 * PA_1 * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[d1] * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1] + PB_0 * PA_1 * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QD_0)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] + PB_1 * PA_1 * PQ[c0] * QC_1 + PB_1 * PA_1 * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] + PB_1 * PA_1 * PQ[c0] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[d1] + PB_1 * PA_1 * PQ[c0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[c1] * PQ[d0] + PB_1 * PA_1 * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1] + PB_1 * PA_1 * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * PQ[d1] + PB_1 * PA_1 * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QD_0)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1)
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_0)
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a1][d1] * delta[b0][b1] * (PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d1] * (PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a1][b1] * (PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[b0][b1] * (PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * (PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * (PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[a1][b1] * (PB_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d1] * (PB_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b1] * (PB_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * (PB_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * (PB_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * (PB_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * 2.0 + PQ[c1] * QD_0 * QD_1 * QC_0 * 2.0 + PQ[d0] * QD_1 * QC_0 * QC_1 * 2.0 + PQ[d1] * QD_0 * QC_0 * QC_1 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * 2.0 + PQ[c1] * QD_0 * QD_1 * QC_0 * 2.0 + PQ[d0] * QD_1 * QC_0 * QC_1 * 2.0 + PQ[d1] * QD_0 * QC_0 * QC_1 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * 2.0 + PQ[c1] * QD_0 * QD_1 * QC_0 * 2.0 + PQ[d0] * QD_1 * QC_0 * QC_1 * 2.0 + PQ[d1] * QD_0 * QC_0 * QC_1 * 2.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD8(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[3];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_1)
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * QC_0 + PB_1 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b1] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * QC_0 + PB_1 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b1] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * QC_0 + PB_1 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b1] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * QC_1 + PB_1 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b1] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * QC_1 + PB_1 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b1] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * QC_1 + PB_1 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b1] * QC_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * QD_0 + PB_1 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b1] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * QD_0 + PB_1 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b1] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * QD_0 + PB_1 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b1] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * QD_1 + PB_1 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b1] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * QD_1 + PB_1 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b1] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * QD_1 + PB_1 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b1] * QD_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[c1] * QC_0 + PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0 + PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0 + PA_0 * PA_1 * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_1 + PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_1 + PA_0 * PA_1 * QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0 + PA_0 * PA_1 * QD_0 * QD_1)
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PA_1 * QD_1 * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PA_1 * QD_1 * QC_0)
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * QD_1 * QC_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1 * QD_0 * QD_1)
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1 * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_1)
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[c1] * QC_0 + PB_0 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_0 + PB_0 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_0 + PB_0 * PA_0 * QD_1 * QC_0)
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_1 + PB_0 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_1 + PB_0 * PA_0 * QD_1 * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QD_0 + PB_0 * PA_0 * QD_0 * QD_1)
                                    + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b1][d1] * (PB_0 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b1][c1] * (PB_0 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PA_0 * QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PA_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b1][d1] * (PB_0 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0 * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QD_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[c1] * QC_0 + PB_1 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_0 + PB_1 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QC_0 + PB_1 * PA_0 * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_1 + PB_1 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[d1] * QC_1 + PB_1 * PA_0 * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QD_0 + PB_1 * PA_0 * QD_0 * QD_1)
                                    + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][d1] * (PB_1 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * (PB_1 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PA_0 * QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PA_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b0][d1] * (PB_1 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0 * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QD_1)
                                    + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_1 * PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[b1] * QC_1 + PB_1 * PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[b1] * QC_1 + PB_1 * PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[b1] * QC_1 + PB_1 * PA_1 * PQ[b0] * QC_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_1 * PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[b1] * QD_1 + PB_1 * PA_1 * PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[b1] * QD_1 + PB_1 * PA_1 * PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[b1] * QD_1 + PB_1 * PA_1 * PQ[b0] * QD_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QC_1 + PB_0 * PA_1 * PQ[c1] * QC_0 + PB_0 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_0 + PB_0 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QC_0 + PB_0 * PA_1 * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_1 + PB_0 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[d1] * QC_1 + PB_0 * PA_1 * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QD_0 + PB_0 * PA_1 * QD_0 * QD_1)
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PA_1 * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PA_1 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * QD_1 * QC_1)
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1 * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QC_1 + PB_1 * PA_1 * PQ[c1] * QC_0 + PB_1 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_0 + PB_1 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QC_0 + PB_1 * PA_1 * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_1 + PB_1 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[d1] * QC_1 + PB_1 * PA_1 * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QD_0 + PB_1 * PA_1 * QD_0 * QD_1)
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PA_1 * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PA_1 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * QD_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1 * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0 + PB_0 * PB_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0 + PB_0 * PB_1 * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1 + PB_0 * PB_1 * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0 + PB_0 * PB_1 * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1 + PB_0 * PB_1 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1 * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * PB_1 * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * PB_1 * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PB_1 * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PB_1 * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * PB_1 * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * PB_1 * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * QD_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0 + PB_0 * PB_1 * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1 * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1 * QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD9(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[3];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 + PB_0 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * QD_1 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_1 + PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 * QC_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * QD_1 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1 * QC_0 + PB_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1 * QC_1 + PB_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.0625 / ( S1 * S1 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F8_t[2] * (
        
                                0.0625 / ( S1 * S2 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1]
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0]
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1]
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0]
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * delta[c1][d1]
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * delta[c1][d0]
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1]
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1]
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0]
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1]
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1]
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0]
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * delta[d0][d1]
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * delta[c0][d1]
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * delta[c0][d0]
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1]
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1]
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1]
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1]
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * delta[c1][d1]
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * delta[c0][c1]
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0]
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1]
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0]
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1]
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * delta[c1][d0]
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * delta[c0][c1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * 4.0
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * 4.0
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * 4.0
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1]
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0]
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1]
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1]
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0]
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1]
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1]
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0]
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0]
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1]
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * delta[d0][d1]
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * delta[c1][d1]
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * delta[c1][d0]
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * delta[d0][d1]
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * delta[c1][d1]
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * delta[c1][d0]
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * delta[d0][d1]
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * delta[c0][d1]
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * delta[c0][d0]
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * delta[d0][d1]
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * delta[c0][d1]
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * delta[c0][d0]
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * delta[c1][d1]
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * delta[c0][d1]
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * delta[c0][c1]
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * delta[c1][d1]
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * delta[c0][d1]
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * delta[c0][c1]
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * delta[c1][d0]
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * delta[c0][d0]
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * delta[c0][c1]
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * delta[c1][d0]
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * delta[c0][d0]
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * delta[c0][c1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * 4.0
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * 4.0
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * 4.0
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * 4.0
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * 4.0
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * 4.0
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD10(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[4];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[2] * (
        
                                0.0625 / ( S2 * S2 * S4 * S4 ) * (
                                    delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                0.0625 / ( S1 * S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD11(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[4];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[3] * (
        
                                0.0625 / ( S2 * S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (-1.0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0])
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0])
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0])
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[c0])
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[c0])
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[c0])
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c0])
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[c0])
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[c0])
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c1])
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1])
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1])
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[c1])
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[c1])
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[c1])
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c1])
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[c1])
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[c1])
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[d0])
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0])
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0])
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[d0])
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[d0])
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[d0])
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[d0])
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[d0])
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d0])
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[d1])
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1])
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d1])
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[d1])
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[d1])
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[d1])
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[d1])
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[d1])
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d1])
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c0])
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[c0])
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[c0])
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * PQ[c0])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * PQ[c0])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * PQ[c0])
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c0])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[c0])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[c0])
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c1])
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[c1])
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[c1])
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * PQ[c1])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * PQ[c1])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * PQ[c1])
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c1])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[c1])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[c1])
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[d0])
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[d0])
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * PQ[d0])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * PQ[d0])
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[d0])
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[d0])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d0])
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[d1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[d1])
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * PQ[d1])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * PQ[d1])
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[d1])
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[d1])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d1])
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c0])
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[c0])
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[c0])
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0])
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0])
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0])
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0])
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0])
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0])
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c1])
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[c1])
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[c1])
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1])
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1])
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1])
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1])
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1])
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[d0])
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[d0])
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d0])
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0])
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0])
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0])
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[d1])
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d1])
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1])
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1])
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c0])
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[c0])
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[c0])
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0])
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[c1])
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[c1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1])
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[d0])
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[d0])
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0])
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[d1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD12(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[4];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[3] * (
        
                                0.125 * S2 / ( S1 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (QD_1 * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD13(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[4];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[3] * (
        
                                0.125 / ( S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * 2.0 + PA_1 * PQ[a0] * 2.0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * 2.0 + PA_1 * PQ[a0] * 2.0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * 2.0 + PA_1 * PQ[a0] * 2.0)
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-2.0) + PB_0 * PQ[a0] * 2.0 + PA_0 * PQ[b0] * 2.0)
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-2.0) + PB_0 * PQ[a0] * 2.0 + PA_0 * PQ[b0] * 2.0)
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-2.0) + PB_0 * PQ[a0] * 2.0 + PA_0 * PQ[b0] * 2.0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * 2.0 + PA_0 * PQ[b1] * 2.0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * 2.0 + PA_0 * PQ[b1] * 2.0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * 2.0 + PA_0 * PQ[b1] * 2.0)
                                    + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] * (PA_0 * QC_0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] * (PA_0 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] * (PA_0 * QC_0)
                                    + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] * (PA_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] * (PA_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][d0] * delta[b1][c1] * (PA_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PA_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PA_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PA_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PA_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PA_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PA_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] * (PA_0 * QD_0)
                                    + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] * (PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] * (PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] * (PA_0 * QD_0)
                                    + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] * (PA_0 * QD_0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[b1][c0] * (PA_0 * QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PA_0 * QD_1)
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PA_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PA_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PA_0 * QD_1)
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PA_0 * QD_1)
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PA_0 * QD_1)
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-2.0) + PB_0 * PQ[a1] * 2.0 + PA_1 * PQ[b0] * 2.0)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-2.0) + PB_0 * PQ[a1] * 2.0 + PA_1 * PQ[b0] * 2.0)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-2.0) + PB_0 * PQ[a1] * 2.0 + PA_1 * PQ[b0] * 2.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a1] * 2.0 + PA_1 * PQ[b1] * 2.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a1] * 2.0 + PA_1 * PQ[b1] * 2.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a1] * 2.0 + PA_1 * PQ[b1] * 2.0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PA_1 * QC_0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PA_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PA_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PA_1 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PA_1 * QC_0)
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PA_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PA_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PA_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PA_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PA_1 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PA_1 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PA_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PA_1 * QD_0)
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PA_1 * QD_0)
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PA_1 * QD_0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PA_1 * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PA_1 * QD_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PA_1 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PA_1 * QD_1)
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PA_1 * QD_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PA_1 * QD_1)
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PA_1 * QD_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] * (PB_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] * (PB_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] * (PB_0 * QC_0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] * (PB_0 * QC_0)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] * (PB_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b1][c1] * (PB_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PB_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PB_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PB_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PB_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PB_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PB_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PB_1 * QC_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PB_1 * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PB_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PB_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PB_1 * QC_0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PB_1 * QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PB_1 * QC_1)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PB_1 * QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PB_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PB_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PB_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PB_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[b1] * 2.0 + PB_1 * PQ[b0] * 2.0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[b1] * 2.0 + PB_1 * PQ[b0] * 2.0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[b1] * 2.0 + PB_1 * PQ[b0] * 2.0)
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-2.0) + PQ[c0] * QC_1 * (-2.0) + PQ[c1] * QC_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-2.0) + PQ[c0] * QC_1 * (-2.0) + PQ[c1] * QC_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-2.0) + PQ[c0] * QC_1 * (-2.0) + PQ[c1] * QC_0 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-2.0) + PQ[c0] * QD_0 * (-2.0) + PQ[d0] * QC_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-2.0) + PQ[c0] * QD_0 * (-2.0) + PQ[d0] * QC_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-2.0) + PQ[c0] * QD_0 * (-2.0) + PQ[d0] * QC_0 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-2.0) + PQ[c0] * QD_1 * (-2.0) + PQ[d1] * QC_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-2.0) + PQ[c0] * QD_1 * (-2.0) + PQ[d1] * QC_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-2.0) + PQ[c0] * QD_1 * (-2.0) + PQ[d1] * QC_0 * (-2.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-2.0) + PQ[c1] * QD_0 * (-2.0) + PQ[d0] * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-2.0) + PQ[c1] * QD_0 * (-2.0) + PQ[d0] * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-2.0) + PQ[c1] * QD_0 * (-2.0) + PQ[d0] * QC_1 * (-2.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-2.0) + PQ[c1] * QD_1 * (-2.0) + PQ[d1] * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-2.0) + PQ[c1] * QD_1 * (-2.0) + PQ[d1] * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-2.0) + PQ[c1] * QD_1 * (-2.0) + PQ[d1] * QC_1 * (-2.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-2.0) + PQ[d0] * QD_1 * (-2.0) + PQ[d1] * QD_0 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-2.0) + PQ[d0] * QD_1 * (-2.0) + PQ[d1] * QD_0 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-2.0) + PQ[d0] * QD_1 * (-2.0) + PQ[d1] * QD_0 * (-2.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] * (PB_0 * QD_0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] * (PB_0 * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] * (PB_0 * QD_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] * (PB_0 * QD_0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] * (PB_0 * QD_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b1][c0] * (PB_0 * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PB_0 * QD_1)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PB_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PB_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PB_0 * QD_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PB_0 * QD_1)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PB_0 * QD_1)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PB_1 * QD_0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PB_1 * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PB_1 * QD_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PB_1 * QD_0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PB_1 * QD_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PB_1 * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PB_1 * QD_1)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PB_1 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PB_1 * QD_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PB_1 * QD_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PB_1 * QD_1)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PB_1 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD14(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[4];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[3] * (
        
                                0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * PQ[d1])
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d1])
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * PQ[d1])
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                0.25 * ( S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0))
                                    + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD15(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[4];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-2.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-2.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-2.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_0 * PQ[a1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_1)
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a1] * PQ[c0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[c0] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a1] * PQ[c0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a1] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PB_1 * PQ[a1] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD16(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[4];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1)
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 + PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * QD_0 * QD_1)
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 + PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QC_0 + PA_0 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * QD_0 * QD_1)
                                    + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_1)
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                                    + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_1 * QC_0 + PA_0 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_1 * QC_0 + PA_0 * PQ[d1] * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_1 * QC_0 + PA_0 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[d1] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QC_0 + PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QC_0 + PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0 + PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_0 + PB_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[c0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QC_0 + PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QC_0 + PA_1 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0 + PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_0 + PA_1 * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_1 + PB_1 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_1 + PA_1 * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_1 * QC_1 + PA_1 * PQ[c1] * QD_1 * QC_0 + PA_1 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_1 * QC_1 + PA_1 * PQ[c1] * QD_1 * QC_0 + PA_1 * PQ[d1] * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_1 * QC_1 + PA_1 * PQ[c1] * QD_1 * QC_0 + PA_1 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[d1] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[d1] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_1 * QC_0 + PB_0 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_1 * QC_0 + PB_0 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_1 * QC_0 + PB_0 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_1 * QC_1 + PB_1 * PQ[c1] * QD_1 * QC_0 + PB_1 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_1 * QC_1 + PB_1 * PQ[c1] * QD_1 * QC_0 + PB_1 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_1 * QC_1 + PB_1 * PQ[c1] * QD_1 * QC_0 + PB_1 * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-2.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-2.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-2.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-2.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-2.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-2.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-2.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD17(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[4];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[3] * (
        
                                0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD18(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[5];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[4] * (
        
                                ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F8_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F8_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F8_t[4] * (
        
                                ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[4] * (
        
                                0.125 * S1 / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                                    + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                                    + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PA_1 * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PA_1 * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PA_1 * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PA_1 * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PA_1 * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PA_1 * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * 2.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1])
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * 2.0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * 2.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * 2.0)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * 2.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * 2.0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * 2.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * 2.0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * 2.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * 2.0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * 2.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * 2.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD19(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[5];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[4] * (
        
                                0.125 * S2 / ( S4 * S4 * S4 * S4 ) * (
                                    delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[a0] * QC_0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[a0] * QC_0)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[a0] * QC_0)
                                    + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[a0] * QC_0)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[a0] * QC_0)
                                    + delta[a1][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a0] * QC_1)
                                    + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a0] * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a0] * QC_1)
                                    + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a0] * QC_1)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QC_1)
                                    + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[a1] * QC_0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[a1] * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[a1] * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[a1] * QC_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[a1] * QC_0)
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a1] * QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a1] * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a1] * QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a1] * QC_1)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1] * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] * (PQ[b0] * QC_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] * (PQ[b0] * QC_0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] * (PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] * (PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] * (PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b1][c1] * (PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PQ[b0] * QC_1)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PQ[b0] * QC_1)
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0] * QC_1)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PQ[b1] * QC_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PQ[b1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PQ[b1] * QC_1)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PQ[b1] * QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1] * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1] * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                                    + delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * 2.0)
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * 2.0)
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * 2.0)
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1])
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1])
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1])
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1])
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1])
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1])
                                    + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0])
                                    + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                                    + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0])
                                    + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                                    + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * 2.0)
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * 2.0)
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * 2.0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1])
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1])
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1])
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * 2.0)
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * 2.0)
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * 2.0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[a0] * QD_0)
                                    + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[a0] * QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[a0] * QD_0)
                                    + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[a0] * QD_0)
                                    + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[a0] * QD_0)
                                    + delta[a1][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[a0] * QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a0] * QD_1)
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a0] * QD_1)
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QD_1)
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QD_1)
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a0] * QD_1)
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a0] * QD_1)
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0])
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0])
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0])
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0])
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * 2.0)
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * 2.0)
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * 2.0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b1])
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b1])
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b1])
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b1])
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b1])
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * 2.0)
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * 2.0)
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * 2.0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[a1] * QD_0)
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[a1] * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[a1] * QD_0)
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[a1] * QD_0)
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[a1] * QD_0)
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[a1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a1] * QD_1)
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a1] * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1] * QD_1)
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1] * QD_1)
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a1] * QD_1)
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a1] * QD_1)
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * 2.0)
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * 2.0)
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * 2.0)
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] * (PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] * (PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] * (PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] * (PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] * (PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b1][c0] * (PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PQ[b0] * QD_1)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0] * QD_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PQ[b0] * QD_1)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PQ[b1] * QD_0)
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PQ[b1] * QD_0)
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PQ[b1] * QD_1)
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PQ[b1] * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1] * QD_1)
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1] * QD_1)
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PQ[b1] * QD_1)
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PQ[b1] * QD_1)
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD20(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[5];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[4] * (
        
                                0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] + PB_1 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b1] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] + PB_1 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b1] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] + PB_1 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b1] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b1] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b1] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b1] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b1] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b1] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b1] * PQ[d1])
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][c0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[d0] * PQ[d1])
                                    + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[b1] * PQ[c0] + PB_1 * PA_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[b1] * PQ[c0] + PB_1 * PA_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[b1] * PQ[c0] + PB_1 * PA_1 * PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[b1] * PQ[c1] + PB_1 * PA_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[b1] * PQ[c1] + PB_1 * PA_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[b1] * PQ[c1] + PB_1 * PA_1 * PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[b1] * PQ[d1] + PB_1 * PA_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[b1] * PQ[d1] + PB_1 * PA_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[b1] * PQ[d1] + PB_1 * PA_1 * PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD21(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[5];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[4] * (
        
                                0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0)
                                    + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0)
                                    + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_1)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_1)
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0)
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QC_0)
                                    + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0)
                                    + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_1)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * 2.0 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * 2.0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * 2.0 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * 2.0)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * 2.0 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * 2.0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * 2.0 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * 2.0)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * 2.0 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * 2.0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * 2.0 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * 2.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD22(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[5];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[4] * (
        
                                0.25 * ( S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1)
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1)
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1)
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 + PQ[a0] * PQ[a1] * QC_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 + PQ[a0] * PQ[a1] * QD_0 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * QD_0 * QC_1)
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 + PQ[a0] * PQ[a1] * QD_1 * QC_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QC_0 * QC_1)
                                    + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0)
                                    + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_0)
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * QD_1 * QC_0)
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_1)
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_1 * QC_1)
                                    + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PQ[a0] * PQ[b0] * QD_1 * QC_0)
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_1 * QC_1)
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PQ[a0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PQ[a0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PQ[a0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PQ[a0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PQ[a1] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PQ[a1] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PQ[a1] * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b1][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b1][c1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_1 * QC_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PQ[a1] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PQ[a1] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PQ[a1] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PQ[a1] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PQ[a1] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 + PQ[a1] * PQ[c1] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 + PQ[a1] * PQ[c1] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QC_0 * QC_1)
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 + PQ[a1] * PQ[c1] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QD_0 * QC_0)
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[d1] * QD_0 * QC_1)
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 + PQ[b1] * PQ[c1] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 + PQ[b1] * PQ[c1] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 + PQ[b1] * PQ[c1] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_1 + PQ[b1] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_1 + PQ[b1] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_1 + PQ[b1] * PQ[d1] * QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * QD_0 * QD_1)
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1)
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_0 * QD_1)
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                                    + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_0 * QD_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD23(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[5];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[4] * (
        
                                0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F8_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                )
        
                            )

                            +

                            F8_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F8_t[4] * (
        
                                0.5 * ( S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                                    + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1)
                                    + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0 * QC_1)
                                    + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD24(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[6];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[4] * (
        
                                0.0625 / ( S4 * S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * delta[b1][d1]
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * delta[b1][d0]
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1]
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * delta[b1][d1]
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * delta[b1][c1]
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0]
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * delta[b1][d0]
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * delta[b1][c1]
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1]
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0]
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * delta[c1][d1]
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * delta[c1][d0]
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1]
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * delta[b1][d1]
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * delta[b1][d0]
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1]
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * delta[b1][d1]
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * delta[b1][c0]
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0]
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * delta[b1][d0]
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * delta[b1][c0]
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1]
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1]
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0]
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * delta[d0][d1]
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * delta[c0][d1]
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * delta[c0][d0]
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1]
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * delta[b1][d1]
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * delta[b1][c1]
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * delta[b1][d1]
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * delta[b1][c0]
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1]
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * delta[b1][c1]
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * delta[b1][c0]
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1]
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1]
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * delta[c1][d1]
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * delta[c0][c1]
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0]
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * delta[b1][d0]
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * delta[b1][c1]
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * delta[b1][d0]
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * delta[b1][c0]
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1]
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * delta[b1][c1]
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * delta[b1][c0]
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0]
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1]
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * delta[c1][d0]
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * delta[c0][c1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1]
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0]
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1]
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1]
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0]
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1]
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1]
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1]
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0]
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0]
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1]
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * delta[d0][d1]
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * delta[c1][d1]
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * delta[c1][d0]
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * delta[d0][d1]
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * delta[c1][d1]
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * delta[c1][d0]
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * delta[d0][d1]
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * delta[c0][d1]
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * delta[c0][d0]
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * delta[d0][d1]
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * delta[c0][d1]
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * delta[c0][d0]
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * delta[c1][d1]
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * delta[c0][d1]
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * delta[c0][c1]
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * delta[c1][d1]
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * delta[c0][d1]
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * delta[c0][c1]
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * delta[c1][d0]
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * delta[c0][d0]
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * delta[c0][c1]
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * delta[c1][d0]
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * delta[c0][d0]
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * delta[c0][c1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1]
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1]
                                )
        
                            )

                            +

                            F8_t[5] * (
        
                                ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F8_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD25(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[6];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[5] * (
        
                                ( S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F8_t[5] * (
        
                                0.125 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b1][c1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD26(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[6];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[5] * (
        
                                0.25 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d1])
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-2.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-2.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-2.0))
                                    + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD27(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[6];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 5, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[5] * (
        
                                0.25 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0))
                                    + delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD28(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[7];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[5] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F8_t[5] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                )
        
                            )

                            +

                            F8_t[5] * (
        
                                0.5 * ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F8_t[6] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F8_t[6] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD29(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[7];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[6] * (
        
                                ( S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                                )
        
                            )

                            +

                            F8_t[6] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F8_t[6] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                                    + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                                )
        
                            )

                            +

                            F8_t[6] * (
        
                                0.25 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                                    + delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                                    + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                                    + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1])
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1])
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1])
                                    + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                                    + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                                    + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                                    + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                                    + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                                    + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                                    + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0])
                                    + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0])
                                    + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0])
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1])
                                    + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                                    + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                                    + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1])
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1])
                                    + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a1][c0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1])
                                    + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                    + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDDDD30(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dd,
                        const uint32_t* density_inds_for_K_dd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_dd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_dd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F8_t[9];

                    gpu::computeBoysFunction(F8_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 8, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F8_t[7] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            +

                            F8_t[7] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F8_t[7] * (
        
                                0.5 * ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F8_t[8] * (
        
                                ( S1 * S1 * S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDP0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];
                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[2];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[a1][b0] * delta[c1][d0] * (PA_0 * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * QD_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * QD_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * QD_0)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S1 * (
                                    delta[a1][b0] * (PA_0 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PA_1 * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S2 * (
                                    delta[c1][d0] * (PB_0 * PA_0 * PA_1 * QC_0)
                                    + delta[c0][d0] * (PB_0 * PA_0 * PA_1 * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * PA_1 * QD_0)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                (
                                    
                                    + PB_0 * PA_0 * PA_1 * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[a1][b0] * delta[c1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][d0] * delta[a1][b0] * (QC_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][d0] * (QC_0 * QC_1)
                                    + delta[a1][d0] * delta[a0][b0] * (QC_0 * QC_1)
                                    + delta[a0][c1] * delta[a1][b0] * (QD_0 * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (QD_0 * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (QD_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (QD_0 * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (QD_0 * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (QD_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (PA_0 * PA_1)
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PA_1)
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PA_1)
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PA_0)
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PA_0)
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PA_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PA_1)
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PA_1)
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PA_1)
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[a1][b0] * (PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][b0] * (PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_0 * QC_1)
                                    + delta[a0][a1] * (PB_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_0 * QC_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 / S4 * (
                                    delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                                    + delta[b0][d0] * (PA_0 * PA_1 * QC_0 * QC_1)
                                    + delta[b0][c1] * (PA_0 * PA_1 * QD_0 * QC_0)
                                    + delta[b0][c0] * (PA_0 * PA_1 * QD_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PA_0 * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PA_0 * QD_0 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PA_0 * QD_0 * QC_1)
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PA_1 * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PA_1 * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PA_1 * QD_0 * QC_1)
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDP1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];
                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[a0][c0] * delta[a1][b0] * delta[c1][d0]
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0]
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0]
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0]
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1]
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0]
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0]
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1]
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S1 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (-1.0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (-1.0)
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (-1.0)
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (-1.0)
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (-1.0)
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PA_1 * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PA_1 * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[c0])
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[c1])
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PA_1 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[c0])
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[c1])
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[d0])
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[c0])
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[c1])
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[d0])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDP2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];
                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[a1][b0] * delta[c1][d0] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * QC_1 * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * QD_0 * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (QC_0 * QC_1 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (QD_0 * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (QD_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b0][d0] * (PA_0 * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PA_0 * QC_0)
                                    + delta[a1][c0] * delta[b0][d0] * (PA_0 * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PA_0 * QC_1)
                                    + delta[a1][c0] * delta[b0][c1] * (PA_0 * QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * (PA_0 * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][d0] * (PA_1 * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PA_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PA_1 * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PA_1 * QC_1)
                                    + delta[a0][c0] * delta[b0][c1] * (PA_1 * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * (PA_1 * QD_0)
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * QD_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[a1][b0] * (PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1)
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                                    + delta[b0][d0] * (PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDP3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];
                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[4];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[a1][c0] * delta[b0][d0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PA_0 * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                                    + delta[a1][c0] * delta[b0][c1] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PA_1 * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                                    + delta[a0][c0] * delta[b0][d0] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PA_1 * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                                    + delta[a0][c0] * delta[b0][c1] * (PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PA_1 * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                                    + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                                    + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * PQ[c1])
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * PQ[c1])
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * PQ[d0])
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * PQ[d0])
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[a1][c1] * delta[b0][d0] * (PQ[a0] * QC_0)
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * QC_0)
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * QC_1)
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * QC_1)
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * QC_0)
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * QC_0)
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * QC_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * QC_1)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * QC_0)
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * QC_1)
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                                    + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1])
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1])
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1])
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0])
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0])
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * QD_0)
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * QD_0)
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0])
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0])
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0])
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * QD_0)
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * QD_0)
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * QD_0)
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDP4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];
                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[5];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[d0])
                                    + delta[b0][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PA_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PB_0 * PA_1 * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                                    + delta[a0][a1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * QC_0 * QC_1)
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0)
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * QD_0 * QC_1)
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * QC_0 * QC_1)
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * QD_0 * QC_1)
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[d0] * QC_0 * QC_1)
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.125 / ( S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[a1][c1] * delta[b0][d0]
                                    + delta[a0][c0] * delta[a1][d0] * delta[b0][c1]
                                    + delta[a0][c0] * delta[a1][b0] * delta[c1][d0]
                                    + delta[a0][c1] * delta[a1][c0] * delta[b0][d0]
                                    + delta[a0][c1] * delta[a1][d0] * delta[b0][c0]
                                    + delta[a0][c1] * delta[a1][b0] * delta[c0][d0]
                                    + delta[a0][d0] * delta[a1][c0] * delta[b0][c1]
                                    + delta[a0][d0] * delta[a1][c1] * delta[b0][c0]
                                    + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]
                                    + delta[a0][a1] * delta[b0][c0] * delta[c1][d0]
                                    + delta[a0][a1] * delta[b0][c1] * delta[c0][d0]
                                    + delta[a0][a1] * delta[b0][d0] * delta[c0][c1]
                                    + delta[a1][c0] * delta[a0][b0] * delta[c1][d0]
                                    + delta[a1][c1] * delta[a0][b0] * delta[c0][d0]
                                    + delta[a1][d0] * delta[a0][b0] * delta[c0][c1]
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockDPDP5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_dd,
                        const uint32_t* pair_inds_k_for_K_dd,
                        const uint32_t  pair_inds_count_for_K_dd,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    pp_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_dp,
                        const uint32_t* density_inds_for_K_dp,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (p_prim_count * 3 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_dd) && (j < p_prim_count * 3) && (l < p_prim_count * 3))
            {
                const auto i = pair_inds_i_for_K_dd[ik];
                const auto k = pair_inds_k_for_K_dd[ik];

                const auto Q_ij = mat_Q_for_K_dp[i * p_prim_count * 3 + j];
                const auto Q_kl = mat_Q_for_K_dp[k * p_prim_count * 3 + l];
                if (fabs(Q_ij * Q_kl * pp_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_dp[i * p_prim_count * 3 + j];
                    const auto l_prim = density_inds_for_K_dp[k * p_prim_count * 3 + l];

                    const auto j_cgto = p_prim_aoinds[(j_prim / 3) + p_prim_count * (j_prim % 3)];
                    const auto l_cgto = p_prim_aoinds[(l_prim / 3) + p_prim_count * (l_prim % 3)];

                    const auto a0 = d_cart_inds[i % 6][0];
                    const auto a1 = d_cart_inds[i % 6][1];
                    const auto b0 = j_prim % 3;
                    const auto c0 = d_cart_inds[k % 6][0];
                    const auto c1 = d_cart_inds[k % 6][1];
                    const auto d0 = l_prim % 3;

                    const auto a_i = d_prim_info[i / 6 + d_prim_count * 0];
                    const auto c_i = d_prim_info[i / 6 + d_prim_count * 1];
                    const auto x_i = d_prim_info[i / 6 + d_prim_count * 2];
                    const auto y_i = d_prim_info[i / 6 + d_prim_count * 3];
                    const auto z_i = d_prim_info[i / 6 + d_prim_count * 4];

                    const auto a_j = p_prim_info[j_prim / 3 + p_prim_count * 0];
                    const auto c_j = p_prim_info[j_prim / 3 + p_prim_count * 1];
                    const auto x_j = p_prim_info[j_prim / 3 + p_prim_count * 2];
                    const auto y_j = p_prim_info[j_prim / 3 + p_prim_count * 3];
                    const auto z_j = p_prim_info[j_prim / 3 + p_prim_count * 4];

                    const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];
                    const auto c_k = d_prim_info[k / 6 + d_prim_count * 1];
                    const auto x_k = d_prim_info[k / 6 + d_prim_count * 2];
                    const auto y_k = d_prim_info[k / 6 + d_prim_count * 3];
                    const auto z_k = d_prim_info[k / 6 + d_prim_count * 4];

                    const auto a_l = p_prim_info[l_prim / 3 + p_prim_count * 0];
                    const auto c_l = p_prim_info[l_prim / 3 + p_prim_count * 1];
                    const auto x_l = p_prim_info[l_prim / 3 + p_prim_count * 2];
                    const auto y_l = p_prim_info[l_prim / 3 + p_prim_count * 3];
                    const auto z_l = p_prim_info[l_prim / 3 + p_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[7];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PA_1 = (a_j / (a_i + a_j)) * rij[a1];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QC_1 = (a_l / (a_k + a_l)) * rkl[c1];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[4] * (
        
                                0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * (-1.0))
                                    + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                                    + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                                    + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[a1][b0] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][a1] * delta[b0][d0] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a1][d0] * delta[a0][b0] * (PQ[c0] * PQ[c1] * (-1.0))
                                    + delta[a0][c1] * delta[a1][b0] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a1][c1] * delta[a0][b0] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[a1][b0] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a0][a1] * delta[b0][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                                    + delta[a1][c0] * delta[a0][b0] * (PQ[c1] * PQ[d0] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0])
                                    + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                                    + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                    + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1
                                    + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1])
                                    + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                                    + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                                    + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                                    + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0])
                                    + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a1][b0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                                    + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                                    + delta[a0][b0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                                    + delta[a0][a1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                                )
        
                            )

                            +

                            F6_t[6] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_dd))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPD0(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[2];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 1, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[0] * (
        
                                0.25 / ( S1 * S2 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S1 * (
                                    delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0)
                                    + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                0.5 / S2 * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * QD_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[0] * (
        
                                (
                                    
                                    + PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S1 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                                    + delta[a0][d1] * delta[b0][b1] * (QD_0 * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * (QD_1 * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0)
                                    + delta[a0][c0] * delta[b0][b1] * (QD_0 * QD_1)
                                    + delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1)
                                    + delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.25 / ( S2 * S4 ) * (
                                    delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0)
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0)
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0)
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0)
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0)
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1)
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1)
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S1 / ( S2 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 * S2 / ( S1 * S4 ) * (
                                    delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0)
                                    + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.5 / S4 * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                                    + delta[b1][d1] * (PB_0 * PA_0 * QD_0 * QC_0)
                                    + delta[b1][d0] * (PB_0 * PA_0 * QD_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QD_1)
                                    + delta[b0][d1] * (PB_1 * PA_0 * QD_0 * QC_0)
                                    + delta[b0][d0] * (PB_1 * PA_0 * QD_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QD_1)
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PB_1 * QD_0 * QC_0)
                                    + delta[a0][d0] * (PB_0 * PB_1 * QD_1 * QC_0)
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPD1(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[1] * (
        
                                S1 / S4 * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                S2 / S4 * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0
                                    + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0
                                    + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F6_t[1] * (
        
                                0.125 / ( S1 * S2 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * delta[d0][d1]
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1]
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1]
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1]
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0]
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1]
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1]
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0]
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S1 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S1 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                ( S2 * S2 ) / ( S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0
                                    + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0
                                    + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S1 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.125 / ( S2 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 * S1 / ( S2 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0])
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0])
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1])
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0])
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0])
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1])
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0])
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0])
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1])
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPD2(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[3];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 2, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[2] * (
        
                                0.25 * S2 / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QD_0 * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QD_1 * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QD_0 * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QD_1 * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (QD_0 * QD_1 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.25 / ( S4 * S4 ) * (
                                    delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * QC_0)
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * QC_0)
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * QD_0)
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * QD_0)
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * QD_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * QD_1)
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * QC_0)
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * QC_0)
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * QC_0)
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * QC_0)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * QD_0)
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * QD_0)
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * QD_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * QD_1)
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * QD_0)
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * QD_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * QD_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * QD_1)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                                    + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                                    delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S1 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                                )
        
                            )

                            +

                            F6_t[2] * (
        
                                0.5 * S2 / ( S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPD3(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[4];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 3, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                                    + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S1 / ( S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                                    + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                                    + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                                    + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                                    + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                                    + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                                    + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                                    + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                                    + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.25 * S2 / ( S4 * S4 * S4 ) * (
                                    delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * QC_0)
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * QC_0)
                                    + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * QC_0)
                                    + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * QC_0)
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * QC_0)
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                                    + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1])
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1])
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * QD_0)
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * QD_0)
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QD_1)
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QD_1)
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                                    + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * QD_0)
                                    + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * QD_0)
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * QD_1)
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * QD_1)
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * QD_0)
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * QD_0)
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * QD_1)
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * QD_1)
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPD4(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[5];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 4, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[3] * (
        
                                0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                                    + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                                    + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d1])
                                    + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1])
                                    + delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * PQ[d1])
                                    + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1])
                                    + delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * PQ[d1])
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                                    + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                                    + delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0)
                                    + delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0)
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QD_0 * QC_0)
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QD_0 * QC_0)
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                                )
        
                            )

                            +

                            F6_t[3] * (
        
                                0.125 / ( S4 * S4 * S4 ) * (
                                    delta[a0][c0] * delta[b0][b1] * delta[d0][d1]
                                    + delta[a0][c0] * delta[b0][d0] * delta[b1][d1]
                                    + delta[a0][c0] * delta[b0][d1] * delta[b1][d0]
                                    + delta[a0][d0] * delta[b0][b1] * delta[c0][d1]
                                    + delta[a0][d0] * delta[b0][c0] * delta[b1][d1]
                                    + delta[a0][d0] * delta[b0][d1] * delta[b1][c0]
                                    + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]
                                    + delta[a0][d1] * delta[b0][c0] * delta[b1][d0]
                                    + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]
                                    + delta[a0][b0] * delta[b1][c0] * delta[d0][d1]
                                    + delta[a0][b0] * delta[b1][d0] * delta[c0][d1]
                                    + delta[a0][b0] * delta[b1][d1] * delta[c0][d0]
                                    + delta[b0][c0] * delta[a0][b1] * delta[d0][d1]
                                    + delta[b0][d0] * delta[a0][b1] * delta[c0][d1]
                                    + delta[b0][d1] * delta[a0][b1] * delta[c0][d0]
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                    + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                    + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

__global__ void
computeExchangeFockPDPD5(double*         mat_K,
                        const uint32_t* pair_inds_i_for_K_pp,
                        const uint32_t* pair_inds_k_for_K_pp,
                        const uint32_t  pair_inds_count_for_K_pp,
                        const double*   p_prim_info,
                        const uint32_t* p_prim_aoinds,
                        const uint32_t  p_prim_count,
                        const double*   d_prim_info,
                        const uint32_t* d_prim_aoinds,
                        const uint32_t  d_prim_count,
                        const double    dd_max_D,
                        const double*   mat_D_full_AO,
                        const double*   mat_Q_for_K_pd,
                        const uint32_t* density_inds_for_K_pd,
                        const uint32_t  naos,
                        const double*   boys_func_table,
                        const double*   boys_func_ft)

{
    // each thread block scans over [i?|k?] and sum up to a primitive K matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_HALF][TILE_DIM_HALF + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ik = blockIdx.x;

    double K_ik = 0.0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; m++)
    {
        const uint32_t j = m * TILE_DIM_HALF + threadIdx.y;

        // to avoid memory hazard
        __syncthreads();

        if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 0;

        __syncthreads();

        for (uint32_t n = 0; n < (d_prim_count * 6 + TILE_DIM_HALF - 1) / TILE_DIM_HALF; n++)
        {
            const uint32_t l = n * TILE_DIM_HALF + threadIdx.x;

            if ((ik < pair_inds_count_for_K_pp) && (j < d_prim_count * 6) && (l < d_prim_count * 6))
            {
                const auto i = pair_inds_i_for_K_pp[ik];
                const auto k = pair_inds_k_for_K_pp[ik];

                const auto Q_ij = mat_Q_for_K_pd[i * d_prim_count * 6 + j];
                const auto Q_kl = mat_Q_for_K_pd[k * d_prim_count * 6 + l];

                if (fabs(Q_ij * Q_kl * dd_max_D) > 1.0e-12)
                {
                    const auto j_prim = density_inds_for_K_pd[i * d_prim_count * 6 + j];
                    const auto l_prim = density_inds_for_K_pd[k * d_prim_count * 6 + l];

                    const auto j_cgto = d_prim_aoinds[(j_prim / 6) + d_prim_count * (j_prim % 6)];
                    const auto l_cgto = d_prim_aoinds[(l_prim / 6) + d_prim_count * (l_prim % 6)];

                    const auto a0 = i % 3;
                    const auto b0 = d_cart_inds[j_prim % 6][0];
                    const auto b1 = d_cart_inds[j_prim % 6][1];
                    const auto c0 = k % 3;
                    const auto d0 = d_cart_inds[l_prim % 6][0];
                    const auto d1 = d_cart_inds[l_prim % 6][1];

                    const auto a_i = p_prim_info[i / 3 + p_prim_count * 0];
                    const auto c_i = p_prim_info[i / 3 + p_prim_count * 1];
                    const auto x_i = p_prim_info[i / 3 + p_prim_count * 2];
                    const auto y_i = p_prim_info[i / 3 + p_prim_count * 3];
                    const auto z_i = p_prim_info[i / 3 + p_prim_count * 4];

                    const auto a_j = d_prim_info[j_prim / 6 + d_prim_count * 0];
                    const auto c_j = d_prim_info[j_prim / 6 + d_prim_count * 1];
                    const auto x_j = d_prim_info[j_prim / 6 + d_prim_count * 2];
                    const auto y_j = d_prim_info[j_prim / 6 + d_prim_count * 3];
                    const auto z_j = d_prim_info[j_prim / 6 + d_prim_count * 4];

                    const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];
                    const auto c_k = p_prim_info[k / 3 + p_prim_count * 1];
                    const auto x_k = p_prim_info[k / 3 + p_prim_count * 2];
                    const auto y_k = p_prim_info[k / 3 + p_prim_count * 3];
                    const auto z_k = p_prim_info[k / 3 + p_prim_count * 4];

                    const auto a_l = d_prim_info[l_prim / 6 + d_prim_count * 0];
                    const auto c_l = d_prim_info[l_prim / 6 + d_prim_count * 1];
                    const auto x_l = d_prim_info[l_prim / 6 + d_prim_count * 2];
                    const auto y_l = d_prim_info[l_prim / 6 + d_prim_count * 3];
                    const auto z_l = d_prim_info[l_prim / 6 + d_prim_count * 4];

                    const auto r2_ij = (x_j - x_i) * (x_j - x_i) + (y_j - y_i) * (y_j - y_i) + (z_j - z_i) * (z_j - z_i);
                    const auto r2_kl = (x_l - x_k) * (x_l - x_k) + (y_l - y_k) * (y_l - y_k) + (z_l - z_k) * (z_l - z_k);

                    const double PQ[3] = {(a_k * x_k + a_l * x_l) / (a_k + a_l) - (a_i * x_i + a_j * x_j) / (a_i + a_j),
                                          (a_k * y_k + a_l * y_l) / (a_k + a_l) - (a_i * y_i + a_j * y_j) / (a_i + a_j),
                                          (a_k * z_k + a_l * z_l) / (a_k + a_l) - (a_i * z_i + a_j * z_j) / (a_i + a_j)};

                    const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

                    // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
                    // J. Chem. Phys. 84, 3963-3974 (1986)

                    const auto Lambda = sqrt(4.0 * (a_i + a_j) * (a_k + a_l) / (MATH_CONST_PI * (a_i + a_j + a_k + a_l)));

                    double F6_t[7];

                    gpu::computeBoysFunction(F6_t, (a_i + a_j) * (a_k + a_l) / (a_i + a_j + a_k + a_l) * r2_PQ, 6, boys_func_table, boys_func_ft);

                    const auto S_ij_00 = c_i * c_j * pow(MATH_CONST_PI / (a_i + a_j), 1.5) * exp(-a_i * a_j / (a_i + a_j) * r2_ij);
                    const auto S_kl_00 = c_k * c_l * pow(MATH_CONST_PI / (a_k + a_l), 1.5) * exp(-a_k * a_l / (a_k + a_l) * r2_kl);

                    const auto S1 = (a_i + a_j);
                    const auto S2 = (a_k + a_l);
                    const auto S4 = (a_i + a_j + a_k + a_l);

                    const double rij[3] = {x_j - x_i, y_j - y_i, z_j - z_i};
                    const double rkl[3] = {x_l - x_k, y_l - y_k, z_l - z_k};

                    const auto PA_0 = (a_j / (a_i + a_j)) * rij[a0];
                    const auto PB_0 = (-a_i / (a_i + a_j)) * rij[b0];
                    const auto PB_1 = (-a_i / (a_i + a_j)) * rij[b1];
                    const auto QC_0 = (a_l / (a_k + a_l)) * rkl[c0];
                    const auto QD_0 = (-a_k / (a_k + a_l)) * rkl[d0];
                    const auto QD_1 = (-a_k / (a_k + a_l)) * rkl[d1];

                    const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                            F6_t[4] * (
        
                                0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                                    + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                                    + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                                    + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                                    + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                                    + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                                    + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                                    + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                                    + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                                    + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[4] * (
        
                                0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                                    + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    
                                    + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                    + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                    + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                                    + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                                )
        
                            )

                            +

                            F6_t[5] * (
        
                                0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                                    delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                                    + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                                    + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                                    + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                                    + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                                    + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                                    + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                                    + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                                    + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                                    + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                                    + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                                )
        
                            )

                            +

                            F6_t[6] * (
        
                                ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                                    PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                                )
        
                            )

                            );

                    ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * mat_D_full_AO[j_cgto * naos + l_cgto];
                }
                else
                {
                    ERIs[threadIdx.y][threadIdx.x] = 0.0;

                    // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                    if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
                }
            }
            else
            {
                ERIs[threadIdx.y][threadIdx.x] = 0.0;

                // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
                if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = m + 1;
            }

            __syncthreads();

            // early exit for thread block
            if (skip_thread_block == m + 1) break;

            if ((threadIdx.y == 0) && (threadIdx.x == 0))
            {
                for (uint32_t y = 0; y < TILE_DIM_HALF; y++)
                {
                    for (uint32_t x = 0; x < TILE_DIM_HALF; x++)
                    {
                        K_ik += ERIs[y][x];
                    }
                }
            }

            __syncthreads();
        }
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0) && (ik < pair_inds_count_for_K_pp))
    {
        mat_K[ik] += K_ik;
    }
}

}  // namespace gpu
