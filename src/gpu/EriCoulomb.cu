//
//                              VELOXCHEM
//         ----------------------------------------------------
//                     An Electronic Structure Code
//
//  Copyright © 2018-2024 by VeloxChem developers. All rights reserved.
//
//  SPDX-License-Identifier: LGPL-3.0-or-later
//
//  This file is part of VeloxChem.
//
//  VeloxChem is free software: you can redistribute it and/or modify it under
//  the terms of the GNU Lesser General Public License as published by the Free
//  Software Foundation, either version 3 of the License, or (at your option)
//  any later version.
//
//  VeloxChem is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
//  License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with VeloxChem. If not, see <https://www.gnu.org/licenses/>.

#include "EriCoulomb.hpp"

namespace gpu {  // gpu namespace

__device__ void
computeBoysFunctionEriJ(double* values, const double fa, const uint32_t N, const double* bf_table, const double* ft)
{
    // Note: 847 = 121 * 7
    const double* bf_data = bf_table + N * 847;

    uint32_t pnt = (fa > 1.0e5) ? 1000000 : static_cast<uint32_t>(10.0 * fa + 0.5);

    if (pnt < 121)
    {
        const double w = fa - 0.1 * pnt;

        const double w2 = w * w;

        const double w4 = w2 * w2;

        values[N] = bf_data[pnt * 7 + 0] + bf_data[pnt * 7 + 1] * w + bf_data[pnt * 7 + 2] * w2 + bf_data[pnt * 7 + 3] * w2 * w

                    + bf_data[pnt * 7 + 4] * w4 + bf_data[pnt * 7 + 5] * w4 * w + bf_data[pnt * 7 + 6] * w4 * w2;

        const double f2a = fa + fa;

        const double fx = exp(-fa);

        for (uint32_t j = 0; j < N; j++)
        {
            values[N - j - 1] = ft[N - j - 1] * (f2a * values[N - j] + fx);
        }
    }
    else
    {
        const double fia = 1.0 / fa;

        double pf = 0.5 * fia;

        values[0] = MATH_CONST_HALF_SQRT_PI * sqrt(fia);

        if (pnt < 921)
        {
            const double fia2 = fia * fia;

            const double f = 0.4999489092 * fia - 0.2473631686 * fia2 + 0.3211809090 * fia2 * fia - 0.3811559346 * fia2 * fia2;

            const double fx = exp(-fa);

            values[0] -= f * fx;

            const double rterm = pf * fx;

            for (uint32_t j = 1; j <= N; j++)
            {
                values[j] = pf * values[j - 1] - rterm;

                pf += fia;
            }
        }
        else
        {
            for (uint32_t j = 1; j <= N; j++)
            {
                values[j] = pf * values[j - 1];

                pf += fia;
            }
        }
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSSS(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   ss_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   ss_mat_Q,
                       const uint32_t* ss_first_inds_local,
                       const uint32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const uint32_t  ss_prim_pair_count_local,
                       const uint32_t* ss_first_inds,
                       const uint32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const uint32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < ss_prim_pair_count_local)
    {
        i = ss_first_inds_local[ij];
        j = ss_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = s_prim_info[j + s_prim_count * 0];

        r_j[0] = s_prim_info[j + s_prim_count * 2];
        r_j[1] = s_prim_info[j + s_prim_count * 3];
        r_j[2] = s_prim_info[j + s_prim_count * 4];

        S_ij_00 = ss_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < ss_prim_pair_count) && (ij < ss_prim_pair_count_local) && (fabs(ss_mat_Q_local[ij] * ss_mat_Q[kl] * ss_mat_D[kl]) > eri_threshold))
        {
            const auto k = ss_first_inds[kl];
            const auto l = ss_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = s_prim_info[l + s_prim_count * 0];

            const double r_l[3] = {s_prim_info[l + s_prim_count * 2],
                                   s_prim_info[l + s_prim_count * 3],
                                   s_prim_info[l + s_prim_count * 4]};

            const auto S_kl_00 = ss_pair_data[kl];

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F0_t[1];

            gpu::computeBoysFunctionEriJ(F0_t, S1 * S2 / S4 * r2_PQ, 0, boys_func_table, boys_func_ft);

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = Lambda * S_ij_00 * S_kl_00 * F0_t[0] * ss_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSSP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   sp_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   sp_mat_Q,
                       const uint32_t* ss_first_inds_local,
                       const uint32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const uint32_t  ss_prim_pair_count_local,
                       const uint32_t* sp_first_inds,
                       const uint32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const uint32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < ss_prim_pair_count_local)
    {
        i = ss_first_inds_local[ij];
        j = ss_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = s_prim_info[j + s_prim_count * 0];

        r_j[0] = s_prim_info[j + s_prim_count * 2];
        r_j[1] = s_prim_info[j + s_prim_count * 3];
        r_j[2] = s_prim_info[j + s_prim_count * 4];

        S_ij_00 = ss_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sp_prim_pair_count) && (ij < ss_prim_pair_count_local) && (fabs(ss_mat_Q_local[ij] * sp_mat_Q[kl] * sp_mat_D[kl]) > eri_threshold))
        {
            const auto k = sp_first_inds[kl];
            const auto l = sp_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = sp_pair_data[kl];

            const auto d0 = l % 3;

            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F1_t[2];

            gpu::computeBoysFunctionEriJ(F1_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F1_t[0] * (-a_k / S2) * rkl[d0]

                    + F1_t[1] * S1 / S4 * PQ[d0] * (-1.0)

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sp_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSSD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   sd_mat_Q,
                       const uint32_t* ss_first_inds_local,
                       const uint32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const uint32_t  ss_prim_pair_count_local,
                       const uint32_t* sd_first_inds,
                       const uint32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const uint32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < ss_prim_pair_count_local)
    {
        i = ss_first_inds_local[ij];
        j = ss_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = s_prim_info[j + s_prim_count * 0];

        r_j[0] = s_prim_info[j + s_prim_count * 2];
        r_j[1] = s_prim_info[j + s_prim_count * 3];
        r_j[2] = s_prim_info[j + s_prim_count * 4];

        S_ij_00 = ss_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sd_prim_pair_count) && (ij < ss_prim_pair_count_local) && (fabs(ss_mat_Q_local[ij] * sd_mat_Q[kl] * sd_mat_D[kl]) > eri_threshold))
        {
            const auto k = sd_first_inds[kl];
            const auto l = sd_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = sd_pair_data[kl];

            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F2_t[3];

            gpu::computeBoysFunctionEriJ(F2_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F2_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1]
                        )

                        + (
                            QD_0 * QD_1
                        )

                    )

                    + F2_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (-1.0)
                        )

                        + S1 / S4 * (
                            PQ[d0] * QD_1 * (-1.0)
                            + PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    + F2_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSPP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   pp_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   pp_mat_Q,
                       const uint32_t* ss_first_inds_local,
                       const uint32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const uint32_t  ss_prim_pair_count_local,
                       const uint32_t* pp_first_inds,
                       const uint32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const uint32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < ss_prim_pair_count_local)
    {
        i = ss_first_inds_local[ij];
        j = ss_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = s_prim_info[j + s_prim_count * 0];

        r_j[0] = s_prim_info[j + s_prim_count * 2];
        r_j[1] = s_prim_info[j + s_prim_count * 3];
        r_j[2] = s_prim_info[j + s_prim_count * 4];

        S_ij_00 = ss_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pp_prim_pair_count) && (ij < ss_prim_pair_count_local) && (fabs(ss_mat_Q_local[ij] * pp_mat_Q[kl] * pp_mat_D[kl]) > eri_threshold))
        {
            const auto k = pp_first_inds[kl];
            const auto l = pp_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = pp_pair_data[kl];

            const auto c0 = k % 3;
            const auto d0 = l % 3;

            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F2_t[3];

            gpu::computeBoysFunctionEriJ(F2_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F2_t[0] * (

                        (

                            + QD_0 * QC_0
                        )

                        + 0.5 / S2 * (
                            delta[d0][c0]
                        )

                    )

                    + F2_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][c0] * (-1.0)
                        )

                        + S1 / S4 * (
                            PQ[c0] * QD_0 * (-1.0)
                            + PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    + F2_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PQ[c0] * PQ[d0]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pp_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSPD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* ss_first_inds_local,
                       const uint32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const uint32_t  ss_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < ss_prim_pair_count_local)
    {
        i = ss_first_inds_local[ij];
        j = ss_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = s_prim_info[j + s_prim_count * 0];

        r_j[0] = s_prim_info[j + s_prim_count * 2];
        r_j[1] = s_prim_info[j + s_prim_count * 3];
        r_j[2] = s_prim_info[j + s_prim_count * 4];

        S_ij_00 = ss_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < ss_prim_pair_count_local) && (fabs(ss_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F3_t[4];

            gpu::computeBoysFunctionEriJ(F3_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F3_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * QC_0
                            + delta[d1][c0] * QD_0
                            + delta[d0][c0] * QD_1
                        )

                        + (

                            + QD_0 * QD_1 * QC_0
                        )

                    )

                    + F3_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[d1][c0] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[d0][c0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                        )

                        + S1 / S4 * (
                            PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    + F3_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PQ[c0] * PQ[d0] * QD_1
                            + PQ[c0] * PQ[d1] * QD_0
                            + PQ[d0] * PQ[d1] * QC_0
                        )

                        + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[c0])
                            + delta[d1][c0] * (PQ[d0])
                            + delta[d0][c0] * (PQ[d1])
                        )

                    )

                    + F3_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSDD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* ss_first_inds_local,
                       const uint32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const uint32_t  ss_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < ss_prim_pair_count_local)
    {
        i = ss_first_inds_local[ij];
        j = ss_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = s_prim_info[j + s_prim_count * 0];

        r_j[0] = s_prim_info[j + s_prim_count * 2];
        r_j[1] = s_prim_info[j + s_prim_count * 3];
        r_j[2] = s_prim_info[j + s_prim_count * 4];

        S_ij_00 = ss_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < ss_prim_pair_count_local) && (fabs(ss_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F4_t[5];

            gpu::computeBoysFunctionEriJ(F4_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F4_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (QC_0 * QC_1)
                            + delta[d1][c1] * (QD_0 * QC_0)
                            + delta[d0][c1] * (QD_1 * QC_0)
                            + delta[d1][c0] * (QD_0 * QC_1)
                            + delta[d0][c0] * (QD_1 * QC_1)
                            + delta[c1][c0] * (QD_0 * QD_1)
                        )

                        + (

                            + QD_0 * QD_1 * QC_0 * QC_1
                        )

                        + 0.25 / ( S2 * S2 ) * (
                            delta[c1][c0] * delta[d0][d1]
                            + delta[d0][c0] * delta[d1][c1]
                            + delta[d0][c1] * delta[d1][c0]
                        )

                    )

                    + F4_t[1] * (

                        0.25 * S1 / ( S2 * S2 * S4 ) * (
                            delta[c1][c0] * delta[d0][d1] * (-2.0)
                            + delta[d0][c0] * delta[d1][c1] * (-2.0)
                            + delta[d0][c1] * delta[d1][c0] * (-2.0)
                        )

                        + 0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[d1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[d0][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[d1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[d0][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[c1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                        )

                        + S1 / S4 * (

                            + PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    + F4_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                        + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[d1][c1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[d1][c0] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[d0][c1] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[d0][c0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[c1][c0] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        )

                        + 0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                            delta[c1][c0] * delta[d0][d1]
                            + delta[d0][c0] * delta[d1][c1]
                            + delta[d0][c1] * delta[d1][c0]
                        )

                    )

                    + F4_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (

                            + PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                        + 0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[d1][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[d0][c1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[d1][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[d0][c0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    + F4_t[4] * (

                        ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPSS(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   ss_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   ss_mat_Q,
                       const uint32_t* sp_first_inds_local,
                       const uint32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const uint32_t  sp_prim_pair_count_local,
                       const uint32_t* ss_first_inds,
                       const uint32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const uint32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sp_prim_pair_count_local)
    {
        i = sp_first_inds_local[ij];
        j = sp_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = sp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < ss_prim_pair_count) && (ij < sp_prim_pair_count_local) && (fabs(sp_mat_Q_local[ij] * ss_mat_Q[kl] * ss_mat_D[kl]) > eri_threshold))
        {
            const auto k = ss_first_inds[kl];
            const auto l = ss_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = s_prim_info[l + s_prim_count * 0];

            const double r_l[3] = {s_prim_info[l + s_prim_count * 2],
                                   s_prim_info[l + s_prim_count * 3],
                                   s_prim_info[l + s_prim_count * 4]};

            const auto S_kl_00 = ss_pair_data[kl];

            const auto b0 = j % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F1_t[2];

            gpu::computeBoysFunctionEriJ(F1_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F1_t[0] * (-a_i / S1) * rij[b0]

                    + F1_t[1] * S2 / S4 * PQ[b0]

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * ss_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPSP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   sp_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   sp_mat_Q,
                       const uint32_t* sp_first_inds_local,
                       const uint32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const uint32_t  sp_prim_pair_count_local,
                       const uint32_t* sp_first_inds,
                       const uint32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const uint32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sp_prim_pair_count_local)
    {
        i = sp_first_inds_local[ij];
        j = sp_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = sp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sp_prim_pair_count) && (ij < sp_prim_pair_count_local) && (fabs(sp_mat_Q_local[ij] * sp_mat_Q[kl] * sp_mat_D[kl]) > eri_threshold))
        {
            const auto k = sp_first_inds[kl];
            const auto l = sp_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = sp_pair_data[kl];

            const auto b0 = j % 3;
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F2_t[3];

            gpu::computeBoysFunctionEriJ(F2_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F2_t[0] * (

                        (
                            PB_0 * QD_0
                        )

                    )

                    + F2_t[1] * (

                        S1 / S4 * (
                            PB_0 * PQ[d0] * (-1.0)
                        )

                        + 0.5 / S4 * (
                            delta[b0][d0]
                        )

                        + S2 / S4 * (
                            PQ[b0] * QD_0
                        )

                    )

                    + F2_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            PQ[b0] * PQ[d0] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sp_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPSD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   sd_mat_Q,
                       const uint32_t* sp_first_inds_local,
                       const uint32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const uint32_t  sp_prim_pair_count_local,
                       const uint32_t* sd_first_inds,
                       const uint32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const uint32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sp_prim_pair_count_local)
    {
        i = sp_first_inds_local[ij];
        j = sp_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = sp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sd_prim_pair_count) && (ij < sp_prim_pair_count_local) && (fabs(sp_mat_Q_local[ij] * sd_mat_Q[kl] * sd_mat_D[kl]) > eri_threshold))
        {
            const auto k = sd_first_inds[kl];
            const auto l = sd_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = sd_pair_data[kl];

            const auto b0 = j % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F3_t[4];

            gpu::computeBoysFunctionEriJ(F3_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F3_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * PB_0
                        )

                        + (
                            PB_0 * QD_0 * QD_1
                        )

                    )

                    + F3_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * (-1.0))
                        )

                        + S1 / S4 * (
                            PB_0 * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[d1] * QD_0 * (-1.0)
                        )

                        + 0.5 / S4 * (
                            delta[d0][d1] * (PQ[b0])
                            + delta[b0][d1] * QD_0
                            + delta[b0][d0] * QD_1
                        )

                        + S2 / S4 * (
                            PQ[b0] * QD_0 * QD_1
                        )

                    )

                    + F3_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PB_0 * PQ[d0] * PQ[d1]
                        )

                        + 0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[b0][d1] * (PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[d1] * (-1.0))
                        )

                        + ( S1 * S2 ) / ( S4 * S4 ) * (
                            PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    + F3_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPPP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   pp_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   pp_mat_Q,
                       const uint32_t* sp_first_inds_local,
                       const uint32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const uint32_t  sp_prim_pair_count_local,
                       const uint32_t* pp_first_inds,
                       const uint32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const uint32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sp_prim_pair_count_local)
    {
        i = sp_first_inds_local[ij];
        j = sp_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = sp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pp_prim_pair_count) && (ij < sp_prim_pair_count_local) && (fabs(sp_mat_Q_local[ij] * pp_mat_Q[kl] * pp_mat_D[kl]) > eri_threshold))
        {
            const auto k = pp_first_inds[kl];
            const auto l = pp_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = pp_pair_data[kl];

            const auto b0 = j % 3;
            const auto c0 = k % 3;
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F3_t[4];

            gpu::computeBoysFunctionEriJ(F3_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F3_t[0] * (

                        (

                            + PB_0 * QD_0 * QC_0
                        )

                        + 0.5 / S2 * (
                            delta[d0][c0] * PB_0
                        )

                    )

                    + F3_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][c0] * (PB_0 * (-1.0))
                        )

                        + 0.5 / S4 * (
                            delta[b0][d0] * QC_0
                            + delta[d0][c0] * (PQ[b0])
                            + delta[b0][c0] * QD_0
                        )

                        + S1 / S4 * (
                            PB_0 * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PQ[d0] * QC_0 * (-1.0)
                        )

                        + S2 / S4 * (

                            + PQ[b0] * QD_0 * QC_0
                        )

                    )

                    + F3_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PB_0 * PQ[c0] * PQ[d0]
                        )

                        + ( S1 * S2 ) / ( S4 * S4 ) * (

                            + PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        )

                        + 0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][c0] * (PQ[b0] * (-1.0))
                            + delta[b0][d0] * (PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PQ[d0] * (-1.0))
                        )

                    )

                    + F3_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[c0] * PQ[d0]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pp_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPPD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* sp_first_inds_local,
                       const uint32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const uint32_t  sp_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sp_prim_pair_count_local)
    {
        i = sp_first_inds_local[ij];
        j = sp_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = sp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < sp_prim_pair_count_local) && (fabs(sp_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto b0 = j % 3;
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F4_t[5];

            gpu::computeBoysFunctionEriJ(F4_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F4_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * QC_0)
                            + delta[d1][c0] * (PB_0 * QD_0)
                            + delta[d0][c0] * (PB_0 * QD_1)
                        )

                        + (

                            + PB_0 * QD_0 * QD_1 * QC_0
                        )

                    )

                    + F4_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[d1][c0] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[d0][c0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                        )

                        + 0.5 / S4 * (
                            delta[d0][d1] * (PQ[b0] * QC_0)
                            + delta[b0][d1] * (QD_0 * QC_0)
                            + delta[b0][d0] * (QD_1 * QC_0)
                            + delta[d1][c0] * (PQ[b0] * QD_0)
                            + delta[d0][c0] * (PQ[b0] * QD_1)
                            + delta[b0][c0] * (QD_0 * QD_1)
                        )

                        + S1 / S4 * (
                            PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                        + S2 / S4 * (

                            + PQ[b0] * QD_0 * QD_1 * QC_0
                        )

                        + 0.25 / ( S2 * S4 ) * (
                            delta[b0][c0] * delta[d0][d1]
                            + delta[b0][d0] * delta[d1][c0]
                            + delta[b0][d1] * delta[d0][c0]
                        )

                    )

                    + F4_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PB_0 * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PQ[d0] * PQ[d1] * QC_0
                        )

                        + ( S1 * S2 ) / ( S4 * S4 ) * (

                            + PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                        + 0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[b0][c0] * delta[d0][d1] * (-1.0)
                            + delta[b0][d0] * delta[d1][c0] * (-1.0)
                            + delta[b0][d1] * delta[d0][c0] * (-1.0)
                        )

                        + 0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                            + delta[d1][c0] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                            + delta[d0][c0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                        )

                        + 0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[c0])
                            + delta[d1][c0] * (PB_0 * PQ[d0])
                            + delta[d0][c0] * (PB_0 * PQ[d1])
                        )

                    )

                    + F4_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        )

                        + ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                        + 0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[c0])
                            + delta[d1][c0] * (PQ[b0] * PQ[d0])
                            + delta[d0][c0] * (PQ[b0] * PQ[d1])
                            + delta[b0][d1] * (PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PQ[d0] * PQ[d1])
                        )

                    )

                    + F4_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPSS(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   ss_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   ss_mat_Q,
                       const uint32_t* pp_first_inds_local,
                       const uint32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const uint32_t  pp_prim_pair_count_local,
                       const uint32_t* ss_first_inds,
                       const uint32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const uint32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pp_prim_pair_count_local)
    {
        i = pp_first_inds_local[ij];
        j = pp_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = pp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < ss_prim_pair_count) && (ij < pp_prim_pair_count_local) && (fabs(pp_mat_Q_local[ij] * ss_mat_Q[kl] * ss_mat_D[kl]) > eri_threshold))
        {
            const auto k = ss_first_inds[kl];
            const auto l = ss_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = s_prim_info[l + s_prim_count * 0];

            const double r_l[3] = {s_prim_info[l + s_prim_count * 2],
                                   s_prim_info[l + s_prim_count * 3],
                                   s_prim_info[l + s_prim_count * 4]};

            const auto S_kl_00 = ss_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = j % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F2_t[3];

            gpu::computeBoysFunctionEriJ(F2_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F2_t[0] * (

                        (

                            + PB_0 * PA_0
                        )

                        + 0.5 / S1 * (
                            delta[b0][a0]
                        )

                    )

                    + F2_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][a0] * (-1.0)
                        )

                        + S2 / S4 * (

                            + PB_0 * PQ[a0]
                            + PA_0 * PQ[b0]
                        )

                    )

                    + F2_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            PQ[a0] * PQ[b0]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * ss_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPSP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   sp_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   sp_mat_Q,
                       const uint32_t* pp_first_inds_local,
                       const uint32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const uint32_t  pp_prim_pair_count_local,
                       const uint32_t* sp_first_inds,
                       const uint32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const uint32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pp_prim_pair_count_local)
    {
        i = pp_first_inds_local[ij];
        j = pp_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = pp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sp_prim_pair_count) && (ij < pp_prim_pair_count_local) && (fabs(pp_mat_Q_local[ij] * sp_mat_Q[kl] * sp_mat_D[kl]) > eri_threshold))
        {
            const auto k = sp_first_inds[kl];
            const auto l = sp_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = sp_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = j % 3;
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F3_t[4];

            gpu::computeBoysFunctionEriJ(F3_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F3_t[0] * (

                        (

                            + PB_0 * PA_0 * QD_0
                        )

                        + 0.5 / S1 * (
                            delta[b0][a0] * QD_0
                        )

                    )

                    + F3_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][a0] * (QD_0 * (-1.0))
                        )

                        + 0.5 / S4 * (
                            delta[b0][d0] * PA_0
                            + delta[b0][a0] * (PQ[d0] * (-1.0))
                            + delta[a0][d0] * PB_0
                        )

                        + S1 / S4 * (

                            + PB_0 * PA_0 * PQ[d0] * (-1.0)
                        )

                        + S2 / S4 * (

                            + PB_0 * PQ[a0] * QD_0
                            + PA_0 * PQ[b0] * QD_0
                        )

                    )

                    + F3_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[d0] * (-1.0)
                            + PA_0 * PQ[b0] * PQ[d0] * (-1.0)
                        )

                        + ( S2 * S2 ) / ( S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * QD_0
                        )

                        + 0.5 * S2 / ( S4 * S4 ) * (
                            delta[b0][d0] * (PQ[a0])
                            + delta[a0][d0] * (PQ[b0])
                            + delta[b0][a0] * (PQ[d0])
                        )

                    )

                    + F3_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[d0] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sp_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDSS(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   ss_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   ss_mat_Q,
                       const uint32_t* sd_first_inds_local,
                       const uint32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const uint32_t  sd_prim_pair_count_local,
                       const uint32_t* ss_first_inds,
                       const uint32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const uint32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sd_prim_pair_count_local)
    {
        i = sd_first_inds_local[ij];
        j = sd_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = sd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < ss_prim_pair_count) && (ij < sd_prim_pair_count_local) && (fabs(sd_mat_Q_local[ij] * ss_mat_Q[kl] * ss_mat_D[kl]) > eri_threshold))
        {
            const auto k = ss_first_inds[kl];
            const auto l = ss_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = s_prim_info[l + s_prim_count * 0];

            const double r_l[3] = {s_prim_info[l + s_prim_count * 2],
                                   s_prim_info[l + s_prim_count * 3],
                                   s_prim_info[l + s_prim_count * 4]};

            const auto S_kl_00 = ss_pair_data[kl];

            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F2_t[3];

            gpu::computeBoysFunctionEriJ(F2_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F2_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1]
                        )

                        + (
                            PB_0 * PB_1
                        )

                    )

                    + F2_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (-1.0)
                        )

                        + S2 / S4 * (
                            PB_0 * PQ[b1]
                            + PB_1 * PQ[b0]
                        )

                    )

                    + F2_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            PQ[b0] * PQ[b1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * ss_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDSP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sp_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   sp_mat_Q,
                       const uint32_t* sd_first_inds_local,
                       const uint32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const uint32_t  sd_prim_pair_count_local,
                       const uint32_t* sp_first_inds,
                       const uint32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const uint32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sd_prim_pair_count_local)
    {
        i = sd_first_inds_local[ij];
        j = sd_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = sd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sp_prim_pair_count) && (ij < sd_prim_pair_count_local) && (fabs(sd_mat_Q_local[ij] * sp_mat_Q[kl] * sp_mat_D[kl]) > eri_threshold))
        {
            const auto k = sp_first_inds[kl];
            const auto l = sp_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = sp_pair_data[kl];

            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F3_t[4];

            gpu::computeBoysFunctionEriJ(F3_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F3_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * QD_0
                        )

                        + (
                            PB_0 * PB_1 * QD_0
                        )

                    )

                    + F3_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (QD_0 * (-1.0))
                        )

                        + 0.5 / S4 * (
                            delta[b0][b1] * (PQ[d0] * (-1.0))
                            + delta[b1][d0] * PB_0
                            + delta[b0][d0] * PB_1
                        )

                        + S1 / S4 * (
                            PB_0 * PB_1 * PQ[d0] * (-1.0)
                        )

                        + S2 / S4 * (
                            PB_0 * PQ[b1] * QD_0
                            + PB_1 * PQ[b0] * QD_0
                        )

                    )

                    + F3_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * QD_0
                        )

                        + ( S1 * S2 ) / ( S4 * S4 ) * (
                            PB_0 * PQ[b1] * PQ[d0] * (-1.0)
                            + PB_1 * PQ[b0] * PQ[d0] * (-1.0)
                        )

                        + 0.5 * S2 / ( S4 * S4 ) * (
                            delta[b1][d0] * (PQ[b0])
                            + delta[b0][d0] * (PQ[b1])
                            + delta[b0][b1] * (PQ[d0])
                        )

                    )

                    + F3_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * PQ[d0] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sp_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDSS(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   ss_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   ss_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* ss_first_inds,
                       const uint32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const uint32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < ss_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * ss_mat_Q[kl] * ss_mat_D[kl]) > eri_threshold))
        {
            const auto k = ss_first_inds[kl];
            const auto l = ss_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = s_prim_info[l + s_prim_count * 0];

            const double r_l[3] = {s_prim_info[l + s_prim_count * 2],
                                   s_prim_info[l + s_prim_count * 3],
                                   s_prim_info[l + s_prim_count * 4]};

            const auto S_kl_00 = ss_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F3_t[4];

            gpu::computeBoysFunctionEriJ(F3_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F3_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * PA_0
                            + delta[b1][a0] * PB_0
                            + delta[b0][a0] * PB_1
                        )

                        + (

                            + PB_0 * PB_1 * PA_0
                        )

                    )

                    + F3_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b1][a0] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[b0][a0] * (PB_1 * (-1.0) + PQ[b1])
                        )

                        + S2 / S4 * (

                            + PB_0 * PB_1 * PQ[a0]
                            + PB_0 * PA_0 * PQ[b1]
                            + PB_1 * PA_0 * PQ[b0]
                        )

                    )

                    + F3_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[b1]
                            + PB_1 * PQ[a0] * PQ[b0]
                            + PA_0 * PQ[b0] * PQ[b1]
                        )

                        + 0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * (-1.0))
                            + delta[b1][a0] * (PQ[b0] * (-1.0))
                            + delta[b0][a0] * (PQ[b1] * (-1.0))
                        )

                    )

                    + F3_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * ss_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDSP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sp_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   sp_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* sp_first_inds,
                       const uint32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const uint32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sp_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * sp_mat_Q[kl] * sp_mat_D[kl]) > eri_threshold))
        {
            const auto k = sp_first_inds[kl];
            const auto l = sp_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = sp_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F4_t[5];

            gpu::computeBoysFunctionEriJ(F4_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F4_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * QD_0)
                            + delta[b1][a0] * (PB_0 * QD_0)
                            + delta[b0][a0] * (PB_1 * QD_0)
                        )

                        + (

                            + PB_0 * PB_1 * PA_0 * QD_0
                        )

                    )

                    + F4_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[b1][a0] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[b0][a0] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                        )

                        + 0.5 / S4 * (
                            delta[b1][d0] * (PB_0 * PA_0)
                            + delta[b0][d0] * (PB_1 * PA_0)
                            + delta[b0][b1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[b1][a0] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[b0][a0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1)
                        )

                        + S1 / S4 * (

                            + PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0)
                        )

                        + S2 / S4 * (

                            + PB_0 * PB_1 * PQ[a0] * QD_0
                            + PB_0 * PA_0 * PQ[b1] * QD_0
                            + PB_1 * PA_0 * PQ[b0] * QD_0
                        )

                        + 0.25 / ( S1 * S4 ) * (
                            delta[a0][d0] * delta[b0][b1]
                            + delta[b0][a0] * delta[b1][d0]
                            + delta[b0][d0] * delta[b1][a0]
                        )

                    )

                    + F4_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (

                            + PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0)
                        )

                        + ( S2 * S2 ) / ( S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[b1] * QD_0
                            + PB_1 * PQ[a0] * PQ[b0] * QD_0
                            + PA_0 * PQ[b0] * PQ[b1] * QD_0
                        )

                        + 0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[a0][d0] * delta[b0][b1] * (-1.0)
                            + delta[b0][a0] * delta[b1][d0] * (-1.0)
                            + delta[b0][d0] * delta[b1][a0] * (-1.0)
                        )

                        + 0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[b1][a0] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[b0][a0] * (PQ[b1] * QD_0 * (-1.0))
                        )

                        + 0.5 * S2 / ( S4 * S4 ) * (
                            delta[b1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[b0][b1] * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                            + delta[b1][a0] * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                            + delta[b0][a0] * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        )

                    )

                    + F4_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0)
                        )

                        + ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * QD_0
                        )

                        + 0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[b1][d0] * (PQ[a0] * PQ[b0])
                            + delta[b0][d0] * (PQ[a0] * PQ[b1])
                            + delta[b0][b1] * (PQ[a0] * PQ[d0])
                            + delta[a0][d0] * (PQ[b0] * PQ[b1])
                            + delta[b1][a0] * (PQ[b0] * PQ[d0])
                            + delta[b0][a0] * (PQ[b1] * PQ[d0])
                        )

                    )

                    + F4_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sp_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDSS(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   ss_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   ss_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* ss_first_inds,
                       const uint32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const uint32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (ss_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < ss_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * ss_mat_Q[kl] * ss_mat_D[kl]) > eri_threshold))
        {
            const auto k = ss_first_inds[kl];
            const auto l = ss_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = s_prim_info[l + s_prim_count * 0];

            const double r_l[3] = {s_prim_info[l + s_prim_count * 2],
                                   s_prim_info[l + s_prim_count * 3],
                                   s_prim_info[l + s_prim_count * 4]};

            const auto S_kl_00 = ss_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F4_t[5];

            gpu::computeBoysFunctionEriJ(F4_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F4_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * PA_1)
                            + delta[b1][a1] * (PB_0 * PA_0)
                            + delta[b0][a1] * (PB_1 * PA_0)
                            + delta[b1][a0] * (PB_0 * PA_1)
                            + delta[b0][a0] * (PB_1 * PA_1)
                            + delta[a1][a0] * (PB_0 * PB_1)
                        )

                        + (

                            + PB_0 * PB_1 * PA_0 * PA_1
                        )

                        + 0.25 / ( S1 * S1 ) * (
                            delta[a1][a0] * delta[b0][b1]
                            + delta[b0][a0] * delta[b1][a1]
                            + delta[b0][a1] * delta[b1][a0]
                        )

                    )

                    + F4_t[1] * (

                        0.25 * S2 / ( S1 * S1 * S4 ) * (
                            delta[a1][a0] * delta[b0][b1] * (-2.0)
                            + delta[b0][a0] * delta[b1][a1] * (-2.0)
                            + delta[b0][a1] * delta[b1][a0] * (-2.0)
                        )

                        + 0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b1][a1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b0][a1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[b1][a0] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[b0][a0] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a1][a0] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        )

                        + S2 / S4 * (

                            + PB_0 * PB_1 * PA_0 * PQ[a1]
                            + PB_0 * PB_1 * PA_1 * PQ[a0]
                            + PB_0 * PA_0 * PA_1 * PQ[b1]
                            + PB_1 * PA_0 * PA_1 * PQ[b0]
                        )

                    )

                    + F4_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (

                            + PB_0 * PB_1 * PQ[a0] * PQ[a1]
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1]
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1]
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0]
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0]
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1]
                        )

                        + 0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[b1][a1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[b0][a1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[b1][a0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[b0][a0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a1][a0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                        )

                        + 0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                            delta[a1][a0] * delta[b0][b1]
                            + delta[b0][a0] * delta[b1][a1]
                            + delta[b0][a1] * delta[b1][a0]
                        )

                    )

                    + F4_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1]
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0]
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1]
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1]
                        )

                        + 0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b1][a1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b0][a1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[b1][a0] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[b0][a0] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a1][a0] * (PQ[b0] * PQ[b1] * (-1.0))
                        )

                    )

                    + F4_t[4] * (

                        ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * ss_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD0(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[2];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[0] * (

                        0.125 / ( S1 * S1 * S2 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1)
                        )

                    )

                    +

                    F7_t[0] * (

                        0.25 / ( S1 * S1 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0)
                        )

                    )

                    +

                    F7_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * QD_0)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * QD_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1)
                        )

                    )

                    +

                    F7_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_0)
                        )

                    )

                    +

                    F7_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_0)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_1)
                        )

                    )

                    +

                    F7_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F7_t[1] * (

                        0.125 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1 * (-2.0))
                        )

                    )

                    +

                    F7_t[1] * (

                        0.125 / ( S1 * S2 * S4 ) * (
                            delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0)
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0)
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0)
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0)
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1)
                        )

                    )

                    +

                    F7_t[1] * (

                        0.25 * S2 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * (-2.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD1(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[3];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * QD_0 * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * QD_0 * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * QD_0 * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * QD_1 * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * QD_1 * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * QD_1)
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * QD_1)
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QD_1 + PA_1 * PQ[b0] * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 + PA_1 * PQ[b1] * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QD_1 + PA_1 * PQ[b1] * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * QD_0 * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * QD_0 * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * QD_0 * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * QD_1 * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * QD_1)
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * QD_1)
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * QD_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * QD_0 * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * QD_0 * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * QD_0 * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * QD_1 * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * QD_1 * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * QD_0 * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * QD_0 * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * QD_0 * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * QD_1 * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * QD_1)
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * QD_1)
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * QD_1)
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * QD_1)
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * QD_1)
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F7_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PA_1)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PA_1)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PA_1)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1)
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PA_1 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PA_1 * QD_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[d1] * (-1.0) + PA_0 * PA_1 * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_0)
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0)
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PA_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PA_0 * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_1 * PA_0 * QD_1 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_1)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_1)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_1 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_1 * QD_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_1 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PA_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PA_1 * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[d1] * (-1.0) + PB_1 * PA_1 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                        )

                    )

                    +

                    F7_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1)
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * QD_0 * QC_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * QD_0 * QD_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * QD_0 * QC_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * QD_0 * QD_1)
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_0)
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * QD_1 * QC_0)
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * QD_0 * QD_1)
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * QD_0 * QC_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * QD_0 * QD_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                        )

                    )

                    +

                    F7_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F7_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F7_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F7_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F7_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F7_t[2] * (

                        0.125 * S2 / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD2(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[3];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[2] * (

                        0.125 / ( S1 * S4 * S4 ) * (
                            delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (QC_0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (QC_0)
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (QC_0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (QC_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (QC_0)
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * 2.0 + QC_0 * 2.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (QC_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (QC_0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (QC_0)
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (QC_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (QC_0)
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * 2.0 + QC_0 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * 2.0 + QC_0 * 2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] * 2.0 + QD_0 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[d0] * 2.0 + QD_0 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] * 2.0 + QD_0 * 2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] * 2.0 + QD_1 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[d1] * 2.0 + QD_1 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] * 2.0 + QD_1 * 2.0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (QD_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (QD_0)
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (QD_0)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (QD_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (QD_0)
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (QD_0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (QD_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (QD_0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (QD_0)
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (QD_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (QD_0)
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (QD_0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (QD_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (QD_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (QD_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (QD_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (QD_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (QD_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (QD_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (QD_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (QD_1)
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (QD_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (QD_1)
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (QD_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD3(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[3];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[2] * (

                        0.125 / ( S2 * S4 * S4 ) * (
                            delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[d1])
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[d1])
                        )

                    )

                    +

                    F7_t[2] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0])
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[d1])
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * (-1.0))
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * (-1.0))
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0])
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0])
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1])
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0])
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[d0])
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[d1])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0])
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[d0])
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[d1])
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0])
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[d0])
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[d1])
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0])
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0])
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1])
                        )

                    )

                    +

                    F7_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_1)
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * QD_0 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * QD_0 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * QD_0 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_1 * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_1 * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * QD_0 * QD_1)
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * QD_0 * QD_1)
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * QD_0 * QD_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_1 * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * 2.0 + PQ[d0] * QD_1 * QC_0 * 2.0 + PQ[d1] * QD_0 * QC_0 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * 2.0 + PQ[d0] * QD_1 * QC_0 * 2.0 + PQ[d1] * QD_0 * QC_0 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * 2.0 + PQ[d0] * QD_1 * QC_0 * 2.0 + PQ[d1] * QD_0 * QC_0 * 2.0)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] + PB_1 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] + PB_1 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] + PB_1 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b1])
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] + PA_0 * PA_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] + PA_0 * PA_1 * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] + PA_0 * PA_1 * QD_1)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1 * QC_0)
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1 * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PA_1 * QD_0)
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PA_1 * QD_0)
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * QD_1)
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * QD_1)
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] + PB_0 * PA_0 * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] + PB_0 * PA_0 * QD_0)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] + PB_0 * PA_0 * QD_1)
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0 * QC_0)
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0 * QC_0)
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PA_0 * QD_0)
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PA_0 * QD_0)
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * QD_1)
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] + PB_1 * PA_0 * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] + PB_1 * PA_0 * QD_0)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] + PB_1 * PA_0 * QD_1)
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0 * QC_0)
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0 * QC_0)
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PA_0 * QD_0)
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PA_0 * QD_0)
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * QD_1)
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * QD_1)
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] + PB_0 * PA_1 * PQ[b1] + PB_1 * PA_1 * PQ[b0])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] + PB_0 * PA_1 * PQ[b1] + PB_1 * PA_1 * PQ[b0])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] + PB_0 * PA_1 * PQ[b1] + PB_1 * PA_1 * PQ[b0])
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] + PB_0 * PA_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] + PB_0 * PA_1 * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] + PB_0 * PA_1 * QD_1)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1 * QC_0)
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1 * QC_0)
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PA_1 * QD_0)
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PA_1 * QD_0)
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * QD_1)
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] + PB_1 * PA_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] + PB_1 * PA_1 * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] + PB_1 * PA_1 * QD_1)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1 * QC_0)
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1 * QC_0)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PA_1 * QD_0)
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PA_1 * QD_0)
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * QD_1)
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1 * QC_0)
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1 * QC_0)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] + PB_0 * PB_1 * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] + PB_0 * PB_1 * QD_0)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] + PB_0 * PB_1 * QD_1)
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PB_1 * QD_0)
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PB_1 * QD_0)
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * QD_1)
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * QD_1)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1])
                        )

                    )

                    +

                    F7_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD4(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[4];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 * QC_0 + PB_0 * PA_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * QD_1 * QC_0 + PB_1 * PA_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b1] * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 + PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1)
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * QD_1 * QC_0 + PB_0 * PA_1 * PQ[b1] * QD_1 * QC_0 + PB_1 * PA_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1 + PB_0 * PA_1 * PQ[b1] * QD_0 * QD_1 + PB_1 * PA_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 * QD_1 + PB_0 * PA_1 * PQ[d0] * QD_1 * QC_0 + PB_0 * PA_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PA_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PA_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0)
                        )

                    )

                    +

                    F7_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F7_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F7_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F7_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F7_t[3] * (

                        0.125 * S2 / ( S1 * S4 * S4 * S4 ) * (
                            delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (QD_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (QD_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (QD_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (QD_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (QD_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (QD_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (QD_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (QD_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (QD_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (QD_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (QD_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (QD_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[3] * (

                        0.125 / ( S4 * S4 * S4 ) * (
                            delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PA_0)
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PA_0)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PA_0)
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PA_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PA_0)
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PA_0)
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PA_1)
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PA_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PA_1)
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PA_1)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PA_1)
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PA_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * (-1.0) + PA_1)
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-2.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * (-2.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-2.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[d0] * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] * (-2.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-2.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[d1] * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] * (-2.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PB_0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PB_0)
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PB_0)
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PB_0)
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PB_0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PB_0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PB_1)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PB_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PB_1)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PB_1)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PB_1)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PB_1)
                        )

                    )

                    +

                    F7_t[3] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * QD_1 * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * QD_1 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * QD_1 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * QD_1 * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * QD_0 * QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * QD_1 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * QD_0 * QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                        )

                    )

                    +

                    F7_t[3] * (

                        0.25 * S1 / ( S4 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[a0] * PQ[c0])
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[a0] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] + PA_0 * PQ[b1] * PQ[c0])
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d1])
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[b0] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] + PA_1 * PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] + PA_1 * PQ[b1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d1] + PA_1 * PQ[b1] * PQ[d1])
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F7_t[3] * (

                        0.25 * S2 / ( S4 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1])
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] + PA_1 * PQ[a0] * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] + PA_1 * PQ[a0] * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] + PA_1 * PQ[a0] * QD_1)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * QD_1)
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * QD_1)
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] + PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] + PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * QD_0)
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] + PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * QD_1)
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] + PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * PQ[c0] + PA_0 * PQ[b1] * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] + PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] + PA_0 * PQ[b1] * QD_0)
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] + PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] + PA_0 * PQ[b1] * QD_1)
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0] + PA_1 * PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0] + PA_1 * PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0] + PA_1 * PQ[b0] * PQ[b1])
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] + PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] + PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] + PB_0 * PQ[a1] * QD_1 + PA_1 * PQ[b0] * PQ[d1] + PA_1 * PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] * QC_0 + PA_1 * PQ[b0] * QC_0)
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * QD_1 + PA_1 * PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_1 + PA_1 * PQ[b0] * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] + PB_1 * PQ[a1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] + PA_1 * PQ[b1] * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] + PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] + PA_1 * PQ[b1] * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] + PB_1 * PQ[a1] * QD_1 + PA_1 * PQ[b1] * PQ[d1] + PA_1 * PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] * QC_0 + PA_1 * PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] * QC_0 + PA_1 * PQ[b1] * QC_0)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * QD_1 + PA_1 * PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_1 + PA_1 * PQ[b1] * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_1 + PA_1 * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_1 + PA_1 * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_1 + PA_1 * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QD_1 + PA_1 * PQ[d1] * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QD_1 + PA_1 * PQ[d1] * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QD_1 + PA_1 * PQ[d1] * QD_0)
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] + PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] + PB_1 * PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] + PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] + PB_1 * PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] + PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] + PB_1 * PQ[b0] * QD_1)
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * (-2.0))
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                        )

                    )

                    +

                    F7_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1])
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD5(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[5];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    +

                    F7_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0)
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1)
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0)
                        )

                    )

                    +

                    F7_t[3] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                        )

                    )

                    +

                    F7_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F7_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F7_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD6(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[5];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[4] * (

                        ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F7_t[4] * (

                        0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0])
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0])
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0])
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0])
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1])
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1])
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * 2.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD7(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[5];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[4] * (

                        0.25 * ( S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] + PQ[a0] * PQ[a1] * QC_0)
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * QC_0)
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QC_0)
                            + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * QC_0)
                            + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] + PQ[a0] * PQ[b0] * QC_0)
                            + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * QC_0)
                            + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0)
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] + PQ[a0] * PQ[b1] * QC_0)
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QC_0)
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] + PQ[a1] * PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QC_0)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] + PQ[a1] * PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_1 + PQ[a1] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * QD_1 + PQ[a1] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_1 + PQ[a1] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] + PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0])
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0])
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0])
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[d0] + PQ[a0] * PQ[a1] * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[d1] + PQ[a0] * PQ[a1] * QD_1)
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * QD_0)
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_0)
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QD_1)
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_1)
                            + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] + PQ[a0] * PQ[b0] * QD_0)
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] + PQ[a0] * PQ[b0] * QD_1)
                            + delta[a1][c0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0)
                            + delta[a1][d1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0)
                            + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1)
                            + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_1)
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] + PQ[a0] * PQ[b1] * QD_0)
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] + PQ[a0] * PQ[b1] * QD_1)
                            + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0)
                            + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0)
                            + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1)
                            + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_1)
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[d0] + PQ[a1] * PQ[b0] * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[d1] + PQ[a1] * PQ[b0] * QD_1)
                            + delta[a0][c0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_1)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[d0] + PQ[a1] * PQ[b1] * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[d1] + PQ[a1] * PQ[b1] * QD_1)
                            + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_1)
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[d0] * QD_1 + PQ[a1] * PQ[d1] * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[d0] * QD_1 + PQ[a1] * PQ[d1] * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[d0] * QD_1 + PQ[a1] * PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] + PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] + PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F7_t[4] * (

                        0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F7_t[4] * (

                        0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    +

                    F7_t[4] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0)
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0)
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_0)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1)
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD8(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[5];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[4] * (

                        0.125 * S2 / ( S4 * S4 * S4 * S4 ) * (
                            delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0])
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a0])
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a0])
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0])
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a0])
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a0])
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0])
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0])
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0])
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0])
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0])
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0])
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0])
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0])
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0])
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1])
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a1])
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a1])
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1])
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a1])
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a1])
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1])
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1])
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1])
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1])
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1])
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1])
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1])
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1])
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1])
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PQ[b0])
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PQ[b0])
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0])
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PQ[b0])
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PQ[b0])
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0])
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0])
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0])
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0])
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0])
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0])
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0])
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0])
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0])
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0])
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PQ[b1])
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PQ[b1])
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1])
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PQ[b1])
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PQ[b1])
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1])
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1])
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1])
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1])
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1])
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1])
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1])
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1])
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1])
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1])
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0])
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0])
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0])
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0])
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0])
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0])
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0])
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0])
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0])
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0])
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0])
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0])
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[d0])
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[d0])
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[d0])
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0])
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0])
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[d0])
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[d0])
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0])
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0])
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[d1])
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[d1])
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[d1])
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[d1])
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1])
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[d1])
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[d1])
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[d1])
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[d1])
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD9(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[8];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 7, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[5] * (

                        ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F7_t[5] * (

                        ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F7_t[5] * (

                        ( S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F7_t[5] * (

                        0.25 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][c0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F7_t[5] * (

                        0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F7_t[5] * (

                        0.5 * ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F7_t[6] * (

                        ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F7_t[6] * (

                        ( S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F7_t[6] * (

                        0.5 * ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F7_t[7] * (

                        ( S1 * S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD0(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[2];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[0] * (

                        0.125 / ( S1 * S1 * S2 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (QD_0 * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QD_1 * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0 * QD_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F8_t[0] * (

                        0.125 / ( S1 * S2 * S2 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1)
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0)
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0)
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0)
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0)
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0)
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1)
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1)
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1)
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1)
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                        )

                    )

                    +

                    F8_t[0] * (

                        0.25 / ( S1 * S1 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    +

                    F8_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0 * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0 * QC_1)
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * QD_0 * QC_0)
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * QD_1 * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0 * QC_1)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1 * QC_1)
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0 * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * QC_0 * QC_1)
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * QD_0 * QC_0)
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * QD_1 * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * QD_0 * QC_1)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * QD_1 * QC_1)
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * QD_0 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * QD_1 * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * QD_0 * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * QD_1 * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * QD_0 * QD_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * QD_0 * QC_0)
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0 * QC_1)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F8_t[0] * (

                        0.25 / ( S2 * S2 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                        )

                    )

                    +

                    F8_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    +

                    F8_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F8_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[0] * (

                        0.0625 / ( S1 * S1 * S2 * S2 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1]
                        )

                    )

                    +

                    F8_t[1] * (

                        0.0625 / ( S1 * S1 * S2 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD1(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[2];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[1] * (

                        0.0625 / ( S1 * S2 * S2 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                        )

                    )

                    +

                    F8_t[1] * (

                        0.125 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0 * QC_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0 * QC_1 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (QD_0 * QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (QD_0 * QC_0 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QD_1 * QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QD_1 * QC_0 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0 * QC_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0 * QC_1 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1 * QC_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1 * QC_1 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0 * QD_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0 * QD_1 * (-2.0))
                        )

                    )

                    +

                    F8_t[1] * (

                        0.125 / ( S1 * S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * QC_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_1)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * QC_1)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * QC_1)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * QC_1)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * QC_1)
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * QD_0)
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0)
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * QD_0)
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * QD_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * QD_0)
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * QD_0)
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * QD_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * QD_0)
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * QD_1)
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_1)
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * QD_1)
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * QD_1)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * QD_1)
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * QD_1)
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * QD_1)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * QD_1)
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * QC_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * QC_1)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * QC_1)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * QD_0)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * QD_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * QD_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * QD_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * QD_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * QD_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * QD_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * QD_1)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * QD_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * QD_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * QD_1)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * QD_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * QD_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * QD_1)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * QD_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * QD_1)
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * QC_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * QC_1)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * QD_0)
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * QD_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * QD_0)
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * QD_0)
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * QD_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * QD_0)
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * QD_0)
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0)
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * QD_1)
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * QD_1)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * QD_1)
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * QD_1)
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * QD_1)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * QD_1)
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * QD_1)
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * QD_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * QD_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * QD_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * QD_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * QD_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * QD_1)
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * QD_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * QD_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * QD_1)
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * QD_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * QD_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * QD_1)
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_1)
                        )

                    )

                    +

                    F8_t[1] * (

                        0.125 / ( S2 * S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-2.0))
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-2.0))
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-2.0))
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-2.0))
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-2.0))
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-2.0))
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0 * (-2.0))
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0 * (-2.0))
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-2.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1 * (-2.0))
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1 * (-2.0))
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1 * (-2.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1 * (-2.0))
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1 * (-2.0))
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1 * (-2.0))
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-2.0))
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-2.0))
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-2.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD2(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[2];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[1] * (

                        0.25 * S1 / ( S2 * S2 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * (-2.0))
                        )

                    )

                    +

                    F8_t[1] * (

                        0.25 * S2 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-2.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD3(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[2];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_1)
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * QD_0 * QC_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * QD_0 * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * QD_0 * QC_0 * QC_1)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * QD_1 * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * (PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * QD_1 * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * QD_0 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * QD_0 * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * QD_1 * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * QD_1 * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * QD_0 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * QD_0 * QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * (PB_0 * QD_0 * QD_1 * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * QD_1 * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * QD_0 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * QD_0 * QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * QD_1 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * QD_1 * QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * (PB_1 * QD_0 * QD_1 * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * QD_1 * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD4(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[2];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * QC_1)
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * QD_1)
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * QC_1)
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * QD_1)
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * QD_0 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * QD_1 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * QD_1 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * QC_0)
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * QC_0)
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * QC_0)
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * QC_1)
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * QC_1)
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QC_1)
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * QD_0)
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * QD_0)
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * QD_0)
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * QD_1)
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QD_1)
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * QD_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * QD_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * QC_1)
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_1 * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_1 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_1 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_1 * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_1 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * QD_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F8_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD5(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[3];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    +

                    F8_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_0 * QC_1)
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * QC_1)
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F8_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F8_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F8_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[2] * (

                        0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1)
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0)
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0)
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0)
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0)
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0)
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1)
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1)
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1)
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1)
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.125 * S2 / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (QC_0 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (QD_0 * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (QD_1 * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (QD_0 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (QD_1 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (QD_0 * QD_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.125 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0 + QC_0 * QC_1 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0 + QC_0 * QC_1 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0 + QC_0 * QC_1 * 2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0 + QD_0 * QC_0 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0 + QD_0 * QC_0 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0 + QD_0 * QC_0 * 2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * 2.0 + PQ[d0] * QC_1 * 2.0 + QD_0 * QC_1 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * 2.0 + PQ[d0] * QC_1 * 2.0 + QD_0 * QC_1 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * 2.0 + PQ[d0] * QC_1 * 2.0 + QD_0 * QC_1 * 2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * 2.0 + PQ[d1] * QC_0 * 2.0 + QD_1 * QC_0 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * 2.0 + PQ[d1] * QC_0 * 2.0 + QD_1 * QC_0 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * 2.0 + PQ[d1] * QC_0 * 2.0 + QD_1 * QC_0 * 2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * 2.0 + PQ[d1] * QC_1 * 2.0 + QD_1 * QC_1 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * 2.0 + PQ[d1] * QC_1 * 2.0 + QD_1 * QC_1 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * 2.0 + PQ[d1] * QC_1 * 2.0 + QD_1 * QC_1 * 2.0)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (QC_0 * QC_1)
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (QC_0 * QC_1)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (QC_0 * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (QC_0 * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (QC_0 * QC_1)
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (QC_0 * QC_1)
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (QD_0 * QC_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (QD_0 * QC_0)
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (QD_0 * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (QD_0 * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (QD_0 * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (QD_0 * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (QD_0 * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (QD_0 * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0)
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (QD_0 * QC_0)
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (QD_0 * QC_0)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (QD_1 * QC_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (QD_1 * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (QD_1 * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (QD_1 * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (QD_1 * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (QD_1 * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0)
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (QD_1 * QC_0)
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (QD_0 * QC_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (QD_0 * QC_1)
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (QD_0 * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (QD_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (QD_0 * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_1)
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * QC_1)
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * QC_1)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (QD_1 * QC_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (QD_1 * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (QD_1 * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (QD_1 * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (QD_1 * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_1)
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (QD_1 * QC_1)
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0 + QD_0 * QD_1 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0 + QD_0 * QD_1 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0 + QD_0 * QD_1 * 2.0)
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (QD_0 * QD_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (QD_0 * QD_1)
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (QD_0 * QD_1)
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * QD_1)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * QD_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (QD_0 * QD_1)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (QD_0 * QD_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (QD_0 * QD_1)
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (QD_0 * QD_1)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1)
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD6(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[3];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[2] * (

                        0.125 / ( S2 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * 2.0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * 2.0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * 2.0)
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PA_1)
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PA_1)
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PA_1)
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PA_1)
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PA_1)
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PA_1)
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PA_1)
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PA_1)
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PA_1)
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PA_1)
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PA_1)
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PA_1)
                            + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0)
                            + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0)
                            + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0)
                            + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0)
                            + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                            + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0)
                            + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0)
                            + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0)
                            + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0)
                            + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0)
                            + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0)
                            + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0)
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0) + PB_0 * PA_0 * 2.0)
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0) + PB_0 * PA_0 * 2.0)
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0) + PB_0 * PA_0 * 2.0)
                            + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0)
                            + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0)
                            + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0)
                            + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0)
                            + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0)
                            + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0)
                            + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0)
                            + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0)
                            + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0)
                            + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0)
                            + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0)
                            + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0)
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * (-2.0) + PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * 2.0)
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-2.0) + PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * 2.0)
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-2.0) + PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * 2.0)
                            + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_1)
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_1)
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_1)
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_1)
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_1)
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_1)
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_1)
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_1)
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_1)
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_1)
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_1)
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_1)
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-2.0) + PA_1 * PQ[b0] * (-2.0) + PB_0 * PA_1 * 2.0)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-2.0) + PA_1 * PQ[b0] * (-2.0) + PB_0 * PA_1 * 2.0)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * (-2.0) + PA_1 * PQ[b0] * (-2.0) + PB_0 * PA_1 * 2.0)
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_1)
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_1)
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_1)
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_1)
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_1)
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_1)
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_1)
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_1)
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_1)
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_1)
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] * (-2.0) + PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_1 * 2.0)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-2.0) + PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_1 * 2.0)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a1] * (-2.0) + PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_1 * 2.0)
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0) + PB_0 * PB_1 * 2.0)
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0) + PB_0 * PB_1 * 2.0)
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0) + PB_0 * PB_1 * 2.0)
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1)
                            + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1)
                            + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1)
                            + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                            + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1)
                            + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1)
                            + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1)
                            + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1)
                            + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1)
                            + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-2.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[c1] * QC_0)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0)
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[c1] * QC_0)
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_0)
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_1)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_1)
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QD_0)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[c1] * QC_0)
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PQ[c0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_1)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1] + PB_1 * PA_0 * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[d1] * QC_1)
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QD_0)
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] + PB_0 * PA_1 * PQ[c0] * QC_1 + PB_0 * PA_1 * PQ[c1] * QC_0)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[c0] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[d1] + PB_0 * PA_1 * PQ[c0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * PQ[d0] + PB_0 * PA_1 * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1] + PB_0 * PA_1 * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[d1] * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1] + PB_0 * PA_1 * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QD_0)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] + PB_1 * PA_1 * PQ[c0] * QC_1 + PB_1 * PA_1 * PQ[c1] * QC_0)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] + PB_1 * PA_1 * PQ[c0] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[d1] + PB_1 * PA_1 * PQ[c0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[c1] * PQ[d0] + PB_1 * PA_1 * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1] + PB_1 * PA_1 * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[d1] * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * PQ[d1] + PB_1 * PA_1 * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0)
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1)
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD7(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[3];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1)
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_1)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_1)
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_1)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * QC_1)
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * (PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_1 * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * QD_0 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * (PB_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * QD_0 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * (PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * 2.0 + PQ[c1] * QD_0 * QD_1 * QC_0 * 2.0 + PQ[d0] * QD_1 * QC_0 * QC_1 * 2.0 + PQ[d1] * QD_0 * QC_0 * QC_1 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * 2.0 + PQ[c1] * QD_0 * QD_1 * QC_0 * 2.0 + PQ[d0] * QD_1 * QC_0 * QC_1 * 2.0 + PQ[d1] * QD_0 * QC_0 * QC_1 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * 2.0 + PQ[c1] * QD_0 * QD_1 * QC_0 * 2.0 + PQ[d0] * QD_1 * QC_0 * QC_1 * 2.0 + PQ[d1] * QD_0 * QC_0 * QC_1 * 2.0)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b0] * QC_1)
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_1)
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * QC_0 + PB_1 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b1] * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * QC_0 + PB_1 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b1] * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * QC_0 + PB_1 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b1] * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * QC_1 + PB_1 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b1] * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * QC_1 + PB_1 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b1] * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * QC_1 + PB_1 * PA_1 * PQ[a0] * QC_1 + PA_0 * PA_1 * PQ[b1] * QC_1)
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * QD_0 + PB_1 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b1] * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * QD_0 + PB_1 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b1] * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * QD_0 + PB_1 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b1] * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * QD_1 + PB_1 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b1] * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * QD_1 + PB_1 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b1] * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * QD_1 + PB_1 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b1] * QD_1)
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[c1] * QC_0 + PA_0 * PA_1 * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0 + PA_0 * PA_1 * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0 + PA_0 * PA_1 * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_1 + PA_0 * PA_1 * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_1 + PA_0 * PA_1 * QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0 + PA_0 * PA_1 * QD_0 * QD_1)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1 * QC_0 * QC_1)
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1 * QC_0 * QC_1)
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * PA_1 * QD_0 * QC_0)
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * PA_1 * QD_0 * QC_0)
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * PA_1 * QD_1 * QC_0)
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * PA_1 * QD_1 * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PA_1 * QD_0 * QC_1)
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PA_1 * QD_0 * QC_1)
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * QD_1 * QC_1)
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1 * QD_0 * QD_1)
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1 * QD_0 * QD_1)
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_1)
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_1)
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_1)
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[c1] * QC_0 + PB_0 * PA_0 * QC_0 * QC_1)
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_0 + PB_0 * PA_0 * QD_0 * QC_0)
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_0 + PB_0 * PA_0 * QD_1 * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_1 + PB_0 * PA_0 * QD_0 * QC_1)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_1 + PB_0 * PA_0 * QD_1 * QC_1)
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QD_0 + PB_0 * PA_0 * QD_0 * QD_1)
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0 * QC_0 * QC_1)
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0 * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b1][d1] * (PB_0 * PA_0 * QD_0 * QC_0)
                            + delta[a1][d1] * delta[b1][c1] * (PB_0 * PA_0 * QD_0 * QC_0)
                            + delta[a1][c1] * delta[b1][d0] * (PB_0 * PA_0 * QD_1 * QC_0)
                            + delta[a1][d0] * delta[b1][c1] * (PB_0 * PA_0 * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PA_0 * QD_0 * QC_1)
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QC_1)
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * QD_1 * QC_1)
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * QD_1 * QC_1)
                            + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0 * QD_0 * QD_1)
                            + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[c1] * QC_0 + PB_1 * PA_0 * QC_0 * QC_1)
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_0 + PB_1 * PA_0 * QD_0 * QC_0)
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QC_0 + PB_1 * PA_0 * QD_1 * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_1 + PB_1 * PA_0 * QD_0 * QC_1)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[d1] * QC_1 + PB_1 * PA_0 * QD_1 * QC_1)
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QD_0 + PB_1 * PA_0 * QD_0 * QD_1)
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0 * QC_0 * QC_1)
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0 * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b0][d1] * (PB_1 * PA_0 * QD_0 * QC_0)
                            + delta[a1][d1] * delta[b0][c1] * (PB_1 * PA_0 * QD_0 * QC_0)
                            + delta[a1][c1] * delta[b0][d0] * (PB_1 * PA_0 * QD_1 * QC_0)
                            + delta[a1][d0] * delta[b0][c1] * (PB_1 * PA_0 * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PA_0 * QD_0 * QC_1)
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QC_1)
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * QD_1 * QC_1)
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * QD_1 * QC_1)
                            + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0 * QD_0 * QD_1)
                            + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QD_1)
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_1 * PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_1 * PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_1 * PQ[b0] * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[b1] * QC_1 + PB_1 * PA_1 * PQ[b0] * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[b1] * QC_1 + PB_1 * PA_1 * PQ[b0] * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * QC_1 + PB_0 * PA_1 * PQ[b1] * QC_1 + PB_1 * PA_1 * PQ[b0] * QC_1)
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_1 * PQ[b0] * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_1 * PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_1 * PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[b1] * QD_1 + PB_1 * PA_1 * PQ[b0] * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[b1] * QD_1 + PB_1 * PA_1 * PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[b1] * QD_1 + PB_1 * PA_1 * PQ[b0] * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QC_1 + PB_0 * PA_1 * PQ[c1] * QC_0 + PB_0 * PA_1 * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_0 + PB_0 * PA_1 * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QC_0 + PB_0 * PA_1 * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_1 + PB_0 * PA_1 * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[d1] * QC_1 + PB_0 * PA_1 * QD_1 * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QD_0 + PB_0 * PA_1 * QD_0 * QD_1)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1 * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * PA_1 * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * PA_1 * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * PA_1 * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * PA_1 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PA_1 * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PA_1 * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * QD_1 * QC_1)
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1 * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1 * QD_0 * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QC_1 + PB_1 * PA_1 * PQ[c1] * QC_0 + PB_1 * PA_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_0 + PB_1 * PA_1 * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QC_0 + PB_1 * PA_1 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_1 + PB_1 * PA_1 * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[d1] * QC_1 + PB_1 * PA_1 * QD_1 * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QD_0 + PB_1 * PA_1 * QD_0 * QD_1)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1 * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * PA_1 * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * PA_1 * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * PA_1 * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * PA_1 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PA_1 * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PA_1 * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * QD_1 * QC_1)
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1 * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1 * QD_0 * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0 + PB_0 * PB_1 * QC_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0 + PB_0 * PB_1 * QD_0 * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1 + PB_0 * PB_1 * QD_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0 + PB_0 * PB_1 * QD_1 * QC_0)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1 + PB_0 * PB_1 * QD_1 * QC_1)
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1 * QC_0 * QC_1)
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][d1] * (PB_0 * PB_1 * QD_0 * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * (PB_0 * PB_1 * QD_0 * QC_0)
                            + delta[a0][c1] * delta[a1][d0] * (PB_0 * PB_1 * QD_1 * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * (PB_0 * PB_1 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PB_1 * QD_0 * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PB_1 * QD_0 * QC_1)
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * QD_1 * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * QD_1 * QC_1)
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0 + PB_0 * PB_1 * QD_0 * QD_1)
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1 * QD_0 * QD_1)
                            + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD8(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[3];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 + PB_0 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_1 + PB_0 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * QD_1 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1 * QC_1 + PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 * QC_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * QD_1 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1 * QC_0 + PB_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1 * QC_1 + PB_0 * PA_1 * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PA_1 * PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PA_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PA_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PA_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                        )

                    )

                    +

                    F8_t[2] * (

                        0.0625 / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1]
                        )

                    )

                    +

                    F8_t[2] * (

                        0.0625 / ( S1 * S2 * S4 * S4 ) * (
                            delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1]
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1]
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0]
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1]
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1]
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0]
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * delta[d0][d1]
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * delta[c1][d1]
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * delta[c1][d0]
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1]
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1]
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0]
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1]
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1]
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0]
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * delta[d0][d1]
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * delta[c0][d1]
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * delta[c0][d0]
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1]
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1]
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1]
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1]
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1]
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1]
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * delta[c1][d1]
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * delta[c0][d1]
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * delta[c0][c1]
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0]
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0]
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1]
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0]
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0]
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1]
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * delta[c1][d0]
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * delta[c0][d0]
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * delta[c0][c1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * 4.0
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * 4.0
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * 4.0
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1]
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1]
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0]
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1]
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1]
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0]
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1]
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1]
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1]
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0]
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0]
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1]
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * delta[d0][d1]
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * delta[c1][d1]
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * delta[c1][d0]
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * delta[d0][d1]
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * delta[c1][d1]
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * delta[c1][d0]
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * delta[d0][d1]
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * delta[c0][d1]
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * delta[c0][d0]
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * delta[d0][d1]
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * delta[c0][d1]
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * delta[c0][d0]
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * delta[c1][d1]
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * delta[c0][d1]
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * delta[c0][c1]
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * delta[c1][d1]
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * delta[c0][d1]
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * delta[c0][c1]
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * delta[c1][d0]
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * delta[c0][d0]
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * delta[c0][c1]
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * delta[c1][d0]
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * delta[c0][d0]
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * delta[c0][c1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * 4.0
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * 4.0
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * 4.0
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * 4.0
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * 4.0
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * 4.0
                        )

                    )

                    +

                    F8_t[2] * (

                        0.0625 / ( S2 * S2 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD9(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[4];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F8_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F8_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[3] * (

                        0.0625 / ( S1 * S4 * S4 * S4 ) * (
                            delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (-1.0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (-1.0)
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (-1.0)
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (-1.0)
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (-1.0)
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (-1.0)
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (-1.0)
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                        )

                    )

                    +

                    F8_t[3] * (

                        0.0625 / ( S2 * S4 * S4 * S4 ) * (
                            delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (-1.0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (-1.0)
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (-1.0)
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (-1.0)
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (-1.0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (-1.0)
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (-1.0)
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (-1.0)
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (-1.0)
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (-1.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD10(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[4];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[3] * (

                        0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PA_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PA_1 * (-1.0))
                            + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0])
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0])
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0])
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[c0])
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[c0])
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[c0])
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c0])
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[c0])
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[c0])
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c1])
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1])
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1])
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[c1])
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[c1])
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[c1])
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c1])
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[c1])
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[c1])
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[d0])
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0])
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0])
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[d0])
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[d0])
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[d0])
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[d0])
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[d0])
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d0])
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[d1])
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1])
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d1])
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[d1])
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[d1])
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[d1])
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[d1])
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[d1])
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d1])
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c0])
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[c0])
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[c0])
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * PQ[c0])
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * PQ[c0])
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * PQ[c0])
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c0])
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[c0])
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[c0])
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c1])
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[c1])
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[c1])
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * PQ[c1])
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * PQ[c1])
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * PQ[c1])
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c1])
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[c1])
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[c1])
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[d0])
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[d0])
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d0])
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * PQ[d0])
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * PQ[d0])
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[d0])
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d0])
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[d1])
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[d1])
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d1])
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * PQ[d1])
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[d1])
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d1])
                            + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c0])
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[c0])
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[c0])
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0])
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0])
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0])
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0])
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0])
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0])
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c1])
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[c1])
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[c1])
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1])
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1])
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1])
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c1])
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1])
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1])
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[d0])
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[d0])
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d0])
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0])
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0])
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0])
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[d0])
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0])
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0])
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[d1])
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[d1])
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d1])
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1])
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1])
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1])
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[d1])
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1])
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d1])
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c0])
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[c0])
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[c0])
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0])
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0])
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0])
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0])
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0])
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0])
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c1])
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[c1])
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[c1])
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1])
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1])
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1])
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c1])
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1])
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1])
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[d0])
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[d0])
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d0])
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0])
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0])
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[d0])
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0])
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[d1])
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[d1])
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d1])
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1])
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[d1])
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d1])
                        )

                    )

                    +

                    F8_t[3] * (

                        0.125 * S2 / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (QC_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (QD_0 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (QD_1 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (QD_1 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (QD_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (QD_0 * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F8_t[3] * (

                        0.125 / ( S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * 2.0 + PA_1 * PQ[a0] * 2.0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * 2.0 + PA_1 * PQ[a0] * 2.0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * 2.0 + PA_1 * PQ[a0] * 2.0)
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-2.0) + PB_0 * PQ[a0] * 2.0 + PA_0 * PQ[b0] * 2.0)
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-2.0) + PB_0 * PQ[a0] * 2.0 + PA_0 * PQ[b0] * 2.0)
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-2.0) + PB_0 * PQ[a0] * 2.0 + PA_0 * PQ[b0] * 2.0)
                            + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * 2.0 + PA_0 * PQ[b1] * 2.0)
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * 2.0 + PA_0 * PQ[b1] * 2.0)
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * 2.0 + PA_0 * PQ[b1] * 2.0)
                            + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] * (PA_0 * QC_0)
                            + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] * (PA_0 * QC_0)
                            + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] * (PA_0 * QC_0)
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] * (PA_0 * QC_0)
                            + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] * (PA_0 * QC_0)
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c1] * (PA_0 * QC_0)
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PA_0 * QC_1)
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PA_0 * QC_1)
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PA_0 * QC_1)
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PA_0 * QC_1)
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PA_0 * QC_1)
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PA_0 * QC_1)
                            + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] * (PA_0 * QD_0)
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] * (PA_0 * QD_0)
                            + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] * (PA_0 * QD_0)
                            + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] * (PA_0 * QD_0)
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] * (PA_0 * QD_0)
                            + delta[a1][d1] * delta[b0][c1] * delta[b1][c0] * (PA_0 * QD_0)
                            + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PA_0 * QD_1)
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PA_0 * QD_1)
                            + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PA_0 * QD_1)
                            + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PA_0 * QD_1)
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PA_0 * QD_1)
                            + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PA_0 * QD_1)
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-2.0) + PB_0 * PQ[a1] * 2.0 + PA_1 * PQ[b0] * 2.0)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-2.0) + PB_0 * PQ[a1] * 2.0 + PA_1 * PQ[b0] * 2.0)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-2.0) + PB_0 * PQ[a1] * 2.0 + PA_1 * PQ[b0] * 2.0)
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a1] * 2.0 + PA_1 * PQ[b1] * 2.0)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a1] * 2.0 + PA_1 * PQ[b1] * 2.0)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a1] * 2.0 + PA_1 * PQ[b1] * 2.0)
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PA_1 * QC_0)
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PA_1 * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PA_1 * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PA_1 * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PA_1 * QC_0)
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PA_1 * QC_0)
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PA_1 * QC_1)
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PA_1 * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PA_1 * QC_1)
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PA_1 * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PA_1 * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PA_1 * QC_1)
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PA_1 * QD_0)
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PA_1 * QD_0)
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PA_1 * QD_0)
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PA_1 * QD_0)
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PA_1 * QD_0)
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PA_1 * QD_0)
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PA_1 * QD_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PA_1 * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PA_1 * QD_1)
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PA_1 * QD_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PA_1 * QD_1)
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PA_1 * QD_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] * (PB_0 * QC_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] * (PB_0 * QC_0)
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] * (PB_0 * QC_0)
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] * (PB_0 * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] * (PB_0 * QC_0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c1] * (PB_0 * QC_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PB_0 * QC_1)
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PB_0 * QC_1)
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PB_0 * QC_1)
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PB_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PB_0 * QC_1)
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PB_0 * QC_1)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PB_1 * QC_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PB_1 * QC_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PB_1 * QC_0)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PB_1 * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PB_1 * QC_0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PB_1 * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PB_1 * QC_1)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PB_1 * QC_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PB_1 * QC_1)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PB_1 * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PB_1 * QC_1)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PB_1 * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[b1] * 2.0 + PB_1 * PQ[b0] * 2.0)
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[b1] * 2.0 + PB_1 * PQ[b0] * 2.0)
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[b1] * 2.0 + PB_1 * PQ[b0] * 2.0)
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-2.0) + PQ[c0] * QC_1 * (-2.0) + PQ[c1] * QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-2.0) + PQ[c0] * QC_1 * (-2.0) + PQ[c1] * QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-2.0) + PQ[c0] * QC_1 * (-2.0) + PQ[c1] * QC_0 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-2.0) + PQ[c0] * QD_0 * (-2.0) + PQ[d0] * QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-2.0) + PQ[c0] * QD_0 * (-2.0) + PQ[d0] * QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-2.0) + PQ[c0] * QD_0 * (-2.0) + PQ[d0] * QC_0 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-2.0) + PQ[c0] * QD_1 * (-2.0) + PQ[d1] * QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-2.0) + PQ[c0] * QD_1 * (-2.0) + PQ[d1] * QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-2.0) + PQ[c0] * QD_1 * (-2.0) + PQ[d1] * QC_0 * (-2.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-2.0) + PQ[c1] * QD_0 * (-2.0) + PQ[d0] * QC_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-2.0) + PQ[c1] * QD_0 * (-2.0) + PQ[d0] * QC_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-2.0) + PQ[c1] * QD_0 * (-2.0) + PQ[d0] * QC_1 * (-2.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-2.0) + PQ[c1] * QD_1 * (-2.0) + PQ[d1] * QC_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-2.0) + PQ[c1] * QD_1 * (-2.0) + PQ[d1] * QC_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-2.0) + PQ[c1] * QD_1 * (-2.0) + PQ[d1] * QC_1 * (-2.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-2.0) + PQ[d0] * QD_1 * (-2.0) + PQ[d1] * QD_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-2.0) + PQ[d0] * QD_1 * (-2.0) + PQ[d1] * QD_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-2.0) + PQ[d0] * QD_1 * (-2.0) + PQ[d1] * QD_0 * (-2.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] * (PB_0 * QD_0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] * (PB_0 * QD_0)
                            + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] * (PB_0 * QD_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] * (PB_0 * QD_0)
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] * (PB_0 * QD_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b1][c0] * (PB_0 * QD_0)
                            + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PB_0 * QD_1)
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PB_0 * QD_1)
                            + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PB_0 * QD_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PB_0 * QD_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PB_0 * QD_1)
                            + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PB_0 * QD_1)
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PB_1 * QD_0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PB_1 * QD_0)
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PB_1 * QD_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PB_1 * QD_0)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PB_1 * QD_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PB_1 * QD_0)
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PB_1 * QD_1)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PB_1 * QD_1)
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PB_1 * QD_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PB_1 * QD_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PB_1 * QD_1)
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PB_1 * QD_1)
                        )

                    )

                    +

                    F8_t[3] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PA_1 * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PA_1 * PQ[d1])
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1])
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1])
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1])
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1])
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1])
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d1])
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PA_1 * PQ[d1])
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD11(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[4];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[3] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F8_t[3] * (

                        0.25 * S1 / ( S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-2.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-2.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-2.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-2.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-2.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_0 * PQ[a1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_1)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0)
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0)
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QC_0)
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_1)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QC_0)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a1] * PQ[c0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QC_0)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[c0] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a1] * PQ[c0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a1] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PB_1 * PQ[a1] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0)
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F8_t[3] * (

                        0.25 * S2 / ( S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1)
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1)
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1)
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1)
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 + PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * QD_0 * QD_1)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[a0] * QD_1 * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[a0] * QD_0 * QC_1)
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[a0] * QD_1 * QC_1)
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 + PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * QC_0 * QC_1)
                            + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                            + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                            + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QC_0 + PA_0 * PQ[b1] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_1)
                            + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * QC_0 * QC_1)
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b1] * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_1)
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_1)
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_1)
                            + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QC_1 + PA_0 * PQ[c1] * QD_0 * QC_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_1 * QC_0 + PA_0 * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_1 * QC_0 + PA_0 * PQ[d1] * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_1 * QC_0 + PA_0 * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QC_0 + PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QC_0 + PA_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0 + PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_0 + PB_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[c0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QC_0 + PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QC_0 + PA_1 * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0 + PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_0 + PA_1 * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_1 + PB_1 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_1 + PA_1 * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[a1] * QD_1 * QC_0 + PA_1 * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_0 * QC_1 + PA_1 * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_1 * QC_1 + PA_1 * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[d0] * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QC_1 + PA_1 * PQ[c1] * QD_0 * QC_0 + PA_1 * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_1 * QC_1 + PA_1 * PQ[c1] * QD_1 * QC_0 + PA_1 * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_1 * QC_1 + PA_1 * PQ[c1] * QD_1 * QC_0 + PA_1 * PQ[d1] * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QD_1 * QC_1 + PA_1 * PQ[c1] * QD_1 * QC_0 + PA_1 * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[d1] * QD_0 * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QC_1 + PB_0 * PQ[c1] * QD_0 * QC_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_1 * QC_0 + PB_0 * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_1 * QC_0 + PB_0 * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_1 * QC_0 + PB_0 * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[d0] * QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QC_1 + PB_1 * PQ[c1] * QD_0 * QC_0 + PB_1 * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_1 * QC_1 + PB_1 * PQ[c1] * QD_1 * QC_0 + PB_1 * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_1 * QC_1 + PB_1 * PQ[c1] * QD_1 * QC_0 + PB_1 * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_1 * QC_1 + PB_1 * PQ[c1] * QD_1 * QC_0 + PB_1 * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[d1] * QD_0 * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-2.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-2.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-2.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-2.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-2.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-2.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-2.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-2.0))
                            + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        )

                    )

                    +

                    F8_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0)
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F8_t[3] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F8_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD12(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[5];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_1 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                        )

                    )

                    +

                    F8_t[3] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F8_t[4] * (

                        ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F8_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F8_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F8_t[4] * (

                        ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[4] * (

                        0.125 * S1 / ( S4 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                            + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[c1] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PA_1 * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PA_1 * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PA_1 * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PA_1 * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PA_1 * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PA_1 * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                            + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                            + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                            + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1])
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1])
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * PQ[c1])
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * 2.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * PQ[c1])
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1])
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1])
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1])
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * 2.0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * 2.0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * 2.0)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * PQ[d1])
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * 2.0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * PQ[d1])
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * 2.0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * 2.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[c1] * PQ[d0])
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * 2.0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * 2.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * PQ[d1])
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * 2.0)
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * 2.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * 2.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD13(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[5];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[4] * (

                        0.125 * S2 / ( S4 * S4 * S4 * S4 ) * (
                            delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[a0] * QC_0)
                            + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[a0] * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[a0] * QC_0)
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[a0] * QC_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[a0] * QC_0)
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[a0] * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a0] * QC_1)
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a0] * QC_1)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a0] * QC_1)
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a0] * QC_1)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QC_1)
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[a1] * QC_0)
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[a1] * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[a1] * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[a1] * QC_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[a1] * QC_0)
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[a1] * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a1] * QC_1)
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a1] * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a1] * QC_1)
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a1] * QC_1)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1] * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1] * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] * (PQ[b0] * QC_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] * (PQ[b0] * QC_0)
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] * (PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] * (PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] * (PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c1] * (PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PQ[b0] * QC_1)
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PQ[b0] * QC_1)
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PQ[b0] * QC_1)
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PQ[b0] * QC_1)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0] * QC_1)
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0] * QC_1)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PQ[b1] * QC_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PQ[b1] * QC_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PQ[b1] * QC_0)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PQ[b1] * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PQ[b1] * QC_1)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PQ[b1] * QC_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PQ[b1] * QC_1)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PQ[b1] * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1] * QC_1)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1] * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * 2.0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * 2.0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * 2.0)
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1])
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1])
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1])
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1])
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1])
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1])
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1])
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1])
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1])
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1])
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1])
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1])
                            + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                            + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0])
                            + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0])
                            + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                            + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                            + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                            + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0])
                            + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                            + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0])
                            + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0])
                            + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                            + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0])
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * 2.0)
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * 2.0)
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * 2.0)
                            + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1])
                            + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1])
                            + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1])
                            + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1])
                            + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1])
                            + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                            + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1])
                            + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1])
                            + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1])
                            + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1])
                            + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                            + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1])
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * 2.0)
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * 2.0)
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * 2.0)
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[a0] * QD_0)
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[a0] * QD_0)
                            + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[a0] * QD_0)
                            + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[a0] * QD_0)
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[a0] * QD_0)
                            + delta[a1][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[a0] * QD_0)
                            + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a0] * QD_1)
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a0] * QD_1)
                            + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QD_1)
                            + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QD_1)
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a0] * QD_1)
                            + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a0] * QD_1)
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0])
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0])
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0])
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0])
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0])
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0])
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0])
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0])
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0])
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0])
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0])
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0])
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * 2.0)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * 2.0)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * 2.0)
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1])
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1])
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b1])
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b1])
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1])
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b1])
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b1])
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b1])
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b1])
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b1])
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b1])
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b1])
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * 2.0)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * 2.0)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * 2.0)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[a1] * QD_0)
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[a1] * QD_0)
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[a1] * QD_0)
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[a1] * QD_0)
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[a1] * QD_0)
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[a1] * QD_0)
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a1] * QD_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a1] * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1] * QD_1)
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1] * QD_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a1] * QD_1)
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a1] * QD_1)
                            + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1])
                            + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1])
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * 2.0)
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * 2.0)
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * 2.0)
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] * (PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] * (PQ[b0] * QD_0)
                            + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] * (PQ[b0] * QD_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] * (PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] * (PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b1][c0] * (PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PQ[b0] * QD_1)
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PQ[b0] * QD_1)
                            + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0] * QD_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PQ[b0] * QD_1)
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PQ[b1] * QD_0)
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PQ[b1] * QD_0)
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PQ[b1] * QD_1)
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PQ[b1] * QD_1)
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1] * QD_1)
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD14(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[5];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[4] * (

                        0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b0] * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] + PB_1 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b1] * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] + PB_1 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b1] * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] + PB_1 * PA_1 * PQ[a0] * PQ[c0] + PA_0 * PA_1 * PQ[b1] * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b1] * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b1] * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[c1] + PA_0 * PA_1 * PQ[b1] * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[d0] + PA_0 * PA_1 * PQ[b1] * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b1] * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b1] * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[d1] + PA_0 * PA_1 * PQ[b1] * PQ[d1])
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c1])
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c1])
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c1])
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d1])
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d1])
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d1])
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1])
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1])
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[c1])
                            + delta[a1][c1] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][c1] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0])
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d0])
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1])
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[c1] * PQ[d1])
                            + delta[a1][c0] * delta[b1][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1])
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1])
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[c1])
                            + delta[a1][c1] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][c1] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PA_0 * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d0])
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d0])
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d1])
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[c1] * PQ[d1])
                            + delta[a1][c0] * delta[b0][c1] * (PB_1 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[b1] * PQ[c0] + PB_1 * PA_1 * PQ[b0] * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[b1] * PQ[c0] + PB_1 * PA_1 * PQ[b0] * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] + PB_0 * PA_1 * PQ[b1] * PQ[c0] + PB_1 * PA_1 * PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[b1] * PQ[c1] + PB_1 * PA_1 * PQ[b0] * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[b1] * PQ[c1] + PB_1 * PA_1 * PQ[b0] * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] + PB_0 * PA_1 * PQ[b1] * PQ[c1] + PB_1 * PA_1 * PQ[b0] * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] + PB_0 * PA_1 * PQ[b1] * PQ[d0] + PB_1 * PA_1 * PQ[b0] * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[b1] * PQ[d1] + PB_1 * PA_1 * PQ[b0] * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[b1] * PQ[d1] + PB_1 * PA_1 * PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] + PB_0 * PA_1 * PQ[b1] * PQ[d1] + PB_1 * PA_1 * PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1])
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[a1][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[a1][c0] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F8_t[4] * (

                        0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-2.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_1)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0)
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                            + delta[a1][b1] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a1][b1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[a1][b0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][c1] * delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QC_0)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[b0][b1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[a1][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[a1][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * 2.0 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * 2.0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * 2.0 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * 2.0 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * 2.0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * 2.0 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * 2.0 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * 2.0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * 2.0 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * 2.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD15(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[5];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[4] * (

                        0.25 * ( S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                            + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1)
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 + PQ[a0] * PQ[a1] * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 + PQ[a0] * PQ[a1] * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 + PQ[a0] * PQ[a1] * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * QC_0 * QC_1)
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QC_0 * QC_1)
                            + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0)
                            + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0)
                            + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_0)
                            + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * QD_1 * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * QD_0 * QC_1)
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_0 * QC_1)
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_1 * QC_1)
                            + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PQ[a0] * PQ[b0] * QC_0 * QC_1)
                            + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PQ[a0] * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * QD_0 * QC_1)
                            + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PQ[a0] * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * QD_1 * QC_1)
                            + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                            + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][d1] * delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][c1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][d0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_1)
                            + delta[a1][d1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QC_1)
                            + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_1)
                            + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_1 * QC_1)
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PQ[a0] * PQ[b1] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PQ[a0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PQ[a0] * PQ[b1] * QD_0 * QC_1)
                            + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PQ[a0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * QD_1 * QC_1)
                            + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * QC_0 * QC_1)
                            + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_1)
                            + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QC_1)
                            + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_1)
                            + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_1 * QC_1)
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QD_0 * QC_0)
                            + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_1)
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_1)
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PQ[a1] * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PQ[a1] * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PQ[a1] * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b1][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b1][c1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_1 * QC_1)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PQ[a1] * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PQ[a1] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PQ[a1] * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PQ[a1] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PQ[a1] * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[d0] * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QC_1 + PQ[a1] * PQ[c1] * QD_0 * QC_0 + PQ[a1] * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 + PQ[a1] * PQ[c1] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 + PQ[a1] * PQ[c1] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_1 * QC_1 + PQ[a1] * PQ[c1] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QD_0 * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[d1] * QD_0 * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_1)
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 + PQ[b1] * PQ[c1] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 + PQ[b1] * PQ[c1] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 + PQ[b1] * PQ[c1] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_1 + PQ[b1] * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_1 + PQ[b1] * PQ[d1] * QD_0 * QC_1)
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_1 + PQ[b1] * PQ[d1] * QD_0 * QC_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * QD_0 * QD_1)
                            + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1)
                            + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * QD_0 * QD_1)
                            + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD16(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[5];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[4] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PB_0 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PB_0 * PB_1 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F8_t[4] * (

                        0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD17(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[6];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[4] * (

                        0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    )

                    +

                    F8_t[4] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    +

                    F8_t[4] * (

                        0.0625 / ( S4 * S4 * S4 * S4 ) * (
                            delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1]
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * delta[b1][d1]
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * delta[b1][d0]
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1]
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * delta[b1][d1]
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * delta[b1][c1]
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0]
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * delta[b1][d0]
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * delta[b1][c1]
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1]
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1]
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0]
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * delta[d0][d1]
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * delta[c1][d1]
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * delta[c1][d0]
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1]
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * delta[b1][d1]
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * delta[b1][d0]
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1]
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * delta[b1][d1]
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * delta[b1][c0]
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0]
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * delta[b1][d0]
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * delta[b1][c0]
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1]
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1]
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0]
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * delta[d0][d1]
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * delta[c0][d1]
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * delta[c0][d0]
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1]
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * delta[b1][d1]
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * delta[b1][c1]
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1]
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * delta[b1][d1]
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * delta[b1][c0]
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1]
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * delta[b1][c1]
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * delta[b1][c0]
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1]
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1]
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1]
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * delta[c1][d1]
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * delta[c0][d1]
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * delta[c0][c1]
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0]
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * delta[b1][d0]
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * delta[b1][c1]
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0]
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * delta[b1][d0]
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * delta[b1][c0]
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1]
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * delta[b1][c1]
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * delta[b1][c0]
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0]
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0]
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1]
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * delta[c1][d0]
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * delta[c0][d0]
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * delta[c0][c1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1]
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1]
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0]
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1]
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1]
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0]
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1]
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1]
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1]
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0]
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0]
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1]
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * delta[d0][d1]
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * delta[c1][d1]
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * delta[c1][d0]
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * delta[d0][d1]
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * delta[c1][d1]
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * delta[c1][d0]
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * delta[d0][d1]
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * delta[c0][d1]
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * delta[c0][d0]
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * delta[d0][d1]
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * delta[c0][d1]
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * delta[c0][d0]
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * delta[c1][d1]
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * delta[c0][d1]
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * delta[c0][c1]
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * delta[c1][d1]
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * delta[c0][d1]
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * delta[c0][c1]
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * delta[c1][d0]
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * delta[c0][d0]
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * delta[c0][c1]
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * delta[c1][d0]
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * delta[c0][d0]
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * delta[c0][c1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * delta[c0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * delta[c0][d1]
                        )

                    )

                    +

                    F8_t[5] * (

                        ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD18(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[6];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[5] * (

                        ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F8_t[5] * (

                        ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[5] * (

                        ( S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F8_t[5] * (

                        0.125 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b1][c0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[a1][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[a1][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[a1][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[a1][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * delta[a0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[a1][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[a1][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * delta[b0][c1] * delta[a0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * delta[a0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD19(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[6];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[5] * (

                        0.25 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d1])
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * PQ[d1])
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a1][c1] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][c1] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a1][c0] * delta[b1][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a1][c1] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][c1] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a1][c0] * delta[b0][c1] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-2.0))
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[a1][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[a1][c0] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F8_t[5] * (

                        0.25 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD20(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[6];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[5] * (

                        0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F8_t[5] * (

                        0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD21(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[7];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[5] * (

                        0.5 * ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F8_t[6] * (

                        ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F8_t[6] * (

                        ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD22(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[7];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[6] * (

                        ( S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F8_t[6] * (

                        0.5 * ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD23(double*         mat_J,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F8_t[9];

            gpu::computeBoysFunctionEriJ(F8_t, S1 * S2 / S4 * r2_PQ, 8, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[6] * (

                        0.5 * ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F8_t[6] * (

                        0.25 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1])
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                            + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1])
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a1][c1] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][c1] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a1][c0] * delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a1][c1] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a1][c1] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a1][c0] * delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a1][c1] * delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[a1][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b1][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b1][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b1][c0] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b0][c0] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][c1] * delta[b0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[a0][b1] * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[a1][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[a1][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][c1] * delta[a1][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][c1] * delta[a1][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a1][c1] * delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F8_t[7] * (

                        ( S1 * S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F8_t[7] * (

                        ( S1 * S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F8_t[7] * (

                        0.5 * ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F8_t[8] * (

                        ( S1 * S1 * S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPP0(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pp_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pp_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pp_first_inds,
                       const uint32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const uint32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pp_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pp_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pp_mat_Q[kl] * pp_mat_D[kl]) > eri_threshold))
        {
            const auto k = pp_first_inds[kl];
            const auto l = pp_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = pp_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[3];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[0] * (

                        0.25 / ( S1 * S1 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QC_0)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QC_0)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QC_0)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QC_0)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QC_0)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QC_0)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QC_0)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S2 * (
                            delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QC_0
                        )

                    )

                    +

                    F6_t[0] * (

                        0.125 / ( S1 * S1 * S2 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][d0]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0]
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (-2.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S1 * S2 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 * S2 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QC_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QC_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QC_0 * (-2.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0)
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0)
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * QC_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * QC_0)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0)
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0)
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0)
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PA_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[a0] * QD_0 * QC_0)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QC_0 + PA_1 * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 / S4 * (
                            delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * QD_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * QD_0)
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * QC_0)
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * QD_0)
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * QD_0)
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QC_0
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QC_0
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QC_0
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QC_0
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[c0] * PQ[d0]
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QC_0
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QC_0
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QC_0
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QC_0
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QC_0
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QC_0)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QC_0)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QC_0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1)
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PA_1)
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PA_1)
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PA_0)
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PA_0)
                            + delta[a1][b1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PB_0 * PA_0)
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PA_0)
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PA_0)
                            + delta[a1][b0] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PA_1)
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PA_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PB_0 * PA_1)
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PA_1)
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PA_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PB_1)
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PB_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0])
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QC_0)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_0)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * QD_0 * QC_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pp_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPP1(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pp_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pp_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* pp_first_inds,
                       const uint32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const uint32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pp_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < pp_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * pp_mat_Q[kl] * pp_mat_D[kl]) > eri_threshold))
        {
            const auto k = pp_first_inds[kl];
            const auto l = pp_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = pp_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[7];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0))
                            + delta[a1][c0] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b0] * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * QC_0 + PB_1 * PA_1 * PQ[a0] * QC_0 + PA_0 * PA_1 * PQ[b1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * QD_0 + PB_1 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b1] * QD_0)
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0)
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_0)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * QC_0 + PB_0 * PA_1 * PQ[b1] * QC_0 + PB_1 * PA_1 * PQ[b0] * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_1 * PQ[b0] * QD_0)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_1 * PQ[c0] * QD_0 + PB_0 * PA_1 * PQ[d0] * QC_0)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_1 * PQ[c0] * QD_0 + PB_1 * PA_1 * PQ[d0] * QC_0)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 * S2 / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[c0][d0]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0]
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0]
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 / ( S1 * S4 * S4 ) * (
                            delta[a0][c0] * delta[a1][d0] * delta[b0][b1]
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0]
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1]
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0]
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1]
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * 2.0
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0]
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0]
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0]
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1]
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0]
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1]
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * 2.0
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * 2.0
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[c0] * PQ[d0]
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[c0] * PQ[d0]
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0]
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0]
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QC_0
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QC_0
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0
                        )

                    )

                    +

                    F6_t[3] * (

                        0.125 * S2 / ( S1 * S4 * S4 * S4 ) * (
                            delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * (-1.0)
                            + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * (-1.0)
                            + delta[a0][c0] * delta[b0][d0] * delta[a1][b1] * (-1.0)
                            + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * (-1.0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * (-1.0)
                            + delta[a0][d0] * delta[b0][c0] * delta[a1][b1] * (-1.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * (-1.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * (-1.0)
                            + delta[a1][c0] * delta[a0][b0] * delta[b1][d0] * (-1.0)
                            + delta[a1][c0] * delta[b0][d0] * delta[a0][b1] * (-1.0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][c0] * (-1.0)
                            + delta[a1][d0] * delta[b0][c0] * delta[a0][b1] * (-1.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * (-1.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * S2 / ( S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[a1][c0] * delta[b1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d0] * delta[b1][c0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][c0] * delta[b0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d0] * delta[b0][c0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[c0])
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[c0])
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[c0])
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[c0])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[c0])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[c0])
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[d0])
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[d0])
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[d0])
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[c0])
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[c0])
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[c0])
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[c0])
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[c0])
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[c0])
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0] * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0] * (-2.0))
                            + delta[a0][c0] * delta[a1][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d0] * delta[a1][c0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a1][c0] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QC_0 + PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0)
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0]
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0]
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0]
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0]
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0]
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QC_0
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][c0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0)
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                        )

                    )

                    +

                    F6_t[4] * (

                        0.25 * ( S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1])
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[a1])
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[a1])
                            + delta[a1][c0] * delta[b1][d0] * (PQ[a0] * PQ[b0])
                            + delta[a1][d0] * delta[b1][c0] * (PQ[a0] * PQ[b0])
                            + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                            + delta[a1][c0] * delta[b0][d0] * (PQ[a0] * PQ[b1])
                            + delta[a1][d0] * delta[b0][c0] * (PQ[a0] * PQ[b1])
                            + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[c0])
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[c0])
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[c0])
                            + delta[a1][c0] * delta[b0][b1] * (PQ[a0] * PQ[d0])
                            + delta[a1][b0] * delta[b1][c0] * (PQ[a0] * PQ[d0])
                            + delta[b0][c0] * delta[a1][b1] * (PQ[a0] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PQ[a1] * PQ[b0])
                            + delta[a0][d0] * delta[b1][c0] * (PQ[a1] * PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0])
                            + delta[a0][c0] * delta[b0][d0] * (PQ[a1] * PQ[b1])
                            + delta[a0][d0] * delta[b0][c0] * (PQ[a1] * PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[c0])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[c0])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[c0])
                            + delta[a0][c0] * delta[b0][b1] * (PQ[a1] * PQ[d0])
                            + delta[a0][b0] * delta[b1][c0] * (PQ[a1] * PQ[d0])
                            + delta[b0][c0] * delta[a0][b1] * (PQ[a1] * PQ[d0])
                            + delta[a0][c0] * delta[a1][d0] * (PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[a1][c0] * (PQ[b0] * PQ[b1])
                            + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[c0])
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[c0])
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[a1][b1] * (PQ[b0] * PQ[d0])
                            + delta[a0][a1] * delta[b1][c0] * (PQ[b0] * PQ[d0])
                            + delta[a1][c0] * delta[a0][b1] * (PQ[b0] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[c0])
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[c0])
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[a1][b0] * (PQ[b1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][c0] * (PQ[b1] * PQ[d0])
                            + delta[a1][c0] * delta[a0][b0] * (PQ[b1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[a1][b1] * (PQ[c0] * PQ[d0])
                            + delta[a1][b0] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0]
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0]
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[5] * (

                        0.5 * ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                        )

                    )

                    +

                    F6_t[6] * (

                        ( S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pp_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDSD0(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   sd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* sd_first_inds,
                       const uint32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const uint32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < sd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * sd_mat_Q[kl] * sd_mat_D[kl]) > eri_threshold))
        {
            const auto k = sd_first_inds[kl];
            const auto l = sd_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = sd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[3];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QD_1)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QD_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QD_1)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QD_1)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * QD_0 * QD_1
                        )

                    )

                    +

                    F6_t[0] * (

                        0.125 / ( S1 * S1 * S2 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1]
                        )

                    )

                    +

                    F6_t[0] * (

                        0.25 / ( S1 * S1 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (-2.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (-2.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (-2.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S1 * S2 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 * S2 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1 * (-2.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * QD_0)
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * QD_0)
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * QD_0)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * QD_1)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * QD_1)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * QD_0)
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * QD_0)
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * QD_0)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * QD_1)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * QD_1)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * QD_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * QD_0)
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * QD_0)
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * QD_0)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * QD_1)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * QD_1)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * QD_1)
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * QD_0)
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * QD_0)
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * QD_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * QD_1)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * QD_1)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * QD_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PA_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PA_1 * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PA_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] + PB_0 * PB_1 * PA_1 * PQ[a0] + PB_0 * PA_0 * PA_1 * PQ[b1] + PB_1 * PA_0 * PA_1 * PQ[b0])
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * QD_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * QD_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * QD_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * QD_1)
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * QD_0)
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * QD_1)
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * QD_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * QD_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0 * QD_1
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0 * QD_1
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PQ[a0] * PQ[b0])
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PQ[a0] * PQ[b1])
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PQ[a1] * PQ[b0])
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PQ[a1] * PQ[b1])
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PA_1)
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PA_1)
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PA_0)
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PA_0)
                            + delta[a1][b1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0) + PB_0 * PA_0)
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PA_0)
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PA_0)
                            + delta[a1][b0] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0)
                            + delta[a1][d1] * delta[b0][b1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PA_1)
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PA_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[a1] * (-1.0) + PA_1 * PQ[b0] * (-1.0) + PB_0 * PA_1)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PA_1)
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PA_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[a1] * (-1.0) + PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_1)
                            + delta[a0][d1] * delta[b0][b1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1)
                            + delta[a0][d1] * delta[a1][b1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PB_1)
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PB_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[a1] * (-1.0) + PB_0 * PB_1 * PA_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PA_1 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PA_1 * PQ[b0] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PA_1 * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1 * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PB_1 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1 * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDSD1(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   sd_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* sd_first_inds,
                       const uint32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const uint32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < sd_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * sd_mat_Q[kl] * sd_mat_D[kl]) > eri_threshold))
        {
            const auto k = sd_first_inds[kl];
            const auto l = sd_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = sd_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[7];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] + PB_0 * PA_0 * PQ[a1] * PQ[b1] + PB_0 * PA_1 * PQ[a0] * PQ[b1] + PB_1 * PA_0 * PQ[a1] * PQ[b0] + PB_1 * PA_1 * PQ[a0] * PQ[b0] + PA_0 * PA_1 * PQ[b0] * PQ[b1])
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b0] * QD_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b0] * QD_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * QD_0 + PB_1 * PA_1 * PQ[a0] * QD_0 + PA_0 * PA_1 * PQ[b1] * QD_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * QD_1 + PB_1 * PA_1 * PQ[a0] * QD_1 + PA_0 * PA_1 * PQ[b1] * QD_1)
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0)
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QD_0)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[d1] * QD_0)
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * QD_0 + PB_0 * PA_1 * PQ[b1] * QD_0 + PB_1 * PA_1 * PQ[b0] * QD_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * QD_1 + PB_0 * PA_1 * PQ[b1] * QD_1 + PB_1 * PA_1 * PQ[b0] * QD_1)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_1 * PQ[d0] * QD_1 + PB_0 * PA_1 * PQ[d1] * QD_0)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_1 * PQ[d0] * QD_1 + PB_1 * PA_1 * PQ[d1] * QD_0)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 * S2 / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * delta[d0][d1]
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1]
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1]
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 / ( S1 * S4 * S4 ) * (
                            delta[a0][d0] * delta[a1][d1] * delta[b0][b1]
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1]
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1]
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0]
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1]
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * 2.0
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1]
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0]
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1]
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1]
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0]
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1]
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * 2.0
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * 2.0
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * QD_1)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * QD_1)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * PQ[d1]
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * PQ[d1]
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1]
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        )

                    )

                    +

                    F6_t[3] * (

                        0.125 * S2 / ( S1 * S4 * S4 * S4 ) * (
                            delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * (-1.0)
                            + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][d1] * delta[a1][b1] * (-1.0)
                            + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * (-1.0)
                            + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * (-1.0)
                            + delta[a0][d1] * delta[b0][d0] * delta[a1][b1] * (-1.0)
                            + delta[a0][a1] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * (-1.0)
                            + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * (-1.0)
                            + delta[a1][d0] * delta[a0][b0] * delta[b1][d1] * (-1.0)
                            + delta[a1][d0] * delta[b0][d1] * delta[a0][b1] * (-1.0)
                            + delta[a1][d1] * delta[a0][b0] * delta[b1][d0] * (-1.0)
                            + delta[a1][d1] * delta[b0][d0] * delta[a0][b1] * (-1.0)
                            + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] * (-1.0)
                            + delta[a1][b0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0))
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * QD_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * S2 / ( S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                            + delta[a1][d0] * delta[b1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d1] * delta[b1][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0) + PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[a1][d0] * delta[b0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d1] * delta[b0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[d1])
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[d1])
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[d1])
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0) + PB_0 * PQ[a1] + PA_1 * PQ[b0])
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] + PA_1 * PQ[b1])
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[d1])
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[d1])
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[d1])
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[d1])
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * PQ[d1] * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * PQ[d1] * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * PQ[d1] * (-2.0))
                            + delta[a0][d0] * delta[a1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d1] * delta[a1][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-1.0) + PB_0 * PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PA_1 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0)
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1)
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0)
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1]
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1]
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1]
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1]
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1]
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                            + delta[a1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[4] * (

                        0.25 * ( S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1])
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[a1])
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[a1])
                            + delta[a1][d0] * delta[b1][d1] * (PQ[a0] * PQ[b0])
                            + delta[a1][d1] * delta[b1][d0] * (PQ[a0] * PQ[b0])
                            + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                            + delta[a1][d0] * delta[b0][d1] * (PQ[a0] * PQ[b1])
                            + delta[a1][d1] * delta[b0][d0] * (PQ[a0] * PQ[b1])
                            + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1])
                            + delta[a1][d1] * delta[b0][b1] * (PQ[a0] * PQ[d0])
                            + delta[a1][b0] * delta[b1][d1] * (PQ[a0] * PQ[d0])
                            + delta[b0][d1] * delta[a1][b1] * (PQ[a0] * PQ[d0])
                            + delta[a1][d0] * delta[b0][b1] * (PQ[a0] * PQ[d1])
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * PQ[d1])
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * PQ[d1])
                            + delta[a0][d0] * delta[b1][d1] * (PQ[a1] * PQ[b0])
                            + delta[a0][d1] * delta[b1][d0] * (PQ[a1] * PQ[b0])
                            + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0])
                            + delta[a0][d0] * delta[b0][d1] * (PQ[a1] * PQ[b1])
                            + delta[a0][d1] * delta[b0][d0] * (PQ[a1] * PQ[b1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1])
                            + delta[a0][d1] * delta[b0][b1] * (PQ[a1] * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PQ[a1] * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PQ[a1] * PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * PQ[d1])
                            + delta[a0][d0] * delta[a1][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[a1][d0] * (PQ[b0] * PQ[b1])
                            + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[a1][b1] * (PQ[b0] * PQ[d0])
                            + delta[a0][a1] * delta[b1][d1] * (PQ[b0] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b1] * (PQ[b0] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * PQ[d1])
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * PQ[d1])
                            + delta[a0][d1] * delta[a1][b0] * (PQ[b1] * PQ[d0])
                            + delta[a0][a1] * delta[b0][d1] * (PQ[b1] * PQ[d0])
                            + delta[a1][d1] * delta[a0][b0] * (PQ[b1] * PQ[d0])
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * PQ[d1])
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * PQ[d1])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * PQ[d1])
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0)
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1]
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1]
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F6_t[5] * (

                        0.5 * ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[6] * (

                        ( S1 * S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDSP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sp_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   sp_mat_Q,
                       const uint32_t* dd_first_inds_local,
                       const uint32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const uint32_t  dd_prim_pair_count_local,
                       const uint32_t* sp_first_inds,
                       const uint32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const uint32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1][TILE_DIM_SMALL];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < dd_prim_pair_count_local)
    {
        i = dd_first_inds_local[ij];
        j = dd_second_inds_local[ij];

        a_i = d_prim_info[i / 6 + d_prim_count * 0];

        r_i[0] = d_prim_info[i / 6 + d_prim_count * 2];
        r_i[1] = d_prim_info[i / 6 + d_prim_count * 3];
        r_i[2] = d_prim_info[i / 6 + d_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = dd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sp_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const uint32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((kl < sp_prim_pair_count) && (ij < dd_prim_pair_count_local) && (fabs(dd_mat_Q_local[ij] * sp_mat_Q[kl] * sp_mat_D[kl]) > eri_threshold))
        {
            const auto k = sp_first_inds[kl];
            const auto l = sp_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = sp_pair_data[kl];

            const auto a0 = d_cart_inds[i % 6][0];
            const auto a1 = d_cart_inds[i % 6][1];
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F5_t[6];

            gpu::computeBoysFunctionEriJ(F5_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PA_1 = (a_j / S1) * rij[a1];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F5_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0)
                        )

                    )

                    +

                    F5_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * QD_0
                        )

                    )

                    +

                    F5_t[0] * (

                        0.25 / ( S1 * S1 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 * S2 / ( S1 * S1 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0 * (-2.0))
                            + delta[a0][b0] * delta[a1][b1] * (QD_0 * (-2.0))
                            + delta[a1][b0] * delta[a0][b1] * (QD_0 * (-2.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[a1][d0] * delta[b0][b1] * (PA_0)
                            + delta[a1][b0] * delta[b1][d0] * (PA_0)
                            + delta[b0][d0] * delta[a1][b1] * (PA_0)
                            + delta[a0][d0] * delta[b0][b1] * (PA_1)
                            + delta[a0][b0] * delta[b1][d0] * (PA_1)
                            + delta[b0][d0] * delta[a0][b1] * (PA_1)
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PB_0)
                            + delta[a0][a1] * delta[b1][d0] * (PB_0)
                            + delta[a1][d0] * delta[a0][b1] * (PB_0)
                            + delta[a0][d0] * delta[a1][b0] * (PB_1)
                            + delta[a0][a1] * delta[b0][d0] * (PB_1)
                            + delta[a1][d0] * delta[a0][b0] * (PB_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PA_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                            + delta[a1][b1] * (PB_0 * PA_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[a1][b0] * (PB_1 * PA_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[a0][b1] * (PB_0 * PA_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 + PA_1 * PQ[b0] * QD_0)
                            + delta[a0][b0] * (PB_1 * PA_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 + PA_1 * PQ[b1] * QD_0)
                            + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 / S4 * (
                            delta[b1][d0] * (PB_0 * PA_0 * PA_1)
                            + delta[b0][d0] * (PB_1 * PA_0 * PA_1)
                            + delta[b0][b1] * (PA_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a1][d0] * (PB_0 * PB_1 * PA_0)
                            + delta[a1][b1] * (PB_0 * PA_0 * PQ[d0] * (-1.0))
                            + delta[a1][b0] * (PB_1 * PA_0 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PA_1)
                            + delta[a0][b1] * (PB_0 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][b0] * (PB_1 * PA_1 * PQ[d0] * (-1.0))
                            + delta[a0][a1] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PA_1 * PQ[d0] * (-1.0)
                        )

                    )

                    +

                    F5_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * QD_0
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * QD_0
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * QD_0
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * QD_0
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[a1] * PQ[d0] * (-1.0)
                            + PB_0 * PB_1 * PA_1 * PQ[a0] * PQ[d0] * (-1.0)
                            + PB_0 * PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0)
                            + PB_1 * PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0)
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * QD_0
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * QD_0
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * QD_0
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * QD_0
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[a1][d0] * delta[b0][b1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a1][b0] * delta[b1][d0] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][d0] * delta[a1][b1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a0][d0] * delta[b0][b1] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[a0][b0] * delta[b1][d0] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[b0][d0] * delta[a0][b1] * (PA_1 * (-1.0) + PQ[a1])
                            + delta[a0][d0] * delta[a1][b1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][a1] * delta[b1][d0] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a1][d0] * delta[a0][b1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][d0] * delta[a1][b0] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][a1] * delta[b0][d0] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a1][d0] * delta[a0][b0] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * 2.0)
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * 2.0)
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * 2.0)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0)
                            + delta[a1][b1] * (PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0)
                            + delta[a1][b0] * (PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0)
                            + delta[a0][b1] * (PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0)
                            + delta[a0][b0] * (PB_1 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0)
                            + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[b1][d0] * (PB_0 * PA_0 * PQ[a1] + PB_0 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b0])
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[a1] + PB_1 * PA_1 * PQ[a0] + PA_0 * PA_1 * PQ[b1])
                            + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[d0])
                            + delta[a1][d0] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[a1][b1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[d0])
                            + delta[a1][b0] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[a1] + PB_0 * PA_1 * PQ[b1] + PB_1 * PA_1 * PQ[b0])
                            + delta[a0][b1] * (PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PA_1 * PQ[d0])
                            + delta[a0][b0] * (PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PA_1 * PQ[d0])
                            + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[d0])
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S1 * S4 * S4 ) * (
                            delta[a0][a1] * delta[b0][b1] * (QD_0)
                            + delta[a0][b0] * delta[a1][b1] * (QD_0)
                            + delta[a1][b0] * delta[a0][b1] * (QD_0)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0)
                            + PB_0 * PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0)
                            + PB_0 * PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0)
                            + PB_1 * PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0)
                            + PB_1 * PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0)
                            + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0
                        )

                    )

                    +

                    F5_t[3] * (

                        0.25 * ( S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[a1][d0] * delta[b0][b1] * (PQ[a0] * (-1.0))
                            + delta[a1][b0] * delta[b1][d0] * (PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[a1][b1] * (PQ[a0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[a1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[a1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[a1] * (-1.0))
                            + delta[a0][d0] * delta[a1][b1] * (PQ[b0] * (-1.0))
                            + delta[a0][a1] * delta[b1][d0] * (PQ[b0] * (-1.0))
                            + delta[a1][d0] * delta[a0][b1] * (PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[a1][b0] * (PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[b0][d0] * (PQ[b1] * (-1.0))
                            + delta[a1][d0] * delta[a0][b0] * (PQ[b1] * (-1.0))
                            + delta[a0][a1] * delta[b0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[a1][b1] * (PQ[d0] * (-1.0))
                            + delta[a1][b0] * delta[a0][b1] * (PQ[d0] * (-1.0))
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[b1][d0] * (PB_0 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0])
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[a1] + PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1])
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                            + delta[a1][d0] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0] + PA_1 * PQ[b0] * PQ[b1])
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[b0] * PQ[d0])
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] + PA_1 * PQ[b1] * PQ[d0])
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S1 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0)
                            + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0)
                            + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0)
                            + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0)
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0
                        )

                    )

                    +

                    F5_t[4] * (

                        0.5 * ( S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0])
                            + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1])
                            + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0])
                            + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0])
                            + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1])
                            + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0])
                            + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0])
                            + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0])
                        )

                    )

                    +

                    F5_t[5] * (

                        ( S1 * S2 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sp_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM_LARGE; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD0(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[2];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[0] * (

                        0.125 / ( S1 * S2 * S2 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0)
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0)
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1)
                        )

                    )

                    +

                    F7_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * QC_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * QD_1)
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F7_t[0] * (

                        0.25 / ( S2 * S2 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0)
                        )

                    )

                    +

                    F7_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    +

                    F7_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * QD_0 * QD_1)
                        )

                    )

                    +

                    F7_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F7_t[1] * (

                        0.125 / ( S1 * S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (QC_0)
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (QC_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (QC_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (QC_0)
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (QC_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (QC_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (QC_0)
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (QC_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (QC_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (QC_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (QC_1)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (QC_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (QC_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (QC_1)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (QC_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (QC_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (QC_1)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (QC_1)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (QD_0)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (QD_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (QD_0)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (QD_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (QD_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (QD_0)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (QD_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (QD_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (QD_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (QD_1)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (QD_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (QD_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (QD_1)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (QD_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (QD_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (QD_1)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (QD_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (QD_1)
                        )

                    )

                    +

                    F7_t[1] * (

                        0.125 / ( S2 * S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-2.0))
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-2.0))
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-2.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-2.0))
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-2.0))
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-2.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * (-2.0))
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * (-2.0))
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * (-2.0))
                        )

                    )

                    +

                    F7_t[1] * (

                        0.25 * S1 / ( S2 * S2 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0 * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0 * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0 * (-2.0))
                        )

                    )

                    +

                    F7_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (QD_0 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * (QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (QD_0 * QD_1 * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (QD_0 * QD_1 * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1 * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1 * QC_1)
                        )

                    )

                    +

                    F7_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * QC_1)
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * QD_1)
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * QC_1)
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * QD_1)
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PA_0 * QC_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PA_0 * QD_0 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PA_0 * QD_1 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PA_0 * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PA_0 * QD_1 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PA_0 * QD_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * QC_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_1 * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_1 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_1 * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_1 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_1 * QD_0 * QD_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * QD_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD1(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[3];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    +

                    F7_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 * QC_0 + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 * QC_1 + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[b1][d1] * (PB_0 * PA_0 * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PB_0 * PA_0 * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PB_1 * PA_0 * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PB_0 * PB_1 * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F7_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F7_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F7_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F7_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                            + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F7_t[2] * (

                        0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0)
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0)
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.125 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (QD_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (QD_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (QD_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (QD_1 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (QD_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[2] * (

                        0.125 / ( S2 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0)
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0)
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0)
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0)
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0)
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0)
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0)
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0)
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0)
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0)
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0)
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0)
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[b1] * (-2.0) + PB_1 * 2.0)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[b1] * (-2.0) + PB_1 * 2.0)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[b1] * (-2.0) + PB_1 * 2.0)
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0)
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0)
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0)
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0)
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0)
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0)
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0)
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0)
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0)
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0)
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0)
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0)
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1)
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1)
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1)
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1)
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1)
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1)
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1)
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1)
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1)
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD2(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[4];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[2] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PA_0)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PA_0)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PA_0)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[b0] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[b0] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * (-2.0) + PB_0 * PA_0 * PQ[b1] * (-2.0) + PB_1 * PA_0 * PQ[b0] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * (-1.0) + PB_0 * PA_0 * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PA_0 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PA_0 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_1 * PA_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_1 * PA_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_1 * PA_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1] * (-1.0) + PB_1 * PA_0 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PA_0 * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PA_0 * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_1 * PA_0 * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_1 * PA_0 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_1 * PA_0 * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_1 * PA_0 * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] + PB_1 * PQ[c1] * QD_1 + PB_1 * PQ[d1] * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * QD_1 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QD_1 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * QC_1 + PA_0 * PQ[b0] * QC_1)
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * QC_1 + PA_0 * PQ[b1] * QC_1)
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0 + PA_0 * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0 + PA_0 * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0 + PA_0 * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1 + PA_0 * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1 + PA_0 * QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0 + PA_0 * QD_0 * QD_1)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * QC_0 * QC_1)
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * QC_0 * QC_1)
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * QD_0 * QC_0)
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * QD_0 * QC_0)
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * QD_1 * QC_0)
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * QD_1 * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * QD_0 * QC_1)
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * QD_0 * QC_1)
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * QD_1 * QC_1)
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * QD_0 * QD_1)
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * QD_0 * QD_1)
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0 + PB_0 * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0 + PB_0 * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1 + PB_0 * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0 + PB_0 * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1 + PB_0 * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * QD_1 * QC_1)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0 + PB_1 * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0 + PB_1 * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1 + PB_1 * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0 + PB_1 * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 + PB_1 * PQ[d1] * QC_1 + PB_1 * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * QD_1 * QC_1)
                            + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0 + PB_0 * QD_0 * QD_1)
                            + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0 + PB_1 * QD_0 * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * QD_0 * QD_1)
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PA_0 * PQ[c0] * QC_1 + PB_0 * PB_1 * PA_0 * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_0 + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[c1] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    )

                    +

                    F7_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                            + delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_0 * QC_1 + PA_0 * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_0 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_0 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_0 * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 + PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 + PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 + PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1)
                        )

                    )

                    +

                    F7_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F7_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F7_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F7_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F7_t[3] * (

                        0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PA_0 * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PA_0 * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PA_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PA_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PA_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PA_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PA_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PA_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PA_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PA_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PA_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PA_0 * (-1.0))
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PB_0 * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PB_0 * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PB_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PB_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PB_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PB_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PB_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PB_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PB_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PB_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PB_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PB_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PB_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PB_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PB_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PB_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PB_1 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PB_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PB_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PB_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PB_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PB_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PB_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PB_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[c0])
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0])
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[c0])
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[c0])
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[c0])
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0])
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[c0])
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[c1])
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[c1])
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1])
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[c1])
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[c1])
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[c1])
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[c1])
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1])
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[c1])
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[d0])
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0])
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[d0])
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[d0])
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[d0])
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[d0])
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[d1])
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1])
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[d1])
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[d1])
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[d1])
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[d1])
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD3(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[4];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[3] * (

                        0.125 / ( S4 * S4 * S4 ) * (
                            delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] + QC_0)
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (QC_0)
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (QC_0)
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] + QC_0)
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (QC_0)
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (QC_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] + QC_0)
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (QC_0)
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (QC_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[c0] + QC_0)
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[c0] + QC_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[c0] + QC_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] + QC_0)
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] + QC_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] + QC_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[c1] + QC_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (QC_1)
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (QC_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] + QC_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (QC_1)
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (QC_1)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] + QC_1)
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (QC_1)
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (QC_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[c1] + QC_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[c1] + QC_1)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[c1] + QC_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[c1] + QC_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] + QC_1)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] + QC_1)
                            + delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * 2.0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * 2.0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * 2.0)
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0])
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0])
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0])
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0])
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0])
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0])
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0])
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0])
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0])
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0])
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0])
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0])
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[b0])
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[b0])
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[b0])
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0])
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0])
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0])
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[b0])
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[b0])
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[b0])
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0])
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0])
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0])
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * 2.0)
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * 2.0)
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * 2.0)
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[b1])
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[b1])
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[b1])
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1])
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1])
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1])
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[b1])
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[b1])
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[b1])
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1])
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1])
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1])
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[b1] * 2.0)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[b1] * 2.0)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[b1] * 2.0)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[d0] + QD_0)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] + QD_0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] + QD_0)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[d0] + QD_0)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[d0] + QD_0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[d0] + QD_0)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[d0] + QD_0)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] + QD_0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] + QD_0)
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[d1] + QD_1)
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] + QD_1)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[d1] + QD_1)
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[d1] + QD_1)
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[d1] + QD_1)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[d1] + QD_1)
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[d1] + QD_1)
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] + QD_1)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[d1] + QD_1)
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (QD_0)
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (QD_0)
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (QD_0)
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (QD_0)
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (QD_0)
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (QD_0)
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (QD_1)
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (QD_1)
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (QD_1)
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (QD_1)
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (QD_1)
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (QD_1)
                        )

                    )

                    +

                    F7_t[3] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PA_0 * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PA_0 * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PA_0 * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PA_0 * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PA_0 * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PA_0 * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PA_0 * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PA_0 * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PA_0 * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PA_0 * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PA_0 * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PA_0 * PQ[d1])
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PB_1 * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PB_1 * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d1])
                        )

                    )

                    +

                    F7_t[3] * (

                        0.25 * S1 / ( S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                            + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                            + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] + PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0)
                            + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] + PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] + PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] + PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] + PQ[b1] * PQ[c1] * QD_1 + PQ[b1] * PQ[d1] * QC_1)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] + PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                        )

                    )

                    +

                    F7_t[3] * (

                        0.25 * S2 / ( S4 * S4 * S4 ) * (
                            delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QC_1)
                            + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1] * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QC_1)
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0 + PQ[a0] * QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0 + PQ[a0] * QD_0 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1 + PQ[a0] * QD_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0 + PQ[a0] * QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1 + PQ[a0] * QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * QC_0 * QC_1)
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * QC_0 * QC_1)
                            + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * QD_0 * QC_0)
                            + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * QD_0 * QC_0)
                            + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * QD_1 * QC_0)
                            + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * QD_1 * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * QD_0 * QC_1)
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * QD_0 * QC_1)
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QD_1 * QC_1)
                            + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QC_1)
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0 + PQ[b0] * QC_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0 + PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1 + PQ[b0] * QD_0 * QC_1)
                            + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0 + PQ[b0] * QD_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1 + PQ[b0] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b1][d1] * (PQ[b0] * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b1][c1] * (PQ[b0] * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b1][d0] * (PQ[b0] * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b1][c1] * (PQ[b0] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * QD_1 * QC_1)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0 + PQ[b1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0 + PQ[b1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1 + PQ[b1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0 + PQ[b1] * QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * QD_1 + PQ[b1] * PQ[d1] * QC_1 + PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * QC_0 * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][d1] * (PQ[b1] * QD_0 * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * (PQ[b1] * QD_0 * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * (PQ[b1] * QD_1 * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * (PQ[b1] * QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * QD_0 * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * QD_0 * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * QD_1 * QC_1)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 * QC_1 + PQ[c1] * QD_0 * QC_0 + PQ[d0] * QC_0 * QC_1)
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 * QC_1 + PQ[c1] * QD_1 * QC_0 + PQ[d1] * QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                            + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                            + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                            + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                            + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_1 + PQ[d1] * QD_0 * QC_1)
                            + delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_1)
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * QD_1)
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0 + PQ[a0] * QD_0 * QD_1)
                            + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * QD_0 * QD_1)
                            + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * QD_0 * QD_1)
                            + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0 + PQ[b0] * QD_0 * QD_1)
                            + delta[a0][c0] * delta[b1][c1] * (PQ[b0] * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b1][c0] * (PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0 + PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c0] * delta[b0][c1] * (PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * (PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    +

                    F7_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0)
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PA_0 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PA_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PA_0 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F7_t[3] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD4(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[5];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    )

                    +

                    F7_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    +

                    F7_t[4] * (

                        ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F7_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F7_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F7_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F7_t[4] * (

                        0.125 * S1 / ( S4 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[a0] * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[a0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[a0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[a0] * (-1.0))
                            + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] * (PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] * (PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] * (PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * delta[c0][c1] * (PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] * (PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c1] * (PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c1][d1] * (PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c1][d0] * (PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] * (PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] * (PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] * (PQ[c1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] * (PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] * (PQ[c1] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0] * (PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (PQ[c1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (PQ[c1] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (PQ[c1] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] * (PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] * (PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d1] * (PQ[d0] * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][c1] * (PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] * (PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] * (PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] * (PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] * (PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * delta[b1][c0] * (PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * delta[c1][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] * (PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * delta[c1][d0] * (PQ[d1] * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][c1] * (PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F7_t[4] * (

                        0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c0] + PA_0 * PQ[b1] * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[c0] + PA_0 * PQ[b1] * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[c0] + PA_0 * PQ[b1] * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d0] + PA_0 * PQ[b1] * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[a0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[a0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[a0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d1])
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1])
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[c1])
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[c1])
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[d0])
                            + delta[b0][c1] * delta[b1][d1] * (PA_0 * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d0])
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][d0] * (PA_0 * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c1] * (PA_0 * PQ[c0] * PQ[d1])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c1] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[c1] * PQ[d1])
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[b1][c1] * (PA_0 * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][c0] * (PA_0 * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1])
                            + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[d0])
                            + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d1])
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c1] * PQ[d0])
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d1])
                            + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1])
                            + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b1][d1] * (PB_0 * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b1][d0] * (PB_0 * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b1][c1] * (PB_0 * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b1][c0] * (PB_0 * PQ[d0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b0][d1] * (PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b0][d0] * (PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b0][c1] * (PB_1 * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b0][c0] * (PB_1 * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F7_t[4] * (

                        0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b1][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[4] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F7_t[4] * (

                        0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD5(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F7_t[8];

            gpu::computeBoysFunctionEriJ(F7_t, S1 * S2 / S4 * r2_PQ, 7, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[4] * (

                        0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F7_t[5] * (

                        ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F7_t[5] * (

                        ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F7_t[5] * (

                        ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F7_t[5] * (

                        0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F7_t[5] * (

                        0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F7_t[5] * (

                        0.25 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d1])
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1])
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[c1])
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[c1])
                            + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[b0][c1] * delta[b1][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c1] * (PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[c1] * PQ[d1])
                            + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[b1][c1] * (PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b1][c1] * (PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b0][c1] * (PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[c1] * PQ[d1])
                            + delta[a0][c1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c1] * (PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][b1] * (PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c0] * (PQ[c1] * PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * (PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F7_t[6] * (

                        ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F7_t[6] * (

                        ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F7_t[6] * (

                        0.5 * ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F7_t[7] * (

                        ( S1 * S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDPD0(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[3];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * QD_0)
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * QD_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (QD_0 * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (QD_1 * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (QD_0 * QD_1)
                            + delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1)
                            + delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0)
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PB_1 * PA_0 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PB_1 * PA_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * QC_0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * QC_0 + PB_0 * PA_0 * PQ[b1] * QC_0 + PB_1 * PA_0 * PQ[b0] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * QD_0 + PB_0 * PA_0 * PQ[b1] * QD_0 + PB_1 * PA_0 * PQ[b0] * QD_0)
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * QD_1 + PB_0 * PA_0 * PQ[b1] * QD_1 + PB_1 * PA_0 * PQ[b0] * QD_1)
                            + delta[b1][d1] * (PB_0 * PA_0 * QD_0 * QC_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * QD_0 * QD_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * QD_0 * QC_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * QD_0 * QD_1)
                            + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * QD_0 * QC_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * QD_1 * QC_0)
                            + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * QC_0
                            + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1 * QC_0
                            + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S1 * S2 * S4 ) * (
                            delta[a0][c0] * delta[b0][b1] * delta[d0][d1]
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1]
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1]
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1]
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0]
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1]
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1]
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0]
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * QC_0
                            + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0
                            + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 / ( S1 * S4 * S4 ) * (
                            delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 / ( S2 * S4 * S4 ) * (
                            delta[a0][c0] * delta[b0][b1] * delta[d0][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] * (-1.0)
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1] * (-1.0)
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1] * (-1.0)
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0] * (-1.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PA_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PA_0 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0])
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0])
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0])
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1])
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0])
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0])
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1])
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QD_1 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QD_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (QD_0 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (QD_1 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (QD_0 * QD_1 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] + PA_0 * PQ[b1])
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * QC_0)
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * QD_0)
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * QD_0)
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * QD_1)
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * QD_1)
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * QC_0)
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * QC_0)
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * QC_0)
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * QC_0)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * QD_0)
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * QD_0)
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * QD_1)
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * QD_1)
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * QD_0)
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * QD_0)
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * QD_1)
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * QD_1)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PB_1 * PA_0 * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PB_1 * PA_0 * PQ[d1])
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * QC_0 * (-1.0))
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDPD1(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[7];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 + PA_0 * PQ[b0] * PQ[b1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * QD_0)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * QD_1)
                            + delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b1] * QD_0 * QC_0)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b1] * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b1] * QD_0 * QD_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QD_1 * QC_0 + PA_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[a0][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QD_1 * QC_0 + PB_0 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QD_1 * QC_0 + PB_1 * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * S1 / ( S4 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[a0] * (-1.0) + PA_0 * PQ[b1] * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                            + delta[b0][d0] * delta[b1][d1] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                            + delta[a0][c0] * delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                            + delta[a0][c0] * delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * S2 / ( S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * QC_0)
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * QC_0)
                            + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * QC_0)
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * QC_0)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * QD_0)
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * QD_0)
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * QD_1)
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * QD_1)
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                            + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * QD_1)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                            + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * QD_0)
                            + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * QD_0)
                            + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * QD_1)
                            + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * QD_1)
                            + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                            + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[c0] + PB_0 * PA_0 * PQ[b1] * PQ[c0] + PB_1 * PA_0 * PQ[b0] * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[a0] * PQ[d0] + PB_0 * PA_0 * PQ[b1] * PQ[d0] + PB_1 * PA_0 * PQ[b0] * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * PQ[d1] + PB_0 * PA_0 * PQ[b1] * PQ[d1] + PB_1 * PA_0 * PQ[b0] * PQ[d1])
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * PQ[d1])
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0)
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0 * QC_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1 * QC_0)
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QD_1 * QC_0 + PQ[a0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QD_1 * QC_0 + PQ[b0] * PQ[d1] * QD_0 * QC_0)
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QD_1 * QC_0 + PQ[b1] * PQ[d1] * QD_0 * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.125 / ( S4 * S4 * S4 ) * (
                            delta[a0][c0] * delta[b0][b1] * delta[d0][d1]
                            + delta[a0][c0] * delta[b0][d0] * delta[b1][d1]
                            + delta[a0][c0] * delta[b0][d1] * delta[b1][d0]
                            + delta[a0][d0] * delta[b0][b1] * delta[c0][d1]
                            + delta[a0][d0] * delta[b0][c0] * delta[b1][d1]
                            + delta[a0][d0] * delta[b0][d1] * delta[b1][c0]
                            + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]
                            + delta[a0][d1] * delta[b0][c0] * delta[b1][d0]
                            + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]
                            + delta[a0][b0] * delta[b1][c0] * delta[d0][d1]
                            + delta[a0][b0] * delta[b1][d0] * delta[c0][d1]
                            + delta[a0][b0] * delta[b1][d1] * delta[c0][d0]
                            + delta[b0][c0] * delta[a0][b1] * delta[d0][d1]
                            + delta[b0][d0] * delta[a0][b1] * delta[c0][d1]
                            + delta[b0][d1] * delta[a0][b1] * delta[c0][d0]
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[4] * (

                        0.25 * ( S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b1][c0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F6_t[5] * (

                        0.5 * ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[6] * (

                        ( S1 * S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDPP(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pp_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   pp_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* pp_first_inds,
                       const uint32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const uint32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pp_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * pp_mat_Q[kl] * pp_mat_D[kl]) > eri_threshold))
        {
            const auto k = pp_first_inds[kl];
            const auto l = pp_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = pp_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F5_t[6];

            gpu::computeBoysFunctionEriJ(F5_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F5_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PA_0)
                            + delta[a0][b1] * delta[c0][d0] * (PB_0)
                            + delta[a0][b0] * delta[c0][d0] * (PB_1)
                        )

                    )

                    +

                    F5_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * QD_0 * QC_0)
                            + delta[a0][b1] * (PB_0 * QD_0 * QC_0)
                            + delta[a0][b0] * (PB_1 * QD_0 * QC_0)
                        )

                    )

                    +

                    F5_t[0] * (

                        0.5 / S2 * (
                            delta[c0][d0] * (PB_0 * PB_1 * PA_0)
                        )

                    )

                    +

                    F5_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * QD_0 * QC_0
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][d0] * delta[b0][b1] * (QC_0)
                            + delta[a0][b0] * delta[b1][d0] * (QC_0)
                            + delta[b0][d0] * delta[a0][b1] * (QC_0)
                            + delta[a0][c0] * delta[b0][b1] * (QD_0)
                            + delta[a0][b0] * delta[b1][c0] * (QD_0)
                            + delta[b0][c0] * delta[a0][b1] * (QD_0)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PB_1 * PA_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * QD_0 * QC_0 * (-1.0) + PQ[a0] * QD_0 * QC_0)
                            + delta[a0][b1] * (PB_0 * QD_0 * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0)
                            + delta[a0][b0] * (PB_1 * QD_0 * QC_0 * (-1.0) + PQ[b1] * QD_0 * QC_0)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 / S4 * (
                            delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[b1][d0] * (PB_0 * PA_0 * QC_0)
                            + delta[b1][c0] * (PB_0 * PA_0 * QD_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * QC_0)
                            + delta[b0][c0] * (PB_1 * PA_0 * QD_0)
                            + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * QC_0)
                            + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * QD_0)
                        )

                    )

                    +

                    F5_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PQ[a0] * QD_0 * QC_0
                            + PB_0 * PA_0 * PQ[b1] * QD_0 * QC_0
                            + PB_1 * PA_0 * PQ[b0] * QD_0 * QC_0
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[c0] * PQ[d0]
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QC_0
                            + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QC_0
                            + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QC_0
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (QC_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (QC_0 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (QC_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (QD_0 * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (QD_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[b0][c0] * delta[b1][d0] * (PA_0)
                            + delta[b0][d0] * delta[b1][c0] * (PA_0)
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][c0] * (PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[a0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b1][d0] * (PB_0)
                            + delta[a0][d0] * delta[b1][c0] * (PB_0)
                            + delta[a0][c0] * delta[b0][d0] * (PB_1)
                            + delta[a0][d0] * delta[b0][c0] * (PB_1)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * QD_0 * QC_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PA_0 * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PA_0 * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0])
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[b1][d0] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * QC_0 + PA_0 * PQ[b1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0]
                            + PB_0 * PA_0 * PQ[b1] * PQ[c0] * PQ[d0]
                            + PB_1 * PA_0 * PQ[b0] * PQ[c0] * PQ[d0]
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QC_0
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0)
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * QC_0)
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0)
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0)
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0)
                        )

                    )

                    +

                    F5_t[3] * (

                        0.25 * S2 / ( S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (PQ[a0])
                            + delta[b0][c0] * delta[b1][d0] * (PQ[a0])
                            + delta[b0][d0] * delta[b1][c0] * (PQ[a0])
                            + delta[a0][c0] * delta[b1][d0] * (PQ[b0])
                            + delta[a0][d0] * delta[b1][c0] * (PQ[b0])
                            + delta[a0][b1] * delta[c0][d0] * (PQ[b0])
                            + delta[a0][c0] * delta[b0][d0] * (PQ[b1])
                            + delta[a0][d0] * delta[b0][c0] * (PQ[b1])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[b1])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[c0])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[c0])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[c0])
                            + delta[a0][c0] * delta[b0][b1] * (PQ[d0])
                            + delta[a0][b0] * delta[b1][c0] * (PQ[d0])
                            + delta[b0][c0] * delta[a0][b1] * (PQ[d0])
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0]
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0]
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[4] * (

                        0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                        )

                    )

                    +

                    F5_t[5] * (

                        ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pp_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDSD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   sd_mat_Q,
                       const uint32_t* pd_first_inds_local,
                       const uint32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const uint32_t  pd_prim_pair_count_local,
                       const uint32_t* sd_first_inds,
                       const uint32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const uint32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pd_prim_pair_count_local)
    {
        i = pd_first_inds_local[ij];
        j = pd_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = pd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sd_prim_pair_count) && (ij < pd_prim_pair_count_local) && (fabs(pd_mat_Q_local[ij] * sd_mat_Q[kl] * sd_mat_D[kl]) > eri_threshold))
        {
            const auto k = sd_first_inds[kl];
            const auto l = sd_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = sd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F5_t[6];

            gpu::computeBoysFunctionEriJ(F5_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F5_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0)
                            + delta[a0][b1] * delta[d0][d1] * (PB_0)
                            + delta[a0][b0] * delta[d0][d1] * (PB_1)
                        )

                    )

                    +

                    F5_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (PA_0 * QD_0 * QD_1)
                            + delta[a0][b1] * (PB_0 * QD_0 * QD_1)
                            + delta[a0][b0] * (PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F5_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0)
                        )

                    )

                    +

                    F5_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * PA_0 * QD_0 * QD_1
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                            + delta[a0][d1] * delta[b0][b1] * (QD_0)
                            + delta[a0][b0] * delta[b1][d1] * (QD_0)
                            + delta[b0][d1] * delta[a0][b1] * (QD_0)
                            + delta[a0][d0] * delta[b0][b1] * (QD_1)
                            + delta[a0][b0] * delta[b1][d0] * (QD_1)
                            + delta[b0][d0] * delta[a0][b1] * (QD_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PA_0 * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PB_0 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PB_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PA_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                            + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                            + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] + PB_0 * PA_0 * PQ[b1] + PB_1 * PA_0 * PQ[b0])
                            + delta[b1][d1] * (PB_0 * PA_0 * QD_0)
                            + delta[b1][d0] * (PB_0 * PA_0 * QD_1)
                            + delta[b0][d1] * (PB_1 * PA_0 * QD_0)
                            + delta[b0][d0] * (PB_1 * PA_0 * QD_1)
                            + delta[b0][b1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PB_1 * QD_0)
                            + delta[a0][d0] * (PB_0 * PB_1 * QD_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PA_0 * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1
                            + PB_0 * PA_0 * PQ[b1] * QD_0 * QD_1
                            + PB_1 * PA_0 * PQ[b0] * QD_0 * QD_1
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PA_0 * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1
                            + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1
                            + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 * S2 / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[a0][d1] * delta[b0][b1] * (QD_0 * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (QD_0 * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (QD_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (QD_1 * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (QD_1 * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (QD_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0] * (-1.0) + PA_0)
                            + delta[b0][d0] * delta[b1][d1] * (PA_0)
                            + delta[b0][d1] * delta[b1][d0] * (PA_0)
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * (-1.0) + PB_0)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * (-1.0) + PB_1)
                            + delta[a0][d1] * delta[b0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[b1][d1] * (PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[a0][b1] * (PQ[d0] * (-1.0))
                            + delta[a0][d0] * delta[b0][b1] * (PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[b1][d0] * (PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[a0][b1] * (PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b1][d1] * (PB_0)
                            + delta[a0][d1] * delta[b1][d0] * (PB_0)
                            + delta[a0][d0] * delta[b0][d1] * (PB_1)
                            + delta[a0][d1] * delta[b0][d0] * (PB_1)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * ( S2 * S2 ) / ( S1 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[a0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[a0] * (-1.0) + PB_0 * PA_0 * PQ[b1] * (-1.0) + PB_1 * PA_0 * PQ[b0] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PA_0 * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PA_0 * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0] + PA_0 * PQ[b0] * PQ[b1])
                            + delta[b1][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[b1][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                            + delta[b0][d1] * (PB_1 * PQ[a0] * QD_0 + PA_0 * PQ[b1] * QD_0)
                            + delta[b0][d0] * (PB_1 * PQ[a0] * QD_1 + PA_0 * PQ[b1] * QD_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                            + delta[a0][b1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                            + delta[a0][b0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                            + delta[a0][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                            + delta[a0][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1]
                            + PB_0 * PA_0 * PQ[b1] * PQ[d0] * PQ[d1]
                            + PB_1 * PA_0 * PQ[b0] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S2 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F5_t[3] * (

                        0.25 * S2 / ( S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[a0])
                            + delta[b0][d0] * delta[b1][d1] * (PQ[a0])
                            + delta[b0][d1] * delta[b1][d0] * (PQ[a0])
                            + delta[a0][d0] * delta[b1][d1] * (PQ[b0])
                            + delta[a0][d1] * delta[b1][d0] * (PQ[b0])
                            + delta[a0][b1] * delta[d0][d1] * (PQ[b0])
                            + delta[a0][d0] * delta[b0][d1] * (PQ[b1])
                            + delta[a0][d1] * delta[b0][d0] * (PQ[b1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[b1])
                            + delta[a0][d1] * delta[b0][b1] * (PQ[d0])
                            + delta[a0][b0] * delta[b1][d1] * (PQ[d0])
                            + delta[b0][d1] * delta[a0][b1] * (PQ[d0])
                            + delta[a0][d0] * delta[b0][b1] * (PQ[d1])
                            + delta[a0][b0] * delta[b1][d0] * (PQ[d1])
                            + delta[b0][d0] * delta[a0][b1] * (PQ[d1])
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0)
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1)
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1)
                            + delta[b0][b1] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * QD_0)
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * QD_1)
                            + delta[a0][b1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                            + delta[a0][b0] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1]
                            + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1]
                            + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F5_t[4] * (

                        0.5 * ( S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0))
                            + delta[a0][b1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[5] * (

                        ( S1 * S1 * S2 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDDD0(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* sd_first_inds_local,
                       const uint32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const uint32_t  sd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sd_prim_pair_count_local)
    {
        i = sd_first_inds_local[ij];
        j = sd_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = sd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < sd_prim_pair_count_local) && (fabs(sd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[3];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0)
                            + delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1)
                            + delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PB_1 * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PB_1 * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PB_1 * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[0] * (

                        0.125 / ( S1 * S2 * S2 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                        )

                    )

                    +

                    F6_t[0] * (

                        0.25 / ( S2 * S2 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S1 * S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S2 * S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 * S1 / ( S2 * S2 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1 * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1 * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1 * (-2.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (QD_0 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (QD_1 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (QD_1 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b1][c1] * delta[d0][d1] * (PB_0 * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * QC_1)
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * QC_1)
                            + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                            + delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * QD_1)
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * QD_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PQ[b1] * QD_0 * QC_0 + PB_1 * PQ[b0] * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PQ[b1] * QD_1 * QC_0 + PB_1 * PQ[b0] * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 * QC_1 + PB_1 * PQ[b0] * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 * QC_1 + PB_1 * PQ[b0] * QD_1 * QC_1)
                            + delta[b1][d1] * (PB_0 * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PB_0 * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PB_0 * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PB_0 * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PB_1 * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PB_1 * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PB_1 * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PB_1 * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                            + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b1][c1] * delta[d0][d1] * (PQ[b0] * QC_0)
                            + delta[b1][d0] * delta[c1][d1] * (PQ[b0] * QC_0)
                            + delta[b1][d1] * delta[c1][d0] * (PQ[b0] * QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PQ[b0] * QC_1)
                            + delta[b1][d0] * delta[c0][d1] * (PQ[b0] * QC_1)
                            + delta[b1][d1] * delta[c0][d0] * (PQ[b0] * QC_1)
                            + delta[b0][c1] * delta[d0][d1] * (PQ[b1] * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PQ[b1] * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PQ[b1] * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PQ[b1] * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PQ[b1] * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PQ[b1] * QC_1)
                            + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QD_0 * QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QD_0 * QC_1)
                            + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QD_1 * QC_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][d1] * (QC_0 * QC_1)
                            + delta[b0][d1] * delta[b1][d0] * (QC_0 * QC_1)
                            + delta[b0][c1] * delta[b1][d1] * (QD_0 * QC_0)
                            + delta[b0][d1] * delta[b1][c1] * (QD_0 * QC_0)
                            + delta[b0][c1] * delta[b1][d0] * (QD_1 * QC_0)
                            + delta[b0][d0] * delta[b1][c1] * (QD_1 * QC_0)
                            + delta[b0][c0] * delta[b1][d1] * (QD_0 * QC_1)
                            + delta[b0][d1] * delta[b1][c0] * (QD_0 * QC_1)
                            + delta[b0][c0] * delta[b1][d0] * (QD_1 * QC_1)
                            + delta[b0][d0] * delta[b1][c0] * (QD_1 * QC_1)
                            + delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                            + delta[b1][c0] * delta[c1][d1] * (PQ[b0] * QD_0)
                            + delta[b1][c1] * delta[c0][d1] * (PQ[b0] * QD_0)
                            + delta[b1][d1] * delta[c0][c1] * (PQ[b0] * QD_0)
                            + delta[b1][c0] * delta[c1][d0] * (PQ[b0] * QD_1)
                            + delta[b1][c1] * delta[c0][d0] * (PQ[b0] * QD_1)
                            + delta[b1][d0] * delta[c0][c1] * (PQ[b0] * QD_1)
                            + delta[b0][c0] * delta[c1][d1] * (PQ[b1] * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PQ[b1] * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PQ[b1] * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PQ[b1] * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PQ[b1] * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PQ[b1] * QD_1)
                            + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                            + delta[b0][c0] * delta[b1][c1] * (QD_0 * QD_1)
                            + delta[b0][c1] * delta[b1][c0] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1)
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0)
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDDD1(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* sd_first_inds_local,
                       const uint32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const uint32_t  sd_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sd_prim_pair_count_local)
    {
        i = sd_first_inds_local[ij];
        j = sd_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = sd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < sd_prim_pair_count_local) && (fabs(sd_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[7];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                            + delta[c1][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_0)
                            + delta[c1][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_0)
                            + delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0 * QC_1)
                            + delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1 * QC_1)
                            + delta[b1][d1] * (PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[b1][d0] * (PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[b1][c1] * (PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[b1][c0] * (PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[b0][d1] * (PQ[b1] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PQ[b1] * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PQ[b1] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PQ[b1] * QD_0 * QD_1 * QC_1)
                            + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1]
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1]
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1]
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 / ( S2 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * 2.0
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * 2.0
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * 2.0
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1]
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1]
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0]
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1]
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1]
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0]
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1]
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1]
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1]
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0]
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0]
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PB_1)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PB_1)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PB_1)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                            + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                            + delta[b0][b1] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                            + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] * (-1.0)
                            + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] * (-1.0)
                            + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] * (-1.0)
                            + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] * (-1.0)
                            + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] * (-1.0)
                            + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] * (-1.0)
                            + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] * (-1.0)
                            + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] * (-1.0)
                            + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] * (-1.0)
                            + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] * (-1.0)
                            + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] * (-1.0)
                            + delta[b0][d1] * delta[b1][d0] * delta[c0][c1] * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[b1][c1] * delta[d0][d1] * (PB_0 * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PB_0 * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PB_0 * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PB_0 * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PB_0 * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PB_0 * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PB_0 * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PB_0 * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PB_0 * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PB_0 * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PB_1 * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PB_1 * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PB_1 * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PB_1 * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PB_1 * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PB_1 * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PB_1 * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PB_1 * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PB_1 * PQ[d1])
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * S1 / ( S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1] * (-2.0))
                            + delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                            + delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                            + delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0) + PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0) + PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0) + PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[b1][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[b1][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0) + PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0) + PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0) + PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[b1][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[b1][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1)
                            + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0)
                            + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1)
                            + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0))
                            + delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                            + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                            + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                            + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                            + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[4] * (

                        0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[b0] * PQ[b1])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[b0] * PQ[b1])
                            + delta[b1][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0])
                            + delta[b1][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0])
                            + delta[b1][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0])
                            + delta[b1][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1])
                            + delta[b1][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1])
                            + delta[b1][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1])
                            + delta[b1][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0])
                            + delta[b1][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0])
                            + delta[b1][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0])
                            + delta[b1][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1])
                            + delta[b1][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1])
                            + delta[b1][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1])
                            + delta[b0][c1] * delta[d0][d1] * (PQ[b1] * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PQ[b1] * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PQ[b1] * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PQ[b1] * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[b1] * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[b1] * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PQ[b1] * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PQ[b1] * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PQ[b1] * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PQ[b1] * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PQ[b1] * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PQ[b1] * PQ[d1])
                            + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1])
                            + delta[b0][d0] * delta[b1][d1] * (PQ[c0] * PQ[c1])
                            + delta[b0][d1] * delta[b1][d0] * (PQ[c0] * PQ[c1])
                            + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0])
                            + delta[b0][c1] * delta[b1][d1] * (PQ[c0] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c1] * (PQ[c0] * PQ[d0])
                            + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][d0] * (PQ[c0] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c1] * (PQ[c0] * PQ[d1])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0])
                            + delta[b0][c0] * delta[b1][d1] * (PQ[c1] * PQ[d0])
                            + delta[b0][d1] * delta[b1][c0] * (PQ[c1] * PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1])
                            + delta[b0][c0] * delta[b1][d0] * (PQ[c1] * PQ[d1])
                            + delta[b0][d0] * delta[b1][c0] * (PQ[c1] * PQ[d1])
                            + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1])
                            + delta[b0][c0] * delta[b1][c1] * (PQ[d0] * PQ[d1])
                            + delta[b0][c1] * delta[b1][c0] * (PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[5] * (

                        0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F6_t[6] * (

                        ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDPD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* sd_first_inds_local,
                       const uint32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const uint32_t  sd_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sd_prim_pair_count_local)
    {
        i = sd_first_inds_local[ij];
        j = sd_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = sd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < sd_prim_pair_count_local) && (fabs(sd_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F5_t[6];

            gpu::computeBoysFunctionEriJ(F5_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F5_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1] * (QC_0)
                            + delta[b0][b1] * delta[c0][d1] * (QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (QD_1)
                        )

                    )

                    +

                    F5_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (QD_0 * QD_1 * QC_0)
                        )

                    )

                    +

                    F5_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PB_1 * QD_0)
                            + delta[c0][d0] * (PB_0 * PB_1 * QD_1)
                        )

                    )

                    +

                    F5_t[0] * (

                        (
                            
                            + PB_0 * PB_1 * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (QD_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (QD_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[b1][c0] * delta[d0][d1] * (PB_0)
                            + delta[b1][d0] * delta[c0][d1] * (PB_0)
                            + delta[b1][d1] * delta[c0][d0] * (PB_0)
                            + delta[b0][c0] * delta[d0][d1] * (PB_1)
                            + delta[b0][d0] * delta[c0][d1] * (PB_1)
                            + delta[b0][d1] * delta[c0][d0] * (PB_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (QD_0 * QD_1 * QC_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                            + delta[b1][d1] * (PB_0 * QD_0 * QC_0)
                            + delta[b1][d0] * (PB_0 * QD_1 * QC_0)
                            + delta[b0][d1] * (PB_1 * QD_0 * QC_0)
                            + delta[b0][d0] * (PB_1 * QD_1 * QC_0)
                            + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                            + delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                            + delta[b1][c0] * (PB_0 * QD_0 * QD_1)
                            + delta[b0][c0] * (PB_1 * QD_0 * QD_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        S1 / S4 * (
                            PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PQ[b1] * QD_0 * QD_1 * QC_0
                            + PB_1 * PQ[b0] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PQ[b0] * PQ[b1] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PB_0 * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PB_0 * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PB_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PB_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PB_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PB_1 * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PQ[c0])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[d0])
                            + delta[b0][b1] * delta[c0][d0] * (PQ[d1])
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (PQ[c0] + QC_0)
                            + delta[b0][d0] * delta[b1][d1] * (QC_0)
                            + delta[b0][d1] * delta[b1][d0] * (QC_0)
                            + delta[b1][c0] * delta[d0][d1] * (PQ[b0])
                            + delta[b1][d0] * delta[c0][d1] * (PQ[b0])
                            + delta[b1][d1] * delta[c0][d0] * (PQ[b0])
                            + delta[b0][c0] * delta[d0][d1] * (PQ[b1])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[b1])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[b1])
                            + delta[b0][b1] * delta[c0][d1] * (PQ[d0] + QD_0)
                            + delta[b0][b1] * delta[c0][d0] * (PQ[d1] + QD_1)
                            + delta[b0][c0] * delta[b1][d1] * (QD_0)
                            + delta[b0][d1] * delta[b1][c0] * (QD_0)
                            + delta[b0][c0] * delta[b1][d0] * (QD_1)
                            + delta[b0][d0] * delta[b1][c0] * (QD_1)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0)
                            + delta[b1][d1] * (PQ[b0] * QD_0 * QC_0)
                            + delta[b1][d0] * (PQ[b0] * QD_1 * QC_0)
                            + delta[b0][d1] * (PQ[b1] * QD_0 * QC_0)
                            + delta[b0][d0] * (PQ[b1] * QD_1 * QC_0)
                            + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                            + delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0)
                            + delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1)
                            + delta[b1][c0] * (PQ[b0] * QD_0 * QD_1)
                            + delta[b0][c0] * (PQ[b1] * QD_0 * QD_1)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PB_1 * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PB_1 * PQ[d1])
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[3] * (

                        0.25 * S1 / ( S4 * S4 * S4 ) * (
                            delta[b1][c0] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[b1][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[b1][d1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PQ[b1] * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[b1] * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[b1] * (-1.0))
                            + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0))
                            + delta[b0][d0] * delta[b1][d1] * (PQ[c0] * (-1.0))
                            + delta[b0][d1] * delta[b1][d0] * (PQ[c0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0))
                            + delta[b0][c0] * delta[b1][d1] * (PQ[d0] * (-1.0))
                            + delta[b0][d1] * delta[b1][c0] * (PQ[d0] * (-1.0))
                            + delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0))
                            + delta[b0][c0] * delta[b1][d0] * (PQ[d1] * (-1.0))
                            + delta[b0][d0] * delta[b1][c0] * (PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                            + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PB_0 * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PB_1 * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                            + delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b1][c0] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                            + delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                            + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                            + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F5_t[4] * (

                        0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0])
                            + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0])
                            + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1])
                            + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[b1][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PQ[b1] * PQ[d0] * PQ[d1])
                            + delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F5_t[5] * (

                        ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDPP(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pp_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   pp_mat_Q,
                       const uint32_t* sd_first_inds_local,
                       const uint32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const uint32_t  sd_prim_pair_count_local,
                       const uint32_t* pp_first_inds,
                       const uint32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const uint32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sd_prim_pair_count_local)
    {
        i = sd_first_inds_local[ij];
        j = sd_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = sd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pp_prim_pair_count) && (ij < sd_prim_pair_count_local) && (fabs(sd_mat_Q_local[ij] * pp_mat_Q[kl] * pp_mat_D[kl]) > eri_threshold))
        {
            const auto k = pp_first_inds[kl];
            const auto l = pp_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = pp_pair_data[kl];

            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto c0 = k % 3;
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F4_t[5];

            gpu::computeBoysFunctionEriJ(F4_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F4_t[0] * (

                        0.5 / S1 * (
                            delta[b0][b1] * (QD_0 * QC_0)
                        )

                        + (

                            + PB_0 * PB_1 * QD_0 * QC_0
                        )

                        + 0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[c0][d0]
                        )

                        + 0.5 / S2 * (
                            delta[c0][d0] * (PB_0 * PB_1)
                        )

                    )

                    + F4_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (-1.0)
                        )

                        + 0.25 / ( S2 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0] * (-1.0)
                        )

                        + 0.5 * S1 / ( S2 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PB_1 * (-1.0))
                        )

                        + 0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (QD_0 * QC_0 * (-1.0))
                        )

                        + 0.5 / S4 * (
                            delta[b1][d0] * (PB_0 * QC_0)
                            + delta[b0][d0] * (PB_1 * QC_0)
                            + delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[b1][c0] * (PB_0 * QD_0)
                            + delta[b0][c0] * (PB_1 * QD_0)
                        )

                        + S1 / S4 * (
                            PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0)
                        )

                        + S2 / S4 * (

                            + PB_0 * PQ[b1] * QD_0 * QC_0
                            + PB_1 * PQ[b0] * QD_0 * QC_0
                        )

                    )

                    + F4_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PB_0 * PB_1 * PQ[c0] * PQ[d0]
                        )

                        + ( S1 * S2 ) / ( S4 * S4 ) * (

                            + PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        )

                        + ( S2 * S2 ) / ( S4 * S4 ) * (

                            + PQ[b0] * PQ[b1] * QD_0 * QC_0
                        )

                        + 0.5 * S1 / ( S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PQ[c0] * PQ[d0])
                        )

                        + 0.5 * S2 / ( S4 * S4 ) * (
                            delta[b1][d0] * (PQ[b0] * QC_0)
                            + delta[b0][d0] * (PQ[b1] * QC_0)
                            + delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[c0][d0] * (PQ[b0] * PQ[b1])
                            + delta[b1][c0] * (PQ[b0] * QD_0)
                            + delta[b0][c0] * (PQ[b1] * QD_0)
                        )

                        + 0.25 / ( S4 * S4 ) * (
                            delta[b0][b1] * delta[c0][d0]
                            + delta[b0][c0] * delta[b1][d0]
                            + delta[b0][d0] * delta[b1][c0]
                        )

                    )

                    + F4_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            PB_0 * PQ[b1] * PQ[c0] * PQ[d0]
                            + PB_1 * PQ[b0] * PQ[c0] * PQ[d0]
                        )

                        + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (

                            + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        )

                        + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[b1][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[b1] * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][b1] * (PQ[c0] * PQ[d0] * (-1.0))
                        )

                    )

                    + F4_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pp_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDSD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   sd_mat_Q,
                       const uint32_t* sd_first_inds_local,
                       const uint32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const uint32_t  sd_prim_pair_count_local,
                       const uint32_t* sd_first_inds,
                       const uint32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const uint32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sd_prim_pair_count_local)
    {
        i = sd_first_inds_local[ij];
        j = sd_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = d_prim_info[j / 6 + d_prim_count * 0];

        r_j[0] = d_prim_info[j / 6 + d_prim_count * 2];
        r_j[1] = d_prim_info[j / 6 + d_prim_count * 3];
        r_j[2] = d_prim_info[j / 6 + d_prim_count * 4];

        S_ij_00 = sd_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sd_prim_pair_count) && (ij < sd_prim_pair_count_local) && (fabs(sd_mat_Q_local[ij] * sd_mat_Q[kl] * sd_mat_D[kl]) > eri_threshold))
        {
            const auto k = sd_first_inds[kl];
            const auto l = sd_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = sd_pair_data[kl];

            const auto b0 = d_cart_inds[j % 6][0];
            const auto b1 = d_cart_inds[j % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F4_t[5];

            gpu::computeBoysFunctionEriJ(F4_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto PB_1 = (-a_i / S1) * rij[b1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F4_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[b0][b1] * delta[d0][d1]
                        )

                        + 0.5 / S1 * (
                            delta[b0][b1] * (QD_0 * QD_1)
                        )

                        + 0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PB_1)
                        )

                        + (
                            PB_0 * PB_1 * QD_0 * QD_1
                        )

                    )

                    + F4_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (-1.0)
                        )

                        + 0.25 / ( S2 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1] * (-1.0)
                        )

                        + 0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PB_1 * (-1.0))
                        )

                        + 0.5 * S2 / ( S1 * S4 ) * (
                            delta[b0][b1] * (QD_0 * QD_1 * (-1.0))
                        )

                        + 0.5 / S4 * (
                            delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                            + delta[b1][d1] * (PB_0 * QD_0)
                            + delta[b1][d0] * (PB_0 * QD_1)
                            + delta[b0][d1] * (PB_1 * QD_0)
                            + delta[b0][d0] * (PB_1 * QD_1)
                        )

                        + S1 / S4 * (
                            PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0)
                        )

                        + S2 / S4 * (
                            PB_0 * PQ[b1] * QD_0 * QD_1
                            + PB_1 * PQ[b0] * QD_0 * QD_1
                        )

                    )

                    + F4_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PB_0 * PB_1 * PQ[d0] * PQ[d1]
                        )

                        + ( S2 * S2 ) / ( S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * QD_0 * QD_1
                        )

                        + 0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                            + delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PQ[d0] * PQ[d1])
                        )

                        + ( S1 * S2 ) / ( S4 * S4 ) * (
                            PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        )

                        + 0.25 / ( S4 * S4 ) * (
                            delta[b0][b1] * delta[d0][d1]
                            + delta[b0][d0] * delta[b1][d1]
                            + delta[b0][d1] * delta[b1][d0]
                        )

                        + 0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1])
                            + delta[b1][d1] * (PQ[b0] * QD_0)
                            + delta[b1][d0] * (PQ[b0] * QD_1)
                            + delta[b0][d1] * (PQ[b1] * QD_0)
                            + delta[b0][d0] * (PQ[b1] * QD_1)
                            + delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        )

                    )

                    + F4_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            PB_0 * PQ[b1] * PQ[d0] * PQ[d1]
                            + PB_1 * PQ[b0] * PQ[d0] * PQ[d1]
                        )

                        + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0))
                            + delta[b1][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[b1][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PQ[b1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[b1] * PQ[d1] * (-1.0))
                            + delta[b0][b1] * (PQ[d0] * PQ[d1] * (-1.0))
                        )

                        + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    + F4_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPDD0(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* pp_first_inds_local,
                       const uint32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const uint32_t  pp_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pp_prim_pair_count_local)
    {
        i = pp_first_inds_local[ij];
        j = pp_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = pp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < pp_prim_pair_count_local) && (fabs(pp_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = j % 3;
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[3];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[a0][b0] * delta[d0][d1] * (QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (QD_0 * QC_0)
                            + delta[a0][b0] * delta[c1][d0] * (QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (QD_0 * QC_1)
                            + delta[a0][b0] * delta[c0][d0] * (QD_1 * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.25 / ( S2 * S2 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S1 * (
                            delta[a0][b0] * (QD_0 * QD_1 * QC_0 * QC_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PA_0 * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PA_0 * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PA_0 * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PA_0 * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PA_0 * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PA_0 * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[0] * (

                        (
                            
                            + PB_0 * PA_0 * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[0] * (

                        0.125 / ( S1 * S2 * S2 ) * (
                            delta[a0][b0] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1]
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S1 * S2 * S4 ) * (
                            delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.125 / ( S2 * S2 * S4 ) * (
                            delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (-2.0)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (-2.0)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (-2.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 * S1 / ( S2 * S2 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0 * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0 * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0 * (-2.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[a0][b0] * delta[d0][d1] * (QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b0][c1] * delta[d0][d1] * (PA_0 * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PA_0 * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PA_0 * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PA_0 * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PA_0 * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PA_0 * QC_1)
                            + delta[b0][c0] * delta[c1][d1] * (PA_0 * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PA_0 * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PA_0 * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PA_0 * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PA_0 * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PA_0 * QD_1)
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * QC_1)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QD_0 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QD_1 * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QD_1 * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * QD_1)
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PA_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PA_0 * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PA_0 * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PA_0 * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PA_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PA_0 * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PA_0 * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PA_0 * QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[a0][b0] * (QD_0 * QD_1 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 * QC_1 + PA_0 * PQ[b0] * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * PQ[a0] * QD_0 * QC_0 + PA_0 * PQ[b0] * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * PQ[a0] * QD_1 * QC_0 + PA_0 * PQ[b0] * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 * QC_1 + PA_0 * PQ[b0] * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 * QC_1 + PA_0 * PQ[b0] * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * PQ[a0] * QD_0 * QD_1 + PA_0 * PQ[b0] * QD_0 * QD_1)
                            + delta[b0][d1] * (PA_0 * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PA_0 * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PA_0 * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PA_0 * QD_0 * QD_1 * QC_1)
                            + delta[a0][d1] * (PB_0 * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PB_0 * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PB_0 * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PB_0 * QD_0 * QD_1 * QC_1)
                            + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0) + PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F6_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0 * QC_1
                            + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PA_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PA_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F6_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PA_0)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PA_0)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PA_0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] * (-2.0) + PA_0 * PQ[b0] * (-2.0))
                            + delta[b0][c1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                            + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                            + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                            + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[b0][c1] * delta[d0][d1] * (PQ[a0] * QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * QC_1)
                            + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * QC_0)
                            + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * QC_0)
                            + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * QC_0)
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * QC_1)
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * QC_1)
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * QC_1)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QD_0 * QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QD_0 * QC_1)
                            + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QD_1 * QC_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][d1] * (QC_0 * QC_1)
                            + delta[a0][d1] * delta[b0][d0] * (QC_0 * QC_1)
                            + delta[a0][c1] * delta[b0][d1] * (QD_0 * QC_0)
                            + delta[a0][d1] * delta[b0][c1] * (QD_0 * QC_0)
                            + delta[a0][c1] * delta[b0][d0] * (QD_1 * QC_0)
                            + delta[a0][d0] * delta[b0][c1] * (QD_1 * QC_0)
                            + delta[a0][c0] * delta[b0][d1] * (QD_0 * QC_1)
                            + delta[a0][d1] * delta[b0][c0] * (QD_0 * QC_1)
                            + delta[a0][c0] * delta[b0][d0] * (QD_1 * QC_1)
                            + delta[a0][d0] * delta[b0][c0] * (QD_1 * QC_1)
                            + delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * QD_1)
                            + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * QD_0)
                            + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * QD_0)
                            + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * QD_0)
                            + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * QD_1)
                            + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * QD_1)
                            + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * QD_1)
                            + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                            + delta[a0][c0] * delta[b0][c1] * (QD_0 * QD_1)
                            + delta[a0][c1] * delta[b0][c0] * (QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] + PB_0 * PA_0 * PQ[c0] * QC_1 + PB_0 * PA_0 * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] + PB_0 * PA_0 * PQ[c0] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] + PB_0 * PA_0 * PQ[c0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] + PB_0 * PA_0 * PQ[c1] * QD_0 + PB_0 * PA_0 * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] + PB_0 * PA_0 * PQ[c1] * QD_1 + PB_0 * PA_0 * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] + PB_0 * PA_0 * PQ[d0] * QD_1 + PB_0 * PA_0 * PQ[d1] * QD_0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPDD1(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* pp_first_inds_local,
                       const uint32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const uint32_t  pp_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pp_prim_pair_count_local)
    {
        i = pp_first_inds_local[ij];
        j = pp_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = pp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < pp_prim_pair_count_local) && (fabs(pp_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = j % 3;
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F6_t[7];

            gpu::computeBoysFunctionEriJ(F6_t, S1 * S2 / S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F6_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[b0][d1] * (PA_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PA_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PQ[c0] * QD_0 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QC_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[c0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_0 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 * QC_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QD_1 * QC_1 + PQ[c0] * PQ[d1] * QD_0 * QC_1 + PQ[c1] * PQ[d0] * QD_1 * QC_0 + PQ[c1] * PQ[d1] * QD_0 * QC_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                            + delta[c1][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_0)
                            + delta[c1][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0 * QC_1)
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1 * QC_1)
                            + delta[b0][d1] * (PQ[a0] * QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (PQ[a0] * QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (PQ[a0] * QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PQ[a0] * QD_0 * QD_1 * QC_1)
                            + delta[a0][d1] * (PQ[b0] * QD_0 * QC_0 * QC_1)
                            + delta[a0][d0] * (PQ[b0] * QD_1 * QC_0 * QC_1)
                            + delta[a0][c1] * (PQ[b0] * QD_0 * QD_1 * QC_0)
                            + delta[a0][c0] * (PQ[b0] * QD_0 * QD_1 * QC_1)
                            + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 * QC_1 + PQ[c1] * QD_0 * QD_1 * QC_0 + PQ[d0] * QD_1 * QC_0 * QC_1 + PQ[d1] * QD_0 * QC_0 * QC_1)
                            + delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 * S1 / ( S2 * S2 * S4 * S4 ) * (
                            delta[a0][b0] * delta[c0][c1] * delta[d0][d1]
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1]
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1]
                        )

                    )

                    +

                    F6_t[2] * (

                        0.125 / ( S2 * S4 * S4 ) * (
                            delta[a0][c0] * delta[b0][c1] * delta[d0][d1]
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1]
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0]
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1]
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1]
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0]
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1]
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1]
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1]
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0]
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0]
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * 2.0
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * 2.0
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * 2.0
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.125 * S1 / ( S2 * S4 * S4 * S4 ) * (
                            delta[a0][c0] * delta[b0][c1] * delta[d0][d1] * (-1.0)
                            + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] * (-1.0)
                            + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] * (-1.0)
                            + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] * (-1.0)
                            + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] * (-1.0)
                            + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] * (-1.0)
                            + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] * (-1.0)
                            + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] * (-1.0)
                            + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] * (-1.0)
                            + delta[a0][d1] * delta[b0][d0] * delta[c0][c1] * (-1.0)
                            + delta[a0][b0] * delta[c0][c1] * delta[d0][d1] * (-1.0)
                            + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] * (-1.0)
                            + delta[a0][b0] * delta[c1][d0] * delta[c0][d1] * (-1.0)
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b0][c1] * delta[d0][d1] * (PA_0 * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PA_0 * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PA_0 * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PA_0 * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PA_0 * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PA_0 * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PA_0 * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PA_0 * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PA_0 * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PA_0 * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PA_0 * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PA_0 * PQ[d1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PB_0 * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PB_0 * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PB_0 * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PB_0 * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PB_0 * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PB_0 * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PB_0 * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PB_0 * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PB_0 * PQ[d1])
                        )

                    )

                    +

                    F6_t[3] * (

                        0.25 * S1 / ( S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0] * (-2.0))
                            + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0) + PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0) + PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0) + PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d1] * delta[b0][c1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][d0] * delta[b0][c1] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0) + PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0) + PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                            + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0) + PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c0] * delta[b0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][c1] * delta[b0][c0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0)
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0)
                            + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F6_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][d1] * (PQ[b0] * PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[a0][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * QC_1 * (-1.0))
                            + delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[c0] * PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[4] * (

                        0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1)
                            + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                            + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                            + delta[a0][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[a0][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                            + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                            + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F6_t[4] * (

                        0.25 * ( S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[a0] * PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[a0] * PQ[b0])
                            + delta[b0][c1] * delta[d0][d1] * (PQ[a0] * PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PQ[a0] * PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PQ[a0] * PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0] * PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PQ[a0] * PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PQ[a0] * PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PQ[a0] * PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PQ[a0] * PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PQ[a0] * PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PQ[a0] * PQ[d1])
                            + delta[a0][c1] * delta[d0][d1] * (PQ[b0] * PQ[c0])
                            + delta[a0][d0] * delta[c1][d1] * (PQ[b0] * PQ[c0])
                            + delta[a0][d1] * delta[c1][d0] * (PQ[b0] * PQ[c0])
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * PQ[c1])
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * PQ[c1])
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * PQ[c1])
                            + delta[a0][c0] * delta[c1][d1] * (PQ[b0] * PQ[d0])
                            + delta[a0][c1] * delta[c0][d1] * (PQ[b0] * PQ[d0])
                            + delta[a0][d1] * delta[c0][c1] * (PQ[b0] * PQ[d0])
                            + delta[a0][c0] * delta[c1][d0] * (PQ[b0] * PQ[d1])
                            + delta[a0][c1] * delta[c0][d0] * (PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[c0][c1] * (PQ[b0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][d1] * (PQ[c0] * PQ[c1])
                            + delta[a0][d1] * delta[b0][d0] * (PQ[c0] * PQ[c1])
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1])
                            + delta[a0][c1] * delta[b0][d1] * (PQ[c0] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c1] * (PQ[c0] * PQ[d0])
                            + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0])
                            + delta[a0][c1] * delta[b0][d0] * (PQ[c0] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c1] * (PQ[c0] * PQ[d1])
                            + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1])
                            + delta[a0][c0] * delta[b0][d1] * (PQ[c1] * PQ[d0])
                            + delta[a0][d1] * delta[b0][c0] * (PQ[c1] * PQ[d0])
                            + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0])
                            + delta[a0][c0] * delta[b0][d0] * (PQ[c1] * PQ[d1])
                            + delta[a0][d0] * delta[b0][c0] * (PQ[c1] * PQ[d1])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1])
                            + delta[a0][c0] * delta[b0][c1] * (PQ[d0] * PQ[d1])
                            + delta[a0][c1] * delta[b0][c0] * (PQ[d0] * PQ[d1])
                            + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F6_t[5] * (

                        ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F6_t[5] * (

                        0.5 * ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[a0][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F6_t[6] * (

                        ( S1 * S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPPD(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   pd_mat_Q,
                       const uint32_t* pp_first_inds_local,
                       const uint32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const uint32_t  pp_prim_pair_count_local,
                       const uint32_t* pd_first_inds,
                       const uint32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const uint32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pp_prim_pair_count_local)
    {
        i = pp_first_inds_local[ij];
        j = pp_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = pp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pd_prim_pair_count) && (ij < pp_prim_pair_count_local) && (fabs(pp_mat_Q_local[ij] * pd_mat_Q[kl] * pd_mat_D[kl]) > eri_threshold))
        {
            const auto k = pd_first_inds[kl];
            const auto l = pd_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = pd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = j % 3;
            const auto c0 = k % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F5_t[6];

            gpu::computeBoysFunctionEriJ(F5_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F5_t[0] * (

                        0.25 / ( S1 * S2 ) * (
                            delta[a0][b0] * delta[d0][d1] * (QC_0)
                            + delta[a0][b0] * delta[c0][d1] * (QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (QD_1)
                        )

                    )

                    +

                    F5_t[0] * (

                        0.5 / S1 * (
                            delta[a0][b0] * (QD_0 * QD_1 * QC_0)
                        )

                    )

                    +

                    F5_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PA_0 * QC_0)
                            + delta[c0][d1] * (PB_0 * PA_0 * QD_0)
                            + delta[c0][d0] * (PB_0 * PA_0 * QD_1)
                        )

                    )

                    +

                    F5_t[0] * (

                        (
                            
                            + PB_0 * PA_0 * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[a0][b0] * delta[d0][d1] * (QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (QD_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (QD_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b0][c0] * delta[d0][d1] * (PA_0)
                            + delta[b0][d0] * delta[c0][d1] * (PA_0)
                            + delta[b0][d1] * delta[c0][d0] * (PA_0)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0)
                            + delta[a0][d0] * delta[c0][d1] * (PB_0)
                            + delta[a0][d1] * delta[c0][d0] * (PB_0)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PA_0 * PQ[c0] * (-1.0) + PB_0 * PA_0 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PA_0 * PQ[d0] * (-1.0) + PB_0 * PA_0 * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PA_0 * PQ[d1] * (-1.0) + PB_0 * PA_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S2 / ( S1 * S4 ) * (
                            delta[a0][b0] * (QD_0 * QD_1 * QC_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * QC_0 + PA_0 * PQ[b0] * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[a0] * QD_0 + PA_0 * PQ[b0] * QD_0)
                            + delta[c0][d0] * (PB_0 * PQ[a0] * QD_1 + PA_0 * PQ[b0] * QD_1)
                            + delta[b0][d1] * (PA_0 * QD_0 * QC_0)
                            + delta[b0][d0] * (PA_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (PA_0 * QD_0 * QD_1)
                            + delta[a0][d1] * (PB_0 * QD_0 * QC_0)
                            + delta[a0][d0] * (PB_0 * QD_1 * QC_0)
                            + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * QD_0 * QD_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[1] * (

                        S2 / S4 * (
                            
                            + PB_0 * PQ[a0] * QD_0 * QD_1 * QC_0
                            + PA_0 * PQ[b0] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PA_0 * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PA_0 * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PA_0 * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S2 * S2 ) / ( S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * QD_0 * QD_1 * QC_0
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[b0][c0] * delta[d0][d1] * (PA_0 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PA_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PA_0 * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PB_0 * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PB_0 * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PB_0 * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0])
                            + delta[a0][b0] * delta[c0][d1] * (PQ[d0])
                            + delta[a0][b0] * delta[c0][d0] * (PQ[d1])
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 / ( S4 * S4 ) * (
                            delta[a0][d0] * delta[b0][d1] * (QC_0)
                            + delta[a0][d1] * delta[b0][d0] * (QC_0)
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] + QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (PQ[a0])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0])
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0])
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0])
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0])
                            + delta[a0][b0] * delta[c0][d1] * (PQ[d0] + QD_0)
                            + delta[a0][b0] * delta[c0][d0] * (PQ[d1] + QD_1)
                            + delta[a0][c0] * delta[b0][d1] * (QD_0)
                            + delta[a0][d1] * delta[b0][c0] * (QD_0)
                            + delta[a0][c0] * delta[b0][d0] * (QD_1)
                            + delta[a0][d0] * delta[b0][c0] * (QD_1)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PA_0 * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PA_0 * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PA_0 * PQ[d1])
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0)
                            + delta[b0][d1] * (PQ[a0] * QD_0 * QC_0)
                            + delta[b0][d0] * (PQ[a0] * QD_1 * QC_0)
                            + delta[a0][d1] * (PQ[b0] * QD_0 * QC_0)
                            + delta[a0][d0] * (PQ[b0] * QD_1 * QC_0)
                            + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QD_1 * QC_0 + PQ[d1] * QD_0 * QC_0)
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1)
                            + delta[b0][c0] * (PQ[a0] * QD_0 * QD_1)
                            + delta[a0][c0] * (PQ[b0] * QD_0 * QD_1)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                            + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            
                            + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * QC_0 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[3] * (

                        0.25 * S1 / ( S4 * S4 * S4 ) * (
                            delta[b0][c0] * delta[d0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[a0] * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[a0] * (-1.0))
                            + delta[a0][c0] * delta[d0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[c0][d1] * (PQ[b0] * (-1.0))
                            + delta[a0][d1] * delta[c0][d0] * (PQ[b0] * (-1.0))
                            + delta[a0][d0] * delta[b0][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][d1] * delta[b0][d0] * (PQ[c0] * (-1.0))
                            + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][d1] * delta[b0][c0] * (PQ[d0] * (-1.0))
                            + delta[a0][b0] * delta[c0][d1] * (PQ[d0] * (-1.0))
                            + delta[a0][c0] * delta[b0][d0] * (PQ[d1] * (-1.0))
                            + delta[a0][d0] * delta[b0][c0] * (PQ[d1] * (-1.0))
                            + delta[a0][b0] * delta[c0][d0] * (PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * PQ[c0] + PA_0 * PQ[b0] * PQ[c0])
                            + delta[c0][d1] * (PB_0 * PQ[a0] * PQ[d0] + PA_0 * PQ[b0] * PQ[d0])
                            + delta[c0][d0] * (PB_0 * PQ[a0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d1])
                            + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PA_0 * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PB_0 * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][b0] * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                            + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                            + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        )

                    )

                    +

                    F5_t[4] * (

                        0.5 * ( S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                            + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                            + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                            + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                            + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                            + delta[b0][c0] * (PQ[a0] * PQ[d0] * PQ[d1])
                            + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                            + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                            + delta[a0][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                            + delta[a0][b0] * (PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    )

                    +

                    F5_t[5] * (

                        ( S1 * S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPPP(double*         mat_J,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   pp_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   pp_mat_Q,
                       const uint32_t* pp_first_inds_local,
                       const uint32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const uint32_t  pp_prim_pair_count_local,
                       const uint32_t* pp_first_inds,
                       const uint32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const uint32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pp_prim_pair_count_local)
    {
        i = pp_first_inds_local[ij];
        j = pp_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = pp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < pp_prim_pair_count) && (ij < pp_prim_pair_count_local) && (fabs(pp_mat_Q_local[ij] * pp_mat_Q[kl] * pp_mat_D[kl]) > eri_threshold))
        {
            const auto k = pp_first_inds[kl];
            const auto l = pp_second_inds[kl];

            const auto a_k = p_prim_info[k / 3 + p_prim_count * 0];

            const double r_k[3] = {p_prim_info[k / 3 + p_prim_count * 2],
                                   p_prim_info[k / 3 + p_prim_count * 3],
                                   p_prim_info[k / 3 + p_prim_count * 4]};

            const auto a_l = p_prim_info[l / 3 + p_prim_count * 0];

            const double r_l[3] = {p_prim_info[l / 3 + p_prim_count * 2],
                                   p_prim_info[l / 3 + p_prim_count * 3],
                                   p_prim_info[l / 3 + p_prim_count * 4]};

            const auto S_kl_00 = pp_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = j % 3;
            const auto c0 = k % 3;
            const auto d0 = l % 3;

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F4_t[5];

            gpu::computeBoysFunctionEriJ(F4_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F4_t[0] * (

                        0.5 / S1 * (
                            delta[a0][b0] * (QD_0 * QC_0)
                        )

                        + 0.5 / S2 * (
                            delta[c0][d0] * (PB_0 * PA_0)
                        )

                        + (

                            + PB_0 * PA_0 * QD_0 * QC_0
                        )

                        + 0.25 / ( S1 * S2 ) * (
                            delta[a0][b0] * delta[c0][d0]
                        )

                    )

                    + F4_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[a0][b0] * delta[c0][d0] * (-1.0)
                        )

                        + 0.25 / ( S2 * S4 ) * (
                            delta[a0][b0] * delta[c0][d0] * (-1.0)
                        )

                        + 0.5 * S1 / ( S2 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PA_0 * (-1.0))
                        )

                        + 0.5 * S2 / ( S1 * S4 ) * (
                            delta[a0][b0] * (QD_0 * QC_0 * (-1.0))
                        )

                        + 0.5 / S4 * (
                            delta[c0][d0] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b0][d0] * (PA_0 * QC_0)
                            + delta[b0][c0] * (PA_0 * QD_0)
                            + delta[a0][d0] * (PB_0 * QC_0)
                            + delta[a0][b0] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                            + delta[a0][c0] * (PB_0 * QD_0)
                        )

                        + S1 / S4 * (

                            + PB_0 * PA_0 * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PA_0 * PQ[d0] * QC_0 * (-1.0)
                        )

                        + S2 / S4 * (

                            + PB_0 * PQ[a0] * QD_0 * QC_0
                            + PA_0 * PQ[b0] * QD_0 * QC_0
                        )

                    )

                    + F4_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (

                            + PB_0 * PA_0 * PQ[c0] * PQ[d0]
                        )

                        + ( S1 * S2 ) / ( S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        )

                        + ( S2 * S2 ) / ( S4 * S4 ) * (

                            + PQ[a0] * PQ[b0] * QD_0 * QC_0
                        )

                        + 0.5 * S1 / ( S4 * S4 ) * (
                            delta[c0][d0] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[b0][d0] * (PA_0 * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][b0] * (PQ[c0] * PQ[d0])
                        )

                        + 0.5 * S2 / ( S4 * S4 ) * (
                            delta[b0][d0] * (PQ[a0] * QC_0)
                            + delta[a0][d0] * (PQ[b0] * QC_0)
                            + delta[a0][b0] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                            + delta[c0][d0] * (PQ[a0] * PQ[b0])
                            + delta[b0][c0] * (PQ[a0] * QD_0)
                            + delta[a0][c0] * (PQ[b0] * QD_0)
                        )

                        + 0.25 / ( S4 * S4 ) * (
                            delta[a0][c0] * delta[b0][d0]
                            + delta[a0][d0] * delta[b0][c0]
                            + delta[a0][b0] * delta[c0][d0]
                        )

                    )

                    + F4_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[c0] * PQ[d0]
                            + PA_0 * PQ[b0] * PQ[c0] * PQ[d0]
                        )

                        + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (

                            + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        )

                        + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[c0] * (-1.0))
                            + delta[b0][c0] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[c0] * (-1.0))
                            + delta[a0][c0] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][b0] * (PQ[c0] * PQ[d0] * (-1.0))
                        )

                    )

                    + F4_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * pp_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPSD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   sd_mat_Q,
                       const uint32_t* pp_first_inds_local,
                       const uint32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const uint32_t  pp_prim_pair_count_local,
                       const uint32_t* sd_first_inds,
                       const uint32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const uint32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < pp_prim_pair_count_local)
    {
        i = pp_first_inds_local[ij];
        j = pp_second_inds_local[ij];

        a_i = p_prim_info[i / 3 + p_prim_count * 0];

        r_i[0] = p_prim_info[i / 3 + p_prim_count * 2];
        r_i[1] = p_prim_info[i / 3 + p_prim_count * 3];
        r_i[2] = p_prim_info[i / 3 + p_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = pp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < sd_prim_pair_count) && (ij < pp_prim_pair_count_local) && (fabs(pp_mat_Q_local[ij] * sd_mat_Q[kl] * sd_mat_D[kl]) > eri_threshold))
        {
            const auto k = sd_first_inds[kl];
            const auto l = sd_second_inds[kl];

            const auto a_k = s_prim_info[k + s_prim_count * 0];

            const double r_k[3] = {s_prim_info[k + s_prim_count * 2],
                                   s_prim_info[k + s_prim_count * 3],
                                   s_prim_info[k + s_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = sd_pair_data[kl];

            const auto a0 = i % 3;
            const auto b0 = j % 3;
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F4_t[5];

            gpu::computeBoysFunctionEriJ(F4_t, S1 * S2 / S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

            const auto PA_0 = (a_j / S1) * rij[a0];
            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F4_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * PA_0)
                        )

                        + (

                            + PB_0 * PA_0 * QD_0 * QD_1
                        )

                        + 0.25 / ( S1 * S2 ) * (
                            delta[a0][b0] * delta[d0][d1]
                        )

                        + 0.5 / S1 * (
                            delta[a0][b0] * (QD_0 * QD_1)
                        )

                    )

                    + F4_t[1] * (

                        0.25 / ( S1 * S4 ) * (
                            delta[a0][b0] * delta[d0][d1] * (-1.0)
                        )

                        + 0.25 / ( S2 * S4 ) * (
                            delta[a0][b0] * delta[d0][d1] * (-1.0)
                        )

                        + 0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PA_0 * (-1.0))
                        )

                        + 0.5 * S2 / ( S1 * S4 ) * (
                            delta[a0][b0] * (QD_0 * QD_1 * (-1.0))
                        )

                        + 0.5 / S4 * (
                            delta[d0][d1] * (PB_0 * PQ[a0] + PA_0 * PQ[b0])
                            + delta[b0][d1] * (PA_0 * QD_0)
                            + delta[b0][d0] * (PA_0 * QD_1)
                            + delta[a0][b0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                            + delta[a0][d1] * (PB_0 * QD_0)
                            + delta[a0][d0] * (PB_0 * QD_1)
                        )

                        + S1 / S4 * (

                            + PB_0 * PA_0 * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PA_0 * PQ[d1] * QD_0 * (-1.0)
                        )

                        + S2 / S4 * (

                            + PB_0 * PQ[a0] * QD_0 * QD_1
                            + PA_0 * PQ[b0] * QD_0 * QD_1
                        )

                    )

                    + F4_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (

                            + PB_0 * PA_0 * PQ[d0] * PQ[d1]
                        )

                        + ( S1 * S2 ) / ( S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        )

                        + ( S2 * S2 ) / ( S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * QD_0 * QD_1
                        )

                        + 0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[a0] * (-1.0) + PA_0 * PQ[b0] * (-1.0))
                            + delta[b0][d1] * (PA_0 * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PA_0 * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PB_0 * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PB_0 * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PQ[d0] * PQ[d1])
                        )

                        + 0.25 / ( S4 * S4 ) * (
                            delta[a0][d0] * delta[b0][d1]
                            + delta[a0][d1] * delta[b0][d0]
                            + delta[a0][b0] * delta[d0][d1]
                        )

                        + 0.5 * S2 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0])
                            + delta[b0][d1] * (PQ[a0] * QD_0)
                            + delta[b0][d0] * (PQ[a0] * QD_1)
                            + delta[a0][d1] * (PQ[b0] * QD_0)
                            + delta[a0][d0] * (PQ[b0] * QD_1)
                            + delta[a0][b0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        )

                    )

                    + F4_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (

                            + PB_0 * PQ[a0] * PQ[d0] * PQ[d1]
                            + PA_0 * PQ[b0] * PQ[d0] * PQ[d1]
                        )

                        + 0.5 * ( S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0))
                            + delta[b0][d1] * (PQ[a0] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[a0] * PQ[d1] * (-1.0))
                            + delta[a0][d1] * (PQ[b0] * PQ[d0] * (-1.0))
                            + delta[a0][d0] * (PQ[b0] * PQ[d1] * (-1.0))
                            + delta[a0][b0] * (PQ[d0] * PQ[d1] * (-1.0))
                        )

                        + ( S1 * S2 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        )

                    )

                    + F4_t[4] * (

                        ( S1 * S1 * S2 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * sd_mat_D[kl] * 2.0;
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPDD(double*         mat_J,
                       const double*   s_prim_info,
                       const uint32_t  s_prim_count,
                       const double*   p_prim_info,
                       const uint32_t  p_prim_count,
                       const double*   d_prim_info,
                       const uint32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   dd_mat_Q,
                       const uint32_t* sp_first_inds_local,
                       const uint32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const uint32_t  sp_prim_pair_count_local,
                       const uint32_t* dd_first_inds,
                       const uint32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const uint32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)

{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004–1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ uint32_t skip_thread_block;
    __shared__ uint32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const uint32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double J_ij = 0.0;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00;
    uint32_t i, j;

    if (ij < sp_prim_pair_count_local)
    {
        i = sp_first_inds_local[ij];
        j = sp_second_inds_local[ij];

        a_i = s_prim_info[i + s_prim_count * 0];

        r_i[0] = s_prim_info[i + s_prim_count * 2];
        r_i[1] = s_prim_info[i + s_prim_count * 3];
        r_i[2] = s_prim_info[i + s_prim_count * 4];

        a_j = p_prim_info[j / 3 + p_prim_count * 0];

        r_j[0] = p_prim_info[j / 3 + p_prim_count * 2];
        r_j[1] = p_prim_info[j / 3 + p_prim_count * 3];
        r_j[2] = p_prim_info[j / 3 + p_prim_count * 4];

        S_ij_00 = sp_pair_data_local[ij];
    }

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        skip_thread_block = 0;

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;
    }

    __syncthreads();

    for (uint32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const uint32_t kl = m * TILE_DIM + threadIdx.y;

        if ((kl < dd_prim_pair_count) && (ij < sp_prim_pair_count_local) && (fabs(sp_mat_Q_local[ij] * dd_mat_Q[kl] * dd_mat_D[kl]) > eri_threshold))
        {
            const auto k = dd_first_inds[kl];
            const auto l = dd_second_inds[kl];

            const auto a_k = d_prim_info[k / 6 + d_prim_count * 0];

            const double r_k[3] = {d_prim_info[k / 6 + d_prim_count * 2],
                                   d_prim_info[k / 6 + d_prim_count * 3],
                                   d_prim_info[k / 6 + d_prim_count * 4]};

            const auto a_l = d_prim_info[l / 6 + d_prim_count * 0];

            const double r_l[3] = {d_prim_info[l / 6 + d_prim_count * 2],
                                   d_prim_info[l / 6 + d_prim_count * 3],
                                   d_prim_info[l / 6 + d_prim_count * 4]};

            const auto S_kl_00 = dd_pair_data[kl];

            const auto b0 = j % 3;
            const auto c0 = d_cart_inds[k % 6][0];
            const auto c1 = d_cart_inds[k % 6][1];
            const auto d0 = d_cart_inds[l % 6][0];
            const auto d1 = d_cart_inds[l % 6][1];

            const double rij[3] = {r_j[0] - r_i[0], r_j[1] - r_i[1], r_j[2] - r_i[2]};
            const double rkl[3] = {r_l[0] - r_k[0], r_l[1] - r_k[1], r_l[2] - r_k[2]};

            const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) / (a_k + a_l) - (a_i * r_i[0] + a_j * r_j[0]) / (a_i + a_j),
                                  (a_k * r_k[1] + a_l * r_l[1]) / (a_k + a_l) - (a_i * r_i[1] + a_j * r_j[1]) / (a_i + a_j),
                                  (a_k * r_k[2] + a_l * r_l[2]) / (a_k + a_l) - (a_i * r_i[2] + a_j * r_j[2]) / (a_i + a_j)};

            const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

            // Electron. J. Theor. Chem., Vol. 2, 66–70 (1997)
            // J. Chem. Phys. 84, 3963-3974 (1986)

            const auto S1 = a_i + a_j;
            const auto S2 = a_k + a_l;
            const auto S4 = S1 + S2;

            const auto Lambda = sqrt(4.0 * S1 * S2 / (MATH_CONST_PI * S4));

            double F5_t[6];

            gpu::computeBoysFunctionEriJ(F5_t, S1 * S2 / S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

            const auto PB_0 = (-a_i / S1) * rij[b0];
            const auto QC_0 = (a_l / S2) * rkl[c0];
            const auto QC_1 = (a_l / S2) * rkl[c1];
            const auto QD_0 = (-a_k / S2) * rkl[d0];
            const auto QD_1 = (-a_k / S2) * rkl[d1];

            const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F5_t[0] * (

                        0.5 / S2 * (
                            delta[d0][d1] * (PB_0 * QC_0 * QC_1)
                            + delta[c1][d1] * (PB_0 * QD_0 * QC_0)
                            + delta[c1][d0] * (PB_0 * QD_1 * QC_0)
                            + delta[c0][d1] * (PB_0 * QD_0 * QC_1)
                            + delta[c0][d0] * (PB_0 * QD_1 * QC_1)
                            + delta[c0][c1] * (PB_0 * QD_0 * QD_1)
                        )

                    )

                    +

                    F5_t[0] * (

                        (
                            
                            + PB_0 * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F5_t[0] * (

                        0.25 / ( S2 * S2 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 * S1 / ( S2 * S2 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0 * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PB_0 * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PB_0 * (-2.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.25 / ( S2 * S4 ) * (
                            delta[b0][c1] * delta[d0][d1] * (QC_0)
                            + delta[b0][d0] * delta[c1][d1] * (QC_0)
                            + delta[b0][d1] * delta[c1][d0] * (QC_0)
                            + delta[b0][c0] * delta[d0][d1] * (QC_1)
                            + delta[b0][d0] * delta[c0][d1] * (QC_1)
                            + delta[b0][d1] * delta[c0][d0] * (QC_1)
                            + delta[c0][c1] * delta[d0][d1] * (PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[b0])
                            + delta[b0][c0] * delta[c1][d1] * (QD_0)
                            + delta[b0][c1] * delta[c0][d1] * (QD_0)
                            + delta[b0][d1] * delta[c0][c1] * (QD_0)
                            + delta[b0][c0] * delta[c1][d0] * (QD_1)
                            + delta[b0][c1] * delta[c0][d0] * (QD_1)
                            + delta[b0][d0] * delta[c0][c1] * (QD_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 * S1 / ( S2 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * QD_0 * QD_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[1] * (

                        0.5 / S4 * (
                            delta[d0][d1] * (PQ[b0] * QC_0 * QC_1)
                            + delta[c1][d1] * (PQ[b0] * QD_0 * QC_0)
                            + delta[c1][d0] * (PQ[b0] * QD_1 * QC_0)
                            + delta[c0][d1] * (PQ[b0] * QD_0 * QC_1)
                            + delta[c0][d0] * (PQ[b0] * QD_1 * QC_1)
                            + delta[b0][d1] * (QD_0 * QC_0 * QC_1)
                            + delta[b0][d0] * (QD_1 * QC_0 * QC_1)
                            + delta[b0][c1] * (QD_0 * QD_1 * QC_0)
                            + delta[b0][c0] * (QD_0 * QD_1 * QC_1)
                            + delta[c0][c1] * (PQ[b0] * QD_0 * QD_1)
                        )

                    )

                    +

                    F5_t[1] * (

                        S1 / S4 * (
                            
                            + PB_0 * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PB_0 * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PB_0 * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PB_0 * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F5_t[1] * (

                        S2 / S4 * (
                            
                            + PQ[b0] * QD_0 * QD_1 * QC_0 * QC_1
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S1 ) / ( S4 * S4 ) * (
                            PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PB_0 * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PB_0 * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PB_0 * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PB_0 * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F5_t[2] * (

                        ( S1 * S2 ) / ( S4 * S4 ) * (
                            
                            + PQ[b0] * PQ[c0] * QD_0 * QD_1 * QC_1 * (-1.0)
                            + PQ[b0] * PQ[c1] * QD_0 * QD_1 * QC_0 * (-1.0)
                            + PQ[b0] * PQ[d0] * QD_1 * QC_0 * QC_1 * (-1.0)
                            + PQ[b0] * PQ[d1] * QD_0 * QC_0 * QC_1 * (-1.0)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 * S1 / ( S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[b0] * (-2.0))
                            + delta[c0][d0] * delta[c1][d1] * (PQ[b0] * (-2.0))
                            + delta[c1][d0] * delta[c0][d1] * (PQ[b0] * (-2.0))
                            + delta[b0][c1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[b0][d0] * delta[c1][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[b0][d1] * delta[c1][d0] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                            + delta[b0][c0] * delta[d0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][d1] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[b0][d1] * delta[c0][d0] * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                            + delta[b0][c0] * delta[c1][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[b0][c1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[b0][d1] * delta[c0][c1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                            + delta[b0][c0] * delta[c1][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[b0][c1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                            + delta[b0][d0] * delta[c0][c1] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * ( S1 * S1 ) / ( S2 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                            + delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                            + delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                            + delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F5_t[2] * (

                        0.5 * S1 / ( S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * QC_0 * QC_1 * (-1.0))
                            + delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * QD_0 * QC_0 * (-1.0))
                            + delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * QD_1 * QC_0 * (-1.0))
                            + delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * QD_0 * QC_1 * (-1.0))
                            + delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * QD_1 * QC_1 * (-1.0))
                            + delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * (-1.0))
                            + delta[b0][d1] * (PQ[c0] * QD_0 * QC_1 * (-1.0) + PQ[c1] * QD_0 * QC_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][d0] * (PQ[c0] * QD_1 * QC_1 * (-1.0) + PQ[c1] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                            + delta[b0][c1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_0 * (-1.0) + PQ[d1] * QD_0 * QC_0 * (-1.0))
                            + delta[b0][c0] * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QD_1 * QC_1 * (-1.0) + PQ[d1] * QD_0 * QC_1 * (-1.0))
                        )

                    )

                    +

                    F5_t[2] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S2 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PB_0)
                            + delta[c0][d0] * delta[c1][d1] * (PB_0)
                            + delta[c1][d0] * delta[c0][d1] * (PB_0)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            
                            + PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[3] * (

                        ( S1 * S1 * S2 ) / ( S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                            + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * QC_1
                            + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * QC_1
                            + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * QC_0
                            + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * QC_0
                            + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S1 * S1 ) / ( S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                            + delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                            + delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                            + delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                            + delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1)
                            + delta[b0][d1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                            + delta[b0][d0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                            + delta[b0][c1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                            + delta[b0][c0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                            + delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                        )

                    )

                    +

                    F5_t[3] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F5_t[3] * (

                        0.25 * ( S1 * S1 ) / ( S2 * S4 * S4 * S4 ) * (
                            delta[c0][c1] * delta[d0][d1] * (PQ[b0])
                            + delta[c0][d0] * delta[c1][d1] * (PQ[b0])
                            + delta[c1][d0] * delta[c0][d1] * (PQ[b0])
                            + delta[b0][c1] * delta[d0][d1] * (PQ[c0])
                            + delta[b0][d0] * delta[c1][d1] * (PQ[c0])
                            + delta[b0][d1] * delta[c1][d0] * (PQ[c0])
                            + delta[b0][c0] * delta[d0][d1] * (PQ[c1])
                            + delta[b0][d0] * delta[c0][d1] * (PQ[c1])
                            + delta[b0][d1] * delta[c0][d0] * (PQ[c1])
                            + delta[b0][c0] * delta[c1][d1] * (PQ[d0])
                            + delta[b0][c1] * delta[c0][d1] * (PQ[d0])
                            + delta[b0][d1] * delta[c0][c1] * (PQ[d0])
                            + delta[b0][c0] * delta[c1][d0] * (PQ[d1])
                            + delta[b0][c1] * delta[c0][d0] * (PQ[d1])
                            + delta[b0][d0] * delta[c0][c1] * (PQ[d1])
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    +

                    F5_t[4] * (

                        ( S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 ) * (
                            
                            + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                            + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                            + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                            + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    )

                    +

                    F5_t[4] * (

                        0.5 * ( S1 * S1 * S1 ) / ( S4 * S4 * S4 * S4 ) * (
                            delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                            + delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                            + delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                            + delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][d1] * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                            + delta[b0][d0] * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                            + delta[b0][c1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                            + delta[b0][c0] * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    )

                    +

                    F5_t[5] * (

                        ( S1 * S1 * S1 * S1 * S2 ) / ( S4 * S4 * S4 * S4 * S4 ) * (
                            PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    )

                    );

            // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
            //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
            ERIs[threadIdx.y][threadIdx.x] = eri_ijkl * dd_mat_D[kl] * (static_cast<double>(k != l) + 1.0);
        }
        else
        {
            ERIs[threadIdx.y][threadIdx.x] = 0.0;

            // indicator for early exit for thread block (ERIs[0][0] has the largest upper bound)
            if ((threadIdx.y == 0) && (threadIdx.x == 0)) skip_thread_block = 1;
        }

        __syncthreads();

        // early exit for thread block
        if (skip_thread_block == 1) break;

        if (threadIdx.y == 0)
        {
            for (uint32_t n = 0; n < TILE_DIM; n++)
            {
                J_ij += ERIs[n][threadIdx.x];
            }
        }

        __syncthreads();
    }

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        mat_J[ij] += J_ij;
    }
}


}  // namespace gpu
