//
//                                   VELOXCHEM
//              ----------------------------------------------------
//                          An Electronic Structure Code
//
//  SPDX-License-Identifier: BSD-3-Clause
//
//  Copyright 2018-2025 VeloxChem developers
//
//  Redistribution and use in source and binary forms, with or without modification,
//  are permitted provided that the following conditions are met:
//
//  1. Redistributions of source code must retain the above copyright notice, this
//     list of conditions and the following disclaimer.
//  2. Redistributions in binary form must reproduce the above copyright notice,
//     this list of conditions and the following disclaimer in the documentation
//     and/or other materials provided with the distribution.
//  3. Neither the name of the copyright holder nor the names of its contributors
//     may be used to endorse or promote products derived from this software without
//     specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
//  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
//  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
//  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
//  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
//  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
//  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
//  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
//  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
//  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#include "GpuRuntime.hpp"


#include "BoysFuncGPU.hpp"
#include "EriCoulomb.hpp"

namespace gpu {  // gpu namespace

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSSS(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   ss_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   ss_mat_Q,
                       const int32_t* ss_first_inds_local,
                       const int32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const int32_t  ss_prim_pair_count_local,
                       const int32_t* ss_first_inds,
                       const int32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const int32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    int32_t i, j;

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < ss_prim_pair_count_local)
    {
        i = rawValue(ss_first_inds_local, ij);
        j = rawValue(ss_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(s_prim_info, j + s_prim_count * 0);

        r_j[0] = rawValue(s_prim_info, j + s_prim_count * 2);
        r_j[1] = rawValue(s_prim_info, j + s_prim_count * 3);
        r_j[2] = rawValue(s_prim_info, j + s_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(ss_pair_data_local, ij);



    }

    for (int32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= ss_prim_pair_count_local) || (kl >= ss_prim_pair_count) || (fabs(rawValue(ss_mat_Q_local, ij) * rawValue(ss_mat_Q, kl) * rawValue(ss_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = ss_first_inds[kl];
        const auto l = ss_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(s_prim_info, l + s_prim_count * 0);

        const double r_l[3] = {rawValue(s_prim_info, l + s_prim_count * 2),
                               rawValue(s_prim_info, l + s_prim_count * 3),
                               rawValue(s_prim_info, l + s_prim_count * 4)};

        const auto S_kl_00 = rawValue(ss_pair_data, kl);


        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F0_t[1];

        gpu::computeBoysFunction(F0_t, S1 * S2 * inv_S4 * r2_PQ, 0, boys_func_table, boys_func_ft);


        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F0_t[0] * (

                    1.0 * (
                        1.0
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(ss_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSSP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   sp_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   sp_mat_Q,
                       const int32_t* ss_first_inds_local,
                       const int32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const int32_t  ss_prim_pair_count_local,
                       const int32_t* sp_first_inds,
                       const int32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const int32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    int32_t i, j;

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < ss_prim_pair_count_local)
    {
        i = rawValue(ss_first_inds_local, ij);
        j = rawValue(ss_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(s_prim_info, j + s_prim_count * 0);

        r_j[0] = rawValue(s_prim_info, j + s_prim_count * 2);
        r_j[1] = rawValue(s_prim_info, j + s_prim_count * 3);
        r_j[2] = rawValue(s_prim_info, j + s_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(ss_pair_data_local, ij);



    }

    for (int32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= ss_prim_pair_count_local) || (kl >= sp_prim_pair_count) || (fabs(rawValue(ss_mat_Q_local, ij) * rawValue(sp_mat_Q, kl) * rawValue(sp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sp_first_inds[kl];
        const auto l = sp_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(sp_pair_data, kl);

        const auto d0 = l % 3;

        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F1_t[2];

        gpu::computeBoysFunction(F1_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F1_t[0] * (

                    (
                        
                        + QD_0
                    )

                )

                + F1_t[1] * (

                    (-1.0) * S1 * inv_S4 * (
                        PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sp_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSSD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   sd_mat_Q,
                       const int32_t* ss_first_inds_local,
                       const int32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const int32_t  ss_prim_pair_count_local,
                       const int32_t* sd_first_inds,
                       const int32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const int32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    int32_t i, j;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < ss_prim_pair_count_local)
    {
        i = rawValue(ss_first_inds_local, ij);
        j = rawValue(ss_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(s_prim_info, j + s_prim_count * 0);

        r_j[0] = rawValue(s_prim_info, j + s_prim_count * 2);
        r_j[1] = rawValue(s_prim_info, j + s_prim_count * 3);
        r_j[2] = rawValue(s_prim_info, j + s_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(ss_pair_data_local, ij);



    }

    for (int32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= ss_prim_pair_count_local) || (kl >= sd_prim_pair_count) || (fabs(rawValue(ss_mat_Q_local, ij) * rawValue(sd_mat_Q, kl) * rawValue(sd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sd_first_inds[kl];
        const auto l = sd_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(sd_pair_data, kl);

        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F2_t[3];

        gpu::computeBoysFunction(F2_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F2_t[0] * (

                    (
                        
                        + QD_0 * QD_1
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1]
                    )

                )

                + F2_t[1] * (

                    (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1]
                    )

                    + S1 * inv_S4 * (
                        
                        + PQ[d0] * QD_1 * (-1.0)
                        + PQ[d1] * QD_0 * (-1.0)
                    )

                )

                + F2_t[2] * (

                    S1 * S1 * inv_S4 * inv_S4 * (
                        PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSPP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   pp_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   pp_mat_Q,
                       const int32_t* ss_first_inds_local,
                       const int32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const int32_t  ss_prim_pair_count_local,
                       const int32_t* pp_first_inds,
                       const int32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const int32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    int32_t i, j;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < ss_prim_pair_count_local)
    {
        i = rawValue(ss_first_inds_local, ij);
        j = rawValue(ss_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(s_prim_info, j + s_prim_count * 0);

        r_j[0] = rawValue(s_prim_info, j + s_prim_count * 2);
        r_j[1] = rawValue(s_prim_info, j + s_prim_count * 3);
        r_j[2] = rawValue(s_prim_info, j + s_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(ss_pair_data_local, ij);



    }

    for (int32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= ss_prim_pair_count_local) || (kl >= pp_prim_pair_count) || (fabs(rawValue(ss_mat_Q_local, ij) * rawValue(pp_mat_Q, kl) * rawValue(pp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pp_first_inds[kl];
        const auto l = pp_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(pp_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = l % 3;

        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F2_t[3];

        gpu::computeBoysFunction(F2_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F2_t[0] * (

                    (
                        
                        + QC_0 * QD_0
                    )

                    + 0.5 * inv_S2 * (
                        delta[c0][d0]
                    )

                )

                + F2_t[1] * (

                    (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[c0][d0]
                    )

                    + S1 * inv_S4 * (
                        
                        + PQ[c0] * QD_0 * (-1.0)
                        + PQ[d0] * QC_0 * (-1.0)
                    )

                )

                + F2_t[2] * (

                    S1 * S1 * inv_S4 * inv_S4 * (
                        PQ[c0] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pp_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSPD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* ss_first_inds_local,
                       const int32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const int32_t  ss_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    int32_t i, j;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < ss_prim_pair_count_local)
    {
        i = rawValue(ss_first_inds_local, ij);
        j = rawValue(ss_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(s_prim_info, j + s_prim_count * 0);

        r_j[0] = rawValue(s_prim_info, j + s_prim_count * 2);
        r_j[1] = rawValue(s_prim_info, j + s_prim_count * 3);
        r_j[2] = rawValue(s_prim_info, j + s_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(ss_pair_data_local, ij);



    }

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= ss_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(ss_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F3_t[4];

        gpu::computeBoysFunction(F3_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F3_t[0] * (

                    0.5 * inv_S2 * (
                        delta[c0][d1] * (QD_0)
                        + delta[c0][d0] * (QD_1)
                        + delta[d0][d1] * (QC_0)
                    )

                    + (
                        
                        + QC_0 * QD_0 * QD_1
                    )

                )

                + F3_t[1] * (

                    (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PQ[c0] + QC_0)
                        + delta[c0][d1] * (PQ[d0] + QD_0)
                        + delta[c0][d0] * (PQ[d1] + QD_1)
                    )

                    + S1 * inv_S4 * (
                        
                        + PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                )

                + F3_t[2] * (

                    S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PQ[c0] * PQ[d0] * QD_1
                        + PQ[c0] * PQ[d1] * QD_0
                        + PQ[d0] * PQ[d1] * QC_0
                    )

                    + 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[c0])
                        + delta[c0][d1] * (PQ[d0])
                        + delta[c0][d0] * (PQ[d1])
                    )

                )

                + F3_t[3] * (

                    (-1.0) * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[c0] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSSDD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   ss_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* ss_first_inds_local,
                       const int32_t* ss_second_inds_local,
                       const double*   ss_pair_data_local,
                       const int32_t  ss_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    int32_t i, j;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < ss_prim_pair_count_local)
    {
        i = rawValue(ss_first_inds_local, ij);
        j = rawValue(ss_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(s_prim_info, j + s_prim_count * 0);

        r_j[0] = rawValue(s_prim_info, j + s_prim_count * 2);
        r_j[1] = rawValue(s_prim_info, j + s_prim_count * 3);
        r_j[2] = rawValue(s_prim_info, j + s_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(ss_pair_data_local, ij);



    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= ss_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(ss_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F4_t[5];

        gpu::computeBoysFunction(F4_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F4_t[0] * (

                    0.5 * inv_S2 * (
                        delta[c1][d1] * (QC_0 * QD_0)
                        + delta[c1][d0] * (QC_0 * QD_1)
                        + delta[c0][d1] * (QC_1 * QD_0)
                        + delta[c0][d0] * (QC_1 * QD_1)
                        + delta[c0][c1] * (QD_0 * QD_1)
                        + delta[d0][d1] * (QC_0 * QC_1)
                    )

                    + (
                        
                        + QC_0 * QC_1 * QD_0 * QD_1
                    )

                    + 0.25 * inv_S2 * inv_S2 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0])
                    )

                )

                + F4_t[1] * (

                    (-0.5) * S1 * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0])
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                        + delta[c1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                    )

                    + S1 * inv_S4 * (
                        
                        + PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                )

                + F4_t[2] * (

                    0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                        + delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                        + delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                        + delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + 0.25 * S1 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0])
                    )

                )

                + F4_t[3] * (

                    (-0.5) * S1 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PQ[d0] * PQ[d1])
                    )

                    + S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                )

                + F4_t[4] * (

                    S1 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < ss_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPSS(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   ss_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   ss_mat_Q,
                       const int32_t* sp_first_inds_local,
                       const int32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const int32_t  sp_prim_pair_count_local,
                       const int32_t* ss_first_inds,
                       const int32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const int32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0;
    int32_t i, j, b0;

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sp_prim_pair_count_local)
    {
        i = rawValue(sp_first_inds_local, ij);
        j = rawValue(sp_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sp_pair_data_local, ij);

        b0 = j % 3;

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sp_prim_pair_count_local) || (kl >= ss_prim_pair_count) || (fabs(rawValue(sp_mat_Q_local, ij) * rawValue(ss_mat_Q, kl) * rawValue(ss_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = ss_first_inds[kl];
        const auto l = ss_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(s_prim_info, l + s_prim_count * 0);

        const double r_l[3] = {rawValue(s_prim_info, l + s_prim_count * 2),
                               rawValue(s_prim_info, l + s_prim_count * 3),
                               rawValue(s_prim_info, l + s_prim_count * 4)};

        const auto S_kl_00 = rawValue(ss_pair_data, kl);


        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F1_t[2];

        gpu::computeBoysFunction(F1_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);


        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F1_t[0] * (

                    (
                        
                        + PB_0
                    )

                )

                + F1_t[1] * (

                    S2 * inv_S4 * (
                        PQ[b0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(ss_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPSP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   sp_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   sp_mat_Q,
                       const int32_t* sp_first_inds_local,
                       const int32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const int32_t  sp_prim_pair_count_local,
                       const int32_t* sp_first_inds,
                       const int32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const int32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0;
    int32_t i, j, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sp_prim_pair_count_local)
    {
        i = rawValue(sp_first_inds_local, ij);
        j = rawValue(sp_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sp_pair_data_local, ij);

        b0 = j % 3;

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sp_prim_pair_count_local) || (kl >= sp_prim_pair_count) || (fabs(rawValue(sp_mat_Q_local, ij) * rawValue(sp_mat_Q, kl) * rawValue(sp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sp_first_inds[kl];
        const auto l = sp_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(sp_pair_data, kl);

        const auto d0 = l % 3;

        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F2_t[3];

        gpu::computeBoysFunction(F2_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F2_t[0] * (

                    (
                        
                        + PB_0 * QD_0
                    )

                )

                + F2_t[1] * (

                    S1 * inv_S4 * (
                        
                        + PB_0 * PQ[d0] * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PQ[b0] * QD_0
                    )

                    + 0.5 * inv_S4 * (
                        delta[b0][d0]
                    )

                )

                + F2_t[2] * (

                    (-1.0) * S1 * S2 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sp_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPSD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   sd_mat_Q,
                       const int32_t* sp_first_inds_local,
                       const int32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const int32_t  sp_prim_pair_count_local,
                       const int32_t* sd_first_inds,
                       const int32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const int32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0;
    int32_t i, j, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sp_prim_pair_count_local)
    {
        i = rawValue(sp_first_inds_local, ij);
        j = rawValue(sp_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sp_pair_data_local, ij);

        b0 = j % 3;

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sp_prim_pair_count_local) || (kl >= sd_prim_pair_count) || (fabs(rawValue(sp_mat_Q_local, ij) * rawValue(sd_mat_Q, kl) * rawValue(sd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sd_first_inds[kl];
        const auto l = sd_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(sd_pair_data, kl);

        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F3_t[4];

        gpu::computeBoysFunction(F3_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F3_t[0] * (

                    0.5 * inv_S2 * (
                        delta[d0][d1] * (PB_0)
                    )

                    + (
                        
                        + PB_0 * QD_0 * QD_1
                    )

                )

                + F3_t[1] * (

                    (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PB_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[b0][d1] * (QD_0)
                        + delta[b0][d0] * (QD_1)
                        + delta[d0][d1] * (PQ[b0])
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PQ[b0] * QD_0 * QD_1
                    )

                )

                + F3_t[2] * (

                    (-0.5) * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0])
                        + delta[b0][d1] * (PQ[d0])
                        + delta[b0][d0] * (PQ[d1])
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                    )

                )

                + F3_t[3] * (

                    S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPPP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   pp_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   pp_mat_Q,
                       const int32_t* sp_first_inds_local,
                       const int32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const int32_t  sp_prim_pair_count_local,
                       const int32_t* pp_first_inds,
                       const int32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const int32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0;
    int32_t i, j, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sp_prim_pair_count_local)
    {
        i = rawValue(sp_first_inds_local, ij);
        j = rawValue(sp_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sp_pair_data_local, ij);

        b0 = j % 3;

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sp_prim_pair_count_local) || (kl >= pp_prim_pair_count) || (fabs(rawValue(sp_mat_Q_local, ij) * rawValue(pp_mat_Q, kl) * rawValue(pp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pp_first_inds[kl];
        const auto l = pp_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(pp_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = l % 3;

        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F3_t[4];

        gpu::computeBoysFunction(F3_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F3_t[0] * (

                    0.5 * inv_S2 * (
                        delta[c0][d0] * (PB_0)
                    )

                    + (
                        
                        + PB_0 * QC_0 * QD_0
                    )

                )

                + F3_t[1] * (

                    (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[c0][d0] * (PB_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[b0][c0] * (QD_0)
                        + delta[c0][d0] * (PQ[b0])
                        + delta[b0][d0] * (QC_0)
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * QD_0 * (-1.0)
                        + PB_0 * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PQ[b0] * QC_0 * QD_0
                    )

                )

                + F3_t[2] * (

                    (-0.5) * S1 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PQ[b0])
                        + delta[b0][d0] * (PQ[c0])
                        + delta[b0][c0] * (PQ[d0])
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                    )

                )

                + F3_t[3] * (

                    S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[c0] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pp_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPPD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* sp_first_inds_local,
                       const int32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const int32_t  sp_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0;
    int32_t i, j, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sp_prim_pair_count_local)
    {
        i = rawValue(sp_first_inds_local, ij);
        j = rawValue(sp_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sp_pair_data_local, ij);

        b0 = j % 3;

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sp_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(sp_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F4_t[5];

        gpu::computeBoysFunction(F4_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F4_t[0] * (

                    0.5 * inv_S2 * (
                        delta[d0][d1] * (PB_0 * QC_0)
                        + delta[c0][d1] * (PB_0 * QD_0)
                        + delta[c0][d0] * (PB_0 * QD_1)
                    )

                    + (
                        
                        + PB_0 * QC_0 * QD_0 * QD_1
                    )

                )

                + F4_t[1] * (

                    (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[c0] + PB_0 * QC_0)
                        + delta[c0][d1] * (PB_0 * PQ[d0] + PB_0 * QD_0)
                        + delta[c0][d0] * (PB_0 * PQ[d1] + PB_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[c0][d1] * (PQ[b0] * QD_0)
                        + delta[c0][d0] * (PQ[b0] * QD_1)
                        + delta[b0][d1] * (QC_0 * QD_0)
                        + delta[b0][d0] * (QC_0 * QD_1)
                        + delta[b0][c0] * (QD_0 * QD_1)
                        + delta[d0][d1] * (PQ[b0] * QC_0)
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PQ[b0] * QC_0 * QD_0 * QD_1
                    )

                    + 0.25 * inv_S2 * inv_S4 * (
                        (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0])
                    )

                )

                + F4_t[2] * (

                    (-0.25) * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0])
                    )

                    + 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[c0])
                        + delta[c0][d1] * (PB_0 * PQ[d0])
                        + delta[c0][d0] * (PB_0 * PQ[d1])
                    )

                    + (-0.5) * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                        + delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                        + delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                        + delta[b0][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * PQ[d0] * QD_1
                        + PB_0 * PQ[c0] * PQ[d1] * QD_0
                        + PB_0 * PQ[d0] * PQ[d1] * QC_0
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                )

                + F4_t[3] * (

                    S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                    )

                    + 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[c0])
                        + delta[c0][d1] * (PQ[b0] * PQ[d0])
                        + delta[c0][d0] * (PQ[b0] * PQ[d1])
                        + delta[b0][d1] * (PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PQ[d0] * PQ[d1])
                    )

                )

                + F4_t[4] * (

                    (-1.0) * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSPDD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   sp_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* sp_first_inds_local,
                       const int32_t* sp_second_inds_local,
                       const double*   sp_pair_data_local,
                       const int32_t  sp_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0;
    int32_t i, j, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sp_prim_pair_count_local)
    {
        i = rawValue(sp_first_inds_local, ij);
        j = rawValue(sp_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sp_pair_data_local, ij);

        b0 = j % 3;

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sp_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(sp_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F5_t[6];

        gpu::computeBoysFunction(F5_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F5_t[0] * (

                    0.25 * inv_S2 * inv_S2 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PB_0 * QC_0 * QC_1)
                        + delta[c1][d1] * (PB_0 * QC_0 * QD_0)
                        + delta[c1][d0] * (PB_0 * QC_0 * QD_1)
                        + delta[c0][d1] * (PB_0 * QC_1 * QD_0)
                        + delta[c0][d0] * (PB_0 * QC_1 * QD_1)
                        + delta[c0][c1] * (PB_0 * QD_0 * QD_1)
                    )

                    + (
                        
                        + PB_0 * QC_0 * QC_1 * QD_0 * QD_1
                    )

                )

                + F5_t[1] * (

                    (-0.5) * S1 * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0)
                    )

                    + 0.25 * inv_S2 * inv_S4 * (
                        (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (QD_1)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[b0])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (QC_1)
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0 + PB_0 * QC_0 * QC_1)
                        + delta[c1][d1] * (PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0 + PB_0 * QC_0 * QD_0)
                        + delta[c1][d0] * (PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0 + PB_0 * QC_0 * QD_1)
                        + delta[c0][d1] * (PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1 + PB_0 * QC_1 * QD_0)
                        + delta[c0][d0] * (PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1 + PB_0 * QC_1 * QD_1)
                        + delta[c0][c1] * (PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0 + PB_0 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[c1][d1] * (PQ[b0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[b0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[b0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[b0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[b0] * QD_0 * QD_1)
                        + delta[b0][d1] * (QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (QC_1 * QD_0 * QD_1)
                        + delta[d0][d1] * (PQ[b0] * QC_0 * QC_1)
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_0 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                    )

                )

                + F5_t[2] * (

                    0.25 * S1 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0)
                    )

                    + 0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * (-2.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                    )

                    + 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                        + delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                    )

                    + (-0.5) * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0 + PQ[b0] * QC_0 * QC_1)
                        + delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0 + PQ[b0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0 + PQ[b0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1 + PQ[b0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1 + PQ[b0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0 + PQ[b0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[c0] * QC_1 * QD_0 + PQ[c1] * QC_0 * QD_0 + PQ[d0] * QC_0 * QC_1)
                        + delta[b0][d0] * (PQ[c0] * QC_1 * QD_1 + PQ[c1] * QC_0 * QD_1 + PQ[d1] * QC_0 * QC_1)
                        + delta[b0][c1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QC_0 * QD_1 + PQ[d1] * QC_0 * QD_0)
                        + delta[b0][c0] * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QC_1 * QD_1 + PQ[d1] * QC_1 * QD_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                )

                + F5_t[3] * (

                    (-0.5) * S1 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                        + delta[b0][d1] * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                        + delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                    )

                    + S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + 0.25 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[b0])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[d1])
                    )

                )

                + F5_t[4] * (

                    (-0.5) * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[b0][d0] * (PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[b0][c1] * (PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][c0] * (PQ[c1] * PQ[d0] * PQ[d1])
                    )

                    + S1 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                )

                + F5_t[5] * (

                    S1 * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPSS(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   ss_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   ss_mat_Q,
                       const int32_t* pp_first_inds_local,
                       const int32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const int32_t  pp_prim_pair_count_local,
                       const int32_t* ss_first_inds,
                       const int32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const int32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0;
    int32_t i, j, a0, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pp_prim_pair_count_local)
    {
        i = rawValue(pp_first_inds_local, ij);
        j = rawValue(pp_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pp_pair_data_local, ij);

        a0 = i % 3;
        b0 = j % 3;

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pp_prim_pair_count_local) || (kl >= ss_prim_pair_count) || (fabs(rawValue(pp_mat_Q_local, ij) * rawValue(ss_mat_Q, kl) * rawValue(ss_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = ss_first_inds[kl];
        const auto l = ss_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(s_prim_info, l + s_prim_count * 0);

        const double r_l[3] = {rawValue(s_prim_info, l + s_prim_count * 2),
                               rawValue(s_prim_info, l + s_prim_count * 3),
                               rawValue(s_prim_info, l + s_prim_count * 4)};

        const auto S_kl_00 = rawValue(ss_pair_data, kl);


        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F2_t[3];

        gpu::computeBoysFunction(F2_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);


        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F2_t[0] * (

                    (
                        
                        + PA_0 * PB_0
                    )

                    + 0.5 * inv_S1 * (
                        delta[a0][b0]
                    )

                )

                + F2_t[1] * (

                    (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[a0][b0]
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PQ[b0]
                        + PB_0 * PQ[a0]
                    )

                )

                + F2_t[2] * (

                    S2 * S2 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(ss_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPSP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   sp_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   sp_mat_Q,
                       const int32_t* pp_first_inds_local,
                       const int32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const int32_t  pp_prim_pair_count_local,
                       const int32_t* sp_first_inds,
                       const int32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const int32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0;
    int32_t i, j, a0, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pp_prim_pair_count_local)
    {
        i = rawValue(pp_first_inds_local, ij);
        j = rawValue(pp_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pp_pair_data_local, ij);

        a0 = i % 3;
        b0 = j % 3;

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pp_prim_pair_count_local) || (kl >= sp_prim_pair_count) || (fabs(rawValue(pp_mat_Q_local, ij) * rawValue(sp_mat_Q, kl) * rawValue(sp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sp_first_inds[kl];
        const auto l = sp_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(sp_pair_data, kl);

        const auto d0 = l % 3;

        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F3_t[4];

        gpu::computeBoysFunction(F3_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F3_t[0] * (

                    0.5 * inv_S1 * (
                        delta[a0][b0] * (QD_0)
                    )

                    + (
                        
                        + PA_0 * PB_0 * QD_0
                    )

                )

                + F3_t[1] * (

                    (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[a0][b0] * (QD_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[a0][d0] * (PB_0)
                        + delta[a0][b0] * (PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0)
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[d0] * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * QD_0
                        + PB_0 * PQ[a0] * QD_0
                    )

                )

                + F3_t[2] * (

                    (-1.0) * S1 * S2 * inv_S4 * inv_S4 * (
                        PA_0 * PQ[b0] * PQ[d0]
                        + PB_0 * PQ[a0] * PQ[d0]
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * QD_0
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b0][d0] * (PQ[a0])
                        + delta[a0][d0] * (PQ[b0])
                        + delta[a0][b0] * (PQ[d0])
                    )

                )

                + F3_t[3] * (

                    (-1.0) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sp_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPSD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   sd_mat_Q,
                       const int32_t* pp_first_inds_local,
                       const int32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const int32_t  pp_prim_pair_count_local,
                       const int32_t* sd_first_inds,
                       const int32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const int32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0;
    int32_t i, j, a0, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pp_prim_pair_count_local)
    {
        i = rawValue(pp_first_inds_local, ij);
        j = rawValue(pp_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pp_pair_data_local, ij);

        a0 = i % 3;
        b0 = j % 3;

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pp_prim_pair_count_local) || (kl >= sd_prim_pair_count) || (fabs(rawValue(pp_mat_Q_local, ij) * rawValue(sd_mat_Q, kl) * rawValue(sd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sd_first_inds[kl];
        const auto l = sd_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(sd_pair_data, kl);

        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F4_t[5];

        gpu::computeBoysFunction(F4_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F4_t[0] * (

                    0.5 * inv_S1 * (
                        delta[a0][b0] * (QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PB_0)
                    )

                    + (
                        
                        + PA_0 * PB_0 * QD_0 * QD_1
                    )

                    + 0.25 * inv_S1 * inv_S2 * (
                        delta[a0][b0] * delta[d0][d1]
                    )

                )

                + F4_t[1] * (

                    (-0.25) * inv_S1 * inv_S4 * (
                        delta[a0][b0] * delta[d0][d1]
                    )

                    + (-0.25) * inv_S2 * inv_S4 * (
                        delta[a0][b0] * delta[d0][d1]
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0)
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[a0][b0] * (QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[b0][d1] * (PA_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * QD_1)
                        + delta[d0][d1] * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + delta[a0][d1] * (PB_0 * QD_0)
                        + delta[a0][d0] * (PB_0 * QD_1)
                        + delta[a0][b0] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * QD_0 * QD_1
                        + PB_0 * PQ[a0] * QD_0 * QD_1
                    )

                )

                + F4_t[2] * (

                    0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[d1] * (-1.0))
                        + delta[a0][d1] * (PB_0 * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[d1] * (-1.0))
                        + delta[a0][b0] * (PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b0][d1] * (PQ[a0] * QD_0)
                        + delta[b0][d0] * (PQ[a0] * QD_1)
                        + delta[a0][d1] * (PQ[b0] * QD_0)
                        + delta[a0][d0] * (PQ[b0] * QD_1)
                        + delta[a0][b0] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[b0])
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * QD_0 * QD_1
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0])
                    )

                )

                + F4_t[3] * (

                    (-0.5) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0])
                        + delta[b0][d1] * (PQ[a0] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[d1])
                        + delta[a0][d1] * (PQ[b0] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[d1])
                        + delta[a0][b0] * (PQ[d0] * PQ[d1])
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                    )

                )

                + F4_t[4] * (

                    S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPPP(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   pp_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   pp_mat_Q,
                       const int32_t* pp_first_inds_local,
                       const int32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const int32_t  pp_prim_pair_count_local,
                       const int32_t* pp_first_inds,
                       const int32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const int32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0;
    int32_t i, j, a0, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pp_prim_pair_count_local)
    {
        i = rawValue(pp_first_inds_local, ij);
        j = rawValue(pp_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pp_pair_data_local, ij);

        a0 = i % 3;
        b0 = j % 3;

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pp_prim_pair_count_local) || (kl >= pp_prim_pair_count) || (fabs(rawValue(pp_mat_Q_local, ij) * rawValue(pp_mat_Q, kl) * rawValue(pp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pp_first_inds[kl];
        const auto l = pp_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(pp_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = l % 3;

        // Electron. J. Theor. Chem., Vol. 2, 66-70 (1997)
        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F4_t[5];

        gpu::computeBoysFunction(F4_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F4_t[0] * (

                    0.5 * inv_S1 * (
                        delta[a0][b0] * (QC_0 * QD_0)
                    )

                    + 0.5 * inv_S2 * (
                        delta[c0][d0] * (PA_0 * PB_0)
                    )

                    + (
                        
                        + PA_0 * PB_0 * QC_0 * QD_0
                    )

                    + 0.25 * inv_S1 * inv_S2 * (
                        delta[a0][b0] * delta[c0][d0]
                    )

                )

                + F4_t[1] * (

                    (-0.25) * inv_S1 * inv_S4 * (
                        delta[a0][b0] * delta[c0][d0]
                    )

                    + (-0.25) * inv_S2 * inv_S4 * (
                        delta[a0][b0] * delta[c0][d0]
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PB_0)
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[a0][b0] * (QC_0 * QD_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[b0][c0] * (PA_0 * QD_0)
                        + delta[c0][d0] * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + delta[a0][d0] * (PB_0 * QC_0)
                        + delta[a0][c0] * (PB_0 * QD_0)
                        + delta[a0][b0] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][d0] * (PA_0 * QC_0)
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * QC_0 * QD_0
                        + PB_0 * PQ[a0] * QC_0 * QD_0
                    )

                )

                + F4_t[2] * (

                    0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[c0] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[c0] * (-1.0))
                        + delta[a0][c0] * (PB_0 * PQ[d0] * (-1.0))
                        + delta[a0][b0] * (PQ[c0] * PQ[d0])
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b0][c0] * (PQ[a0] * QD_0)
                        + delta[a0][c0] * (PQ[b0] * QD_0)
                        + delta[a0][b0] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0])
                        + delta[b0][d0] * (PQ[a0] * QC_0)
                        + delta[a0][d0] * (PQ[b0] * QC_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * QC_0 * QD_0
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0])
                    )

                )

                + F4_t[3] * (

                    (-0.5) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PQ[a0] * PQ[b0])
                        + delta[b0][d0] * (PQ[a0] * PQ[c0])
                        + delta[b0][c0] * (PQ[a0] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[c0])
                        + delta[a0][c0] * (PQ[b0] * PQ[d0])
                        + delta[a0][b0] * (PQ[c0] * PQ[d0])
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[d0]
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                    )

                )

                + F4_t[4] * (

                    S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pp_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPPD(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* pp_first_inds_local,
                       const int32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const int32_t  pp_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0;
    int32_t i, j, a0, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pp_prim_pair_count_local)
    {
        i = rawValue(pp_first_inds_local, ij);
        j = rawValue(pp_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pp_pair_data_local, ij);

        a0 = i % 3;
        b0 = j % 3;

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pp_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(pp_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F5_t[6];

        gpu::computeBoysFunction(F5_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F5_t[0] * (

                    0.25 * inv_S1 * inv_S2 * (
                        delta[a0][b0] * delta[c0][d1] * (QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (QC_0)
                    )

                    + 0.5 * inv_S1 * (
                        delta[a0][b0] * (QC_0 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PB_0 * QC_0)
                        + delta[c0][d1] * (PA_0 * PB_0 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * QD_1)
                    )

                    + (
                        
                        + PA_0 * PB_0 * QC_0 * QD_0 * QD_1
                    )

                )

                + F5_t[1] * (

                    (-0.25) * inv_S1 * inv_S4 * (
                        delta[a0][b0] * delta[d0][d1] * (QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (QD_1)
                    )

                    + 0.25 * inv_S2 * inv_S4 * (
                        (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0)
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] + PA_0 * PB_0 * QC_0)
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[d0] + PA_0 * PB_0 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[d1] + PA_0 * PB_0 * QD_1)
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[a0][b0] * (QC_0 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[c0][d1] * (PA_0 * PQ[b0] * QD_0 + PB_0 * PQ[a0] * QD_0)
                        + delta[c0][d0] * (PA_0 * PQ[b0] * QD_1 + PB_0 * PQ[a0] * QD_1)
                        + delta[b0][d1] * (PA_0 * QC_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * QC_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * QD_0 * QD_1)
                        + delta[d0][d1] * (PA_0 * PQ[b0] * QC_0 + PB_0 * PQ[a0] * QC_0)
                        + delta[a0][d1] * (PB_0 * QC_0 * QD_0)
                        + delta[a0][d0] * (PB_0 * QC_0 * QD_1)
                        + delta[a0][c0] * (PB_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[d1] * QC_0 * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * QC_0 * QD_0 * QD_1
                        + PB_0 * PQ[a0] * QC_0 * QD_0 * QD_1
                    )

                )

                + F5_t[2] * (

                    0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PQ[c0])
                        + delta[a0][b0] * delta[c0][d1] * (PQ[d0])
                        + delta[a0][b0] * delta[c0][d0] * (PQ[d1])
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        delta[a0][b0] * delta[c0][d1] * (PQ[d0] + QD_0)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[d1] + QD_1)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (QD_1)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0])
                        + delta[a0][b0] * delta[d0][d1] * (PQ[c0] + QC_0)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (QC_0)
                    )

                    + 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[d1])
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b0] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1)
                        + delta[b0][d1] * (PQ[a0] * QC_0 * QD_0)
                        + delta[b0][d0] * (PQ[a0] * QC_0 * QD_1)
                        + delta[b0][c0] * (PQ[a0] * QD_0 * QD_1)
                        + delta[a0][d1] * (PQ[b0] * QC_0 * QD_0)
                        + delta[a0][d0] * (PQ[b0] * QC_0 * QD_1)
                        + delta[a0][c0] * (PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QC_0 * QD_1 + PQ[d1] * QC_0 * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PB_0 * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PB_0 * PQ[d0] * PQ[d1] * QC_0
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * QC_0 * QD_0 * QD_1
                    )

                )

                + F5_t[3] * (

                    (-0.25) * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0])
                        + (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[c0])
                        + (delta[a0][b0] * delta[c0][d1] + delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[d0])
                        + (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[d1])
                    )

                    + 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] + PB_0 * PQ[a0] * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[d0] + PB_0 * PQ[a0] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d1])
                        + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PB_0 * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PA_0 * PQ[d0] * PQ[d1])
                    )

                    + (-0.5) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] + PQ[a0] * PQ[b0] * QC_0)
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] + PQ[a0] * PQ[b0] * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] + PQ[a0] * PQ[b0] * QD_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                        + delta[a0][d1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                        + delta[a0][b0] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                    )

                    + S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                        + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                )

                + F5_t[4] * (

                    (-1.0) * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                    )

                    + 0.5 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0])
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                        + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[c0] * PQ[d0] * PQ[d1])
                    )

                )

                + F5_t[5] * (

                    (-1.0) * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPPDD(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pp_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* pp_first_inds_local,
                       const int32_t* pp_second_inds_local,
                       const double*   pp_pair_data_local,
                       const int32_t  pp_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0;
    int32_t i, j, a0, b0;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pp_prim_pair_count_local)
    {
        i = rawValue(pp_first_inds_local, ij);
        j = rawValue(pp_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(p_prim_info, j / 3 + p_prim_count * 0);

        r_j[0] = rawValue(p_prim_info, j / 3 + p_prim_count * 2);
        r_j[1] = rawValue(p_prim_info, j / 3 + p_prim_count * 3);
        r_j[2] = rawValue(p_prim_info, j / 3 + p_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pp_pair_data_local, ij);

        a0 = i % 3;
        b0 = j % 3;

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pp_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(pp_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F6_t[7];

        gpu::computeBoysFunction(F6_t, S1 * S2 * inv_S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F6_t[0] * (

                    0.25 * inv_S1 * inv_S2 * (
                        delta[a0][b0] * delta[c1][d1] * (QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (QC_0 * QC_1)
                    )

                    + 0.25 * inv_S2 * inv_S2 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0)
                    )

                    + 0.5 * inv_S1 * (
                        delta[a0][b0] * (QC_0 * QC_1 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PB_0 * QC_0 * QC_1)
                        + delta[c1][d1] * (PA_0 * PB_0 * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PB_0 * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PB_0 * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PB_0 * QD_0 * QD_1)
                    )

                    + (
                        
                        + PA_0 * PB_0 * QC_0 * QC_1 * QD_0 * QD_1
                    )

                    + 0.125 * inv_S1 * inv_S2 * inv_S2 * (
                        (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0])
                    )

                )

                + F6_t[1] * (

                    (-0.125) * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0])
                    )

                    + (-0.25) * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0])
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0)
                    )

                    + (-0.25) * inv_S1 * inv_S4 * (
                        delta[a0][b0] * delta[d0][d1] * (QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (QD_0 * QD_1)
                    )

                    + 0.25 * inv_S2 * inv_S4 * (
                        (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * QD_1)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * QC_1)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QC_0 * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QC_0 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QC_1 * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QC_1 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * QC_1)
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * QC_1 + PA_0 * PB_0 * PQ[c1] * QC_0 + PA_0 * PB_0 * QC_0 * QC_1)
                        + delta[c1][d1] * (PA_0 * PB_0 * PQ[c0] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_0 + PA_0 * PB_0 * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PB_0 * PQ[c0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_0 + PA_0 * PB_0 * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_1 + PA_0 * PB_0 * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_1 + PA_0 * PB_0 * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PB_0 * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QD_0 + PA_0 * PB_0 * QD_0 * QD_1)
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[a0][b0] * (QC_0 * QC_1 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[c1][d1] * (PA_0 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PQ[b0] * QC_1 * QD_0 + PB_0 * PQ[a0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PQ[b0] * QC_1 * QD_1 + PB_0 * PQ[a0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PA_0 * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PA_0 * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * QC_1 * QD_0 * QD_1)
                        + delta[d0][d1] * (PA_0 * PQ[b0] * QC_0 * QC_1 + PB_0 * PQ[a0] * QC_0 * QC_1)
                        + delta[a0][d1] * (PB_0 * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PB_0 * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PB_0 * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PB_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                        + PB_0 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1
                    )

                )

                + F6_t[2] * (

                    0.25 * S1 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0)
                    )

                    + 0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * (-2.0) + PB_0 * PQ[a0] * (-2.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                        + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * QD_1)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[b0] * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[b0] * QD_1)
                        + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (QD_0 * QD_1)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * QC_1)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[b0] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0] * QC_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (QC_0 * QC_1)
                    )

                    + 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] + PA_0 * PB_0 * PQ[c0] * QC_1 + PA_0 * PB_0 * PQ[c1] * QC_0)
                        + delta[c1][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] + PA_0 * PB_0 * PQ[c0] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PB_0 * PQ[c0] * PQ[d1] + PA_0 * PB_0 * PQ[c0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[c1] * PQ[d0] + PA_0 * PB_0 * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[c1] * PQ[d1] + PA_0 * PB_0 * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PB_0 * PQ[d0] * PQ[d1] + PA_0 * PB_0 * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QD_0)
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0))
                        + delta[c1][d1] * (PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QD_0 * (-1.0))
                        + delta[c1][d0] * (PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QD_1 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_1 * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_1 * QD_1 * (-1.0))
                        + delta[c0][c1] * (PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][c1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a0][d1] * (PB_0 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][c1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][c0] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[a0] * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PQ[a0] * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PQ[a0] * QC_1 * QD_0 * QD_1)
                        + delta[a0][d1] * (PQ[b0] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PQ[b0] * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PQ[b0] * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PB_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PB_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PB_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PB_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                    )

                    + 0.125 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0])
                    )

                    + 0.125 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * 2.0
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1])
                    )

                )

                + F6_t[3] * (

                    (-0.125) * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0] + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1])
                    )

                    + 0.25 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * PQ[d1])
                        + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[d1])
                    )

                    + 0.25 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * (-2.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0) + PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0) + PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0) + PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0) + PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0) + PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0) + PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                    )

                    + (-0.5) * S1 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PA_0 * PB_0 * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PA_0 * PB_0 * PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0)
                        + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0)
                        + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                    )

                    + (-0.5) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PQ[a0] * PQ[b0] * QC_0 * QC_1)
                        + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[c0] * QC_1 * QD_0 + PQ[a0] * PQ[c1] * QC_0 * QD_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                        + delta[b0][d0] * (PQ[a0] * PQ[c0] * QC_1 * QD_1 + PQ[a0] * PQ[c1] * QC_0 * QD_1 + PQ[a0] * PQ[d1] * QC_0 * QC_1)
                        + delta[b0][c1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[d1] * QC_0 * QD_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[d1] * QC_1 * QD_0)
                        + delta[a0][d1] * (PQ[b0] * PQ[c0] * QC_1 * QD_0 + PQ[b0] * PQ[c1] * QC_0 * QD_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                        + delta[a0][d0] * (PQ[b0] * PQ[c0] * QC_1 * QD_1 + PQ[b0] * PQ[c1] * QC_0 * QD_1 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QC_1 * QD_1 + PQ[b0] * PQ[d1] * QC_1 * QD_0)
                        + delta[a0][b0] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                    )

                    + S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                )

                + F6_t[4] * (

                    0.5 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[c1][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[c1][d0] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[c0][c1] * (PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][c1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][d1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][c1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][c0] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                        + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                    )

                    + S1 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + 0.25 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[d1])
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0] * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[b0] * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[b0] * PQ[d1])
                        + (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[c0] * PQ[c1])
                        + (delta[a0][b0] * delta[c1][d1] + delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PQ[c0] * PQ[d0])
                        + (delta[a0][b0] * delta[c1][d0] + delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PQ[c0] * PQ[d1])
                        + (delta[a0][b0] * delta[c0][d1] + delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[c1] * PQ[d0])
                        + (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[c1] * PQ[d1])
                        + (delta[a0][b0] * delta[c0][c1] + delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PQ[d0] * PQ[d1])
                    )

                )

                + F6_t[5] * (

                    (-0.5) * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[b0][c1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][c0] * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[a0][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                    )

                    + S1 * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                )

                + F6_t[6] * (

                    S1 * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pp_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDSS(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   ss_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   ss_mat_Q,
                       const int32_t* sd_first_inds_local,
                       const int32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const int32_t  sd_prim_pair_count_local,
                       const int32_t* ss_first_inds,
                       const int32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const int32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0, PB_1;
    int32_t i, j, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sd_prim_pair_count_local)
    {
        i = rawValue(sd_first_inds_local, ij);
        j = rawValue(sd_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sd_pair_data_local, ij);

        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sd_prim_pair_count_local) || (kl >= ss_prim_pair_count) || (fabs(rawValue(sd_mat_Q_local, ij) * rawValue(ss_mat_Q, kl) * rawValue(ss_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = ss_first_inds[kl];
        const auto l = ss_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(s_prim_info, l + s_prim_count * 0);

        const double r_l[3] = {rawValue(s_prim_info, l + s_prim_count * 2),
                               rawValue(s_prim_info, l + s_prim_count * 3),
                               rawValue(s_prim_info, l + s_prim_count * 4)};

        const auto S_kl_00 = rawValue(ss_pair_data, kl);


        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F2_t[3];

        gpu::computeBoysFunction(F2_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);


        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F2_t[0] * (

                    (
                        
                        + PB_0 * PB_1
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1]
                    )

                )

                + F2_t[1] * (

                    (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1]
                    )

                    + S2 * inv_S4 * (
                        
                        + PB_0 * PQ[b1]
                        + PB_1 * PQ[b0]
                    )

                )

                + F2_t[2] * (

                    S2 * S2 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[b1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(ss_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDSP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sp_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   sp_mat_Q,
                       const int32_t* sd_first_inds_local,
                       const int32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const int32_t  sd_prim_pair_count_local,
                       const int32_t* sp_first_inds,
                       const int32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const int32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0, PB_1;
    int32_t i, j, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sd_prim_pair_count_local)
    {
        i = rawValue(sd_first_inds_local, ij);
        j = rawValue(sd_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sd_pair_data_local, ij);

        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sd_prim_pair_count_local) || (kl >= sp_prim_pair_count) || (fabs(rawValue(sd_mat_Q_local, ij) * rawValue(sp_mat_Q, kl) * rawValue(sp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sp_first_inds[kl];
        const auto l = sp_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(sp_pair_data, kl);

        const auto d0 = l % 3;

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F3_t[4];

        gpu::computeBoysFunction(F3_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F3_t[0] * (

                    0.5 * inv_S1 * (
                        delta[b0][b1] * (QD_0)
                    )

                    + (
                        
                        + PB_0 * PB_1 * QD_0
                    )

                )

                + F3_t[1] * (

                    (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (QD_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[b1][d0] * (PB_0)
                        + delta[b0][d0] * (PB_1)
                        + delta[b0][b1] * (PQ[d0] * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[d0] * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * QD_0
                        + PB_1 * PQ[b0] * QD_0
                    )

                )

                + F3_t[2] * (

                    S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[d0] * (-1.0)
                        + PB_1 * PQ[b0] * PQ[d0] * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * QD_0
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][d0] * (PQ[b0])
                        + delta[b0][d0] * (PQ[b1])
                        + delta[b0][b1] * (PQ[d0])
                    )

                )

                + F3_t[3] * (

                    (-1.0) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[b1] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sp_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDSD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   sd_mat_Q,
                       const int32_t* sd_first_inds_local,
                       const int32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const int32_t  sd_prim_pair_count_local,
                       const int32_t* sd_first_inds,
                       const int32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const int32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0, PB_1;
    int32_t i, j, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sd_prim_pair_count_local)
    {
        i = rawValue(sd_first_inds_local, ij);
        j = rawValue(sd_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sd_pair_data_local, ij);

        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sd_prim_pair_count_local) || (kl >= sd_prim_pair_count) || (fabs(rawValue(sd_mat_Q_local, ij) * rawValue(sd_mat_Q, kl) * rawValue(sd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sd_first_inds[kl];
        const auto l = sd_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(sd_pair_data, kl);

        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F4_t[5];

        gpu::computeBoysFunction(F4_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F4_t[0] * (

                    0.5 * inv_S1 * (
                        delta[b0][b1] * (QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PB_0 * PB_1)
                    )

                    + (
                        
                        + PB_0 * PB_1 * QD_0 * QD_1
                    )

                    + 0.25 * inv_S1 * inv_S2 * (
                        delta[b0][b1] * delta[d0][d1]
                    )

                )

                + F4_t[1] * (

                    (-0.25) * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1]
                    )

                    + (-0.25) * inv_S2 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1]
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PB_1)
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + delta[b1][d1] * (PB_0 * QD_0)
                        + delta[b1][d0] * (PB_0 * QD_1)
                        + delta[b0][d1] * (PB_1 * QD_0)
                        + delta[b0][d0] * (PB_1 * QD_1)
                        + delta[b0][b1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * QD_0 * QD_1
                        + PB_1 * PQ[b0] * QD_0 * QD_1
                    )

                )

                + F4_t[2] * (

                    0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                        + delta[b1][d1] * (PB_0 * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PB_0 * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PB_1 * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PB_1 * PQ[d1] * (-1.0))
                        + delta[b0][b1] * (PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][d1] * (PQ[b0] * QD_0)
                        + delta[b1][d0] * (PQ[b0] * QD_1)
                        + delta[b0][d1] * (PQ[b1] * QD_0)
                        + delta[b0][d0] * (PQ[b1] * QD_1)
                        + delta[b0][b1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + delta[d0][d1] * (PQ[b0] * PQ[b1])
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * QD_0 * QD_1
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0])
                    )

                )

                + F4_t[3] * (

                    (-0.5) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[b1])
                        + delta[b1][d1] * (PQ[b0] * PQ[d0])
                        + delta[b1][d0] * (PQ[b0] * PQ[d1])
                        + delta[b0][d1] * (PQ[b1] * PQ[d0])
                        + delta[b0][d0] * (PQ[b1] * PQ[d1])
                        + delta[b0][b1] * (PQ[d0] * PQ[d1])
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[d0] * PQ[d1]
                        + PB_1 * PQ[b0] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                    )

                )

                + F4_t[4] * (

                    S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDPP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pp_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   pp_mat_Q,
                       const int32_t* sd_first_inds_local,
                       const int32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const int32_t  sd_prim_pair_count_local,
                       const int32_t* pp_first_inds,
                       const int32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const int32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0, PB_1;
    int32_t i, j, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sd_prim_pair_count_local)
    {
        i = rawValue(sd_first_inds_local, ij);
        j = rawValue(sd_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sd_pair_data_local, ij);

        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sd_prim_pair_count_local) || (kl >= pp_prim_pair_count) || (fabs(rawValue(sd_mat_Q_local, ij) * rawValue(pp_mat_Q, kl) * rawValue(pp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pp_first_inds[kl];
        const auto l = pp_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(pp_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = l % 3;

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F4_t[5];

        gpu::computeBoysFunction(F4_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F4_t[0] * (

                    0.5 * inv_S1 * (
                        delta[b0][b1] * (QC_0 * QD_0)
                    )

                    + 0.5 * inv_S2 * (
                        delta[c0][d0] * (PB_0 * PB_1)
                    )

                    + (
                        
                        + PB_0 * PB_1 * QC_0 * QD_0
                    )

                    + 0.25 * inv_S1 * inv_S2 * (
                        delta[b0][b1] * delta[c0][d0]
                    )

                )

                + F4_t[1] * (

                    (-0.25) * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0]
                    )

                    + (-0.25) * inv_S2 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0]
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[c0][d0] * (PB_0 * PB_1)
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (QC_0 * QD_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[c0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + delta[b1][d0] * (PB_0 * QC_0)
                        + delta[b1][c0] * (PB_0 * QD_0)
                        + delta[b0][d0] * (PB_1 * QC_0)
                        + delta[b0][c0] * (PB_1 * QD_0)
                        + delta[b0][b1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * QC_0 * QD_0
                        + PB_1 * PQ[b0] * QC_0 * QD_0
                    )

                )

                + F4_t[2] * (

                    0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                        + delta[b1][d0] * (PB_0 * PQ[c0] * (-1.0))
                        + delta[b1][c0] * (PB_0 * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PB_1 * PQ[c0] * (-1.0))
                        + delta[b0][c0] * (PB_1 * PQ[d0] * (-1.0))
                        + delta[b0][b1] * (PQ[c0] * PQ[d0])
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][c0] * (PQ[b0] * QD_0)
                        + delta[b0][c0] * (PQ[b1] * QD_0)
                        + delta[b0][b1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + delta[c0][d0] * (PQ[b0] * PQ[b1])
                        + delta[b1][d0] * (PQ[b0] * QC_0)
                        + delta[b0][d0] * (PQ[b1] * QC_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * QC_0 * QD_0
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0])
                    )

                )

                + F4_t[3] * (

                    (-0.5) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PQ[b0] * PQ[b1])
                        + delta[b1][d0] * (PQ[b0] * PQ[c0])
                        + delta[b1][c0] * (PQ[b0] * PQ[d0])
                        + delta[b0][d0] * (PQ[b1] * PQ[c0])
                        + delta[b0][c0] * (PQ[b1] * PQ[d0])
                        + delta[b0][b1] * (PQ[c0] * PQ[d0])
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[d0]
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                    )

                )

                + F4_t[4] * (

                    S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pp_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDPD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* sd_first_inds_local,
                       const int32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const int32_t  sd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0, PB_1;
    int32_t i, j, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sd_prim_pair_count_local)
    {
        i = rawValue(sd_first_inds_local, ij);
        j = rawValue(sd_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sd_pair_data_local, ij);

        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(sd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F5_t[6];

        gpu::computeBoysFunction(F5_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F5_t[0] * (

                    0.25 * inv_S1 * inv_S2 * (
                        delta[b0][b1] * delta[c0][d1] * (QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (QC_0)
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1] * (QC_0 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PB_0 * PB_1 * QC_0)
                        + delta[c0][d1] * (PB_0 * PB_1 * QD_0)
                        + delta[c0][d0] * (PB_0 * PB_1 * QD_1)
                    )

                    + (
                        
                        + PB_0 * PB_1 * QC_0 * QD_0 * QD_1
                    )

                )

                + F5_t[1] * (

                    (-0.25) * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (QD_1)
                    )

                    + 0.25 * inv_S2 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PB_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PB_1)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] + PB_0 * PB_1 * QC_0)
                        + delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] + PB_0 * PB_1 * QD_0)
                        + delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] + PB_0 * PB_1 * QD_1)
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (QC_0 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                        + delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                        + delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                        + delta[b1][d1] * (PB_0 * QC_0 * QD_0)
                        + delta[b1][d0] * (PB_0 * QC_0 * QD_1)
                        + delta[b1][c0] * (PB_0 * QD_0 * QD_1)
                        + delta[b0][d1] * (PB_1 * QC_0 * QD_0)
                        + delta[b0][d0] * (PB_1 * QC_0 * QD_1)
                        + delta[b0][c0] * (PB_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[d1] * QC_0 * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PB_1 * PQ[b0] * QC_0 * QD_0 * QD_1
                    )

                )

                + F5_t[2] * (

                    0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PB_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PB_1 * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PQ[c0])
                        + delta[b0][b1] * delta[c0][d1] * (PQ[d0])
                        + delta[b0][b1] * delta[c0][d0] * (PQ[d1])
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d1] * (PQ[d0] + QD_0)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[d1] + QD_1)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (QD_1)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[b0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[b1])
                        + delta[b0][b1] * delta[d0][d1] * (PQ[c0] + QC_0)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (QC_0)
                    )

                    + 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PB_1 * PQ[c0])
                        + delta[c0][d1] * (PB_0 * PB_1 * PQ[d0])
                        + delta[c0][d0] * (PB_0 * PB_1 * PQ[d1])
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                        + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                        + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                        + delta[b1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[b1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b1][c0] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][c0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0)
                        + delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1)
                        + delta[b1][d1] * (PQ[b0] * QC_0 * QD_0)
                        + delta[b1][d0] * (PQ[b0] * QC_0 * QD_1)
                        + delta[b1][c0] * (PQ[b0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[b1] * QC_0 * QD_0)
                        + delta[b0][d0] * (PQ[b1] * QC_0 * QD_1)
                        + delta[b0][c0] * (PQ[b1] * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QC_0 * QD_1 + PQ[d1] * QC_0 * QD_0)
                        + delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1
                        + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0
                        + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1
                    )

                )

                + F5_t[3] * (

                    (-0.25) * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[b0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[b1])
                        + (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[c0])
                        + (delta[b0][b1] * delta[c0][d1] + delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[d0])
                        + (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[d1])
                    )

                    + 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                        + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                        + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                        + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PB_0 * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PB_1 * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                    )

                    + (-0.5) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] + PQ[b0] * PQ[b1] * QC_0)
                        + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] + PQ[b0] * PQ[b1] * QD_0)
                        + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] + PQ[b0] * PQ[b1] * QD_1)
                        + delta[b1][d1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                        + delta[b0][d1] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                        + delta[b0][b1] * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                    )

                    + S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                )

                + F5_t[4] * (

                    S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                    )

                    + 0.5 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0])
                        + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1])
                        + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[c0] * PQ[d0] * PQ[d1])
                    )

                )

                + F5_t[5] * (

                    (-1.0) * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockSDDD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   sd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* sd_first_inds_local,
                       const int32_t* sd_second_inds_local,
                       const double*   sd_pair_data_local,
                       const int32_t  sd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PB_0, PB_1;
    int32_t i, j, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < sd_prim_pair_count_local)
    {
        i = rawValue(sd_first_inds_local, ij);
        j = rawValue(sd_second_inds_local, ij);

        a_i = rawValue(s_prim_info, i + s_prim_count * 0);

        r_i[0] = rawValue(s_prim_info, i + s_prim_count * 2);
        r_i[1] = rawValue(s_prim_info, i + s_prim_count * 3);
        r_i[2] = rawValue(s_prim_info, i + s_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(sd_pair_data_local, ij);

        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= sd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(sd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F6_t[7];

        gpu::computeBoysFunction(F6_t, S1 * S2 * inv_S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F6_t[0] * (

                    0.25 * inv_S1 * inv_S2 * (
                        delta[b0][b1] * delta[c1][d1] * (QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                    )

                    + 0.25 * inv_S2 * inv_S2 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0 * PB_1)
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1] * (QC_0 * QC_1 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1)
                        + delta[c1][d1] * (PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[c1][d0] * (PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[c0][d1] * (PB_0 * PB_1 * QC_1 * QD_0)
                        + delta[c0][d0] * (PB_0 * PB_1 * QC_1 * QD_1)
                        + delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1)
                    )

                    + (
                        
                        + PB_0 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1
                    )

                    + 0.125 * inv_S1 * inv_S2 * inv_S2 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0])
                    )

                )

                + F6_t[1] * (

                    (-0.125) * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0])
                    )

                    + (-0.25) * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0])
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0 * PB_1)
                    )

                    + (-0.25) * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (QC_0 * QC_1)
                        + delta[b0][b1] * delta[c1][d1] * (QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (QD_0 * QD_1)
                    )

                    + 0.25 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PB_0 * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PB_0 * QC_1)
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PB_0 * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PB_0 * QD_1)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PB_1 * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PB_1 * QC_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PB_1 * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PB_1 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QC_0 * QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QC_0 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QC_1 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0 + PB_0 * PB_1 * QC_0 * QC_1)
                        + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0 + PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0 + PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1 + PB_0 * PB_1 * QC_1 * QD_0)
                        + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1 + PB_0 * PB_1 * QC_1 * QD_1)
                        + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0 + PB_0 * PB_1 * QD_0 * QD_1)
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (QC_0 * QC_1 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                        + delta[c1][d1] * (PB_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[b0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PB_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[b0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PB_0 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[b0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PB_0 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[b0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        + delta[b1][d1] * (PB_0 * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PB_0 * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PB_0 * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PB_0 * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PB_1 * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PB_1 * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PB_1 * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PB_1 * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PB_1 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                    )

                )

                + F6_t[2] * (

                    0.25 * S1 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0 * PB_1)
                    )

                    + 0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                        + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[b0] * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[b0] * QD_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[b1] * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[b1] * QD_1)
                        + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (QC_0 * QD_0)
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (QC_0 * QD_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (QC_1 * QD_0)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (QC_1 * QD_1)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (QD_0 * QD_1)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[b0] * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[b0] * QC_1)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[b1] * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[b1] * QC_1)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (QC_0 * QC_1)
                    )

                    + 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0)
                        + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0)
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0))
                        + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QD_0 * (-1.0))
                        + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QD_1 * (-1.0))
                        + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_1 * QD_0 * (-1.0))
                        + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_1 * QD_1 * (-1.0))
                        + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0))
                        + delta[b1][d1] * (PB_0 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][d0] * (PB_0 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][c1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b1][c0] * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][d1] * (PB_1 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][d0] * (PB_1 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][c1] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b0][c0] * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[b1][d1] * (PQ[b0] * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PQ[b0] * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PQ[b0] * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[b1] * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PQ[b1] * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PQ[b1] * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                    )

                    + 0.125 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0])
                    )

                    + 0.125 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * 2.0
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1])
                    )

                )

                + F6_t[3] * (

                    (-0.125) * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1])
                    )

                    + 0.25 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PB_0 * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PB_0 * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PB_0 * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PB_0 * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PB_1 * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PB_1 * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PB_1 * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PB_1 * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0))
                    )

                    + 0.25 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PQ[c0] * PQ[c1] * (-1.0) + PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PQ[c0] * PQ[d0] * (-1.0) + PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PQ[c0] * PQ[d1] * (-1.0) + PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PQ[c1] * PQ[d0] * (-1.0) + PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PQ[c1] * PQ[d1] * (-1.0) + PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PQ[d0] * PQ[d1] * (-1.0) + PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                    )

                    + (-0.5) * S1 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0)
                        + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                    )

                    + (-0.5) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        + delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[b1][d1] * (PQ[b0] * PQ[c0] * QC_1 * QD_0 + PQ[b0] * PQ[c1] * QC_0 * QD_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                        + delta[b1][d0] * (PQ[b0] * PQ[c0] * QC_1 * QD_1 + PQ[b0] * PQ[c1] * QC_0 * QD_1 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                        + delta[b1][c1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        + delta[b1][c0] * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QC_1 * QD_1 + PQ[b0] * PQ[d1] * QC_1 * QD_0)
                        + delta[b0][d1] * (PQ[b1] * PQ[c0] * QC_1 * QD_0 + PQ[b1] * PQ[c1] * QC_0 * QD_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                        + delta[b0][d0] * (PQ[b1] * PQ[c0] * QC_1 * QD_1 + PQ[b1] * PQ[c1] * QC_0 * QD_1 + PQ[b1] * PQ[d1] * QC_0 * QC_1)
                        + delta[b0][c1] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[b0][c0] * (PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QC_1 * QD_1 + PQ[b1] * PQ[d1] * QC_1 * QD_0)
                        + delta[b0][b1] * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                    )

                    + S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                    )

                )

                + F6_t[4] * (

                    0.5 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][d1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b1][c1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][c0] * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][c1] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][c0] * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                    )

                    + S1 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                    )

                    + 0.25 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[b0] * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[b0] * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[b0] * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[b0] * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[b1] * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[b1] * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[b1] * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[b1] * PQ[d1])
                        + (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[c0] * PQ[c1])
                        + (delta[b0][b1] * delta[c1][d1] + delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PQ[c0] * PQ[d0])
                        + (delta[b0][b1] * delta[c1][d0] + delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PQ[c0] * PQ[d1])
                        + (delta[b0][b1] * delta[c0][d1] + delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[c1] * PQ[d0])
                        + (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[c1] * PQ[d1])
                        + (delta[b0][b1] * delta[c0][c1] + delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PQ[d0] * PQ[d1])
                    )

                )

                + F6_t[5] * (

                    (-0.5) * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[b1][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[b1][d0] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[b1][c1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b1][c0] * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[b0][d0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[b0][c1] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][c0] * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                    )

                    + S1 * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                    )

                )

                + F6_t[6] * (

                    S1 * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < sd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDSS(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   ss_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   ss_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* ss_first_inds,
                       const int32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const int32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (ss_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= ss_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(ss_mat_Q, kl) * rawValue(ss_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = ss_first_inds[kl];
        const auto l = ss_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(s_prim_info, l + s_prim_count * 0);

        const double r_l[3] = {rawValue(s_prim_info, l + s_prim_count * 2),
                               rawValue(s_prim_info, l + s_prim_count * 3),
                               rawValue(s_prim_info, l + s_prim_count * 4)};

        const auto S_kl_00 = rawValue(ss_pair_data, kl);


        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F3_t[4];

        gpu::computeBoysFunction(F3_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);


        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F3_t[0] * (

                    0.5 * inv_S1 * (
                        delta[a0][b1] * (PB_0)
                        + delta[a0][b0] * (PB_1)
                        + delta[b0][b1] * (PA_0)
                    )

                    + (
                        
                        + PA_0 * PB_0 * PB_1
                    )

                )

                + F3_t[1] * (

                    0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * (-1.0) + PQ[a0])
                        + delta[a0][b1] * (PB_0 * (-1.0) + PQ[b0])
                        + delta[a0][b0] * (PB_1 * (-1.0) + PQ[b1])
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1]
                        + PA_0 * PB_1 * PQ[b0]
                        + PB_0 * PB_1 * PQ[a0]
                    )

                )

                + F3_t[2] * (

                    (-0.5) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0])
                        + delta[a0][b1] * (PQ[b0])
                        + delta[a0][b0] * (PQ[b1])
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1]
                        + PB_0 * PQ[a0] * PQ[b1]
                        + PB_1 * PQ[a0] * PQ[b0]
                    )

                )

                + F3_t[3] * (

                    S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[b1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(ss_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDSP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sp_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   sp_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* sp_first_inds,
                       const int32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const int32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (sp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= sp_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(sp_mat_Q, kl) * rawValue(sp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sp_first_inds[kl];
        const auto l = sp_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(sp_pair_data, kl);

        const auto d0 = l % 3;

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F4_t[5];

        gpu::computeBoysFunction(F4_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F4_t[0] * (

                    0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * QD_0)
                        + delta[a0][b1] * (PB_0 * QD_0)
                        + delta[a0][b0] * (PB_1 * QD_0)
                    )

                    + (
                        
                        + PA_0 * PB_0 * PB_1 * QD_0
                    )

                )

                + F4_t[1] * (

                    0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                        + delta[a0][b1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                        + delta[a0][b0] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[b1][d0] * (PA_0 * PB_0)
                        + delta[b0][d0] * (PA_0 * PB_1)
                        + delta[b0][b1] * (PA_0 * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PB_1)
                        + delta[a0][b1] * (PB_0 * PQ[d0] * (-1.0))
                        + delta[a0][b0] * (PB_1 * PQ[d0] * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PB_1 * PQ[d0] * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * QD_0
                        + PA_0 * PB_1 * PQ[b0] * QD_0
                        + PB_0 * PB_1 * PQ[a0] * QD_0
                    )

                    + 0.25 * inv_S1 * inv_S4 * (
                        (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1])
                    )

                )

                + F4_t[2] * (

                    (-0.25) * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1])
                    )

                    + (-0.5) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * QD_0)
                        + delta[a0][b1] * (PQ[b0] * QD_0)
                        + delta[a0][b0] * (PQ[b1] * QD_0)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][d0] * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + delta[a0][d0] * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + delta[a0][b1] * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + delta[a0][b0] * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                        + delta[b0][b1] * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * PQ[d0] * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[d0] * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * QD_0
                        + PB_0 * PQ[a0] * PQ[b1] * QD_0
                        + PB_1 * PQ[a0] * PQ[b0] * QD_0
                    )

                )

                + F4_t[3] * (

                    (-1.0) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        PA_0 * PQ[b0] * PQ[b1] * PQ[d0]
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d0]
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d0]
                    )

                    + S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[b1] * QD_0
                    )

                    + 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][d0] * (PQ[a0] * PQ[b0])
                        + delta[b0][d0] * (PQ[a0] * PQ[b1])
                        + delta[b0][b1] * (PQ[a0] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[b1])
                        + delta[a0][b1] * (PQ[b0] * PQ[d0])
                        + delta[a0][b0] * (PQ[b1] * PQ[d0])
                    )

                )

                + F4_t[4] * (

                    (-1.0) * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sp_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDSD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   sd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* sd_first_inds,
                       const int32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const int32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (sd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= sd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(sd_mat_Q, kl) * rawValue(sd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sd_first_inds[kl];
        const auto l = sd_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(sd_pair_data, kl);

        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F5_t[6];

        gpu::computeBoysFunction(F5_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F5_t[0] * (

                    0.25 * inv_S1 * inv_S2 * (
                        delta[a0][b1] * delta[d0][d1] * (PB_0)
                        + delta[a0][b0] * delta[d0][d1] * (PB_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0)
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * QD_0 * QD_1)
                        + delta[a0][b1] * (PB_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PB_1 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1)
                    )

                    + (
                        
                        + PA_0 * PB_0 * PB_1 * QD_0 * QD_1
                    )

                )

                + F5_t[1] * (

                    0.25 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * (-1.0) + PQ[a0])
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * (-1.0) + PQ[b0])
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * (-1.0) + PQ[b1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (QD_1)
                    )

                    + (-0.25) * inv_S2 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0)
                        + delta[a0][b1] * delta[d0][d1] * (PB_0)
                        + delta[a0][b0] * delta[d0][d1] * (PB_1)
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1)
                    )

                    + 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                        + delta[a0][b1] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] + PA_0 * PB_1 * PQ[b0] + PB_0 * PB_1 * PQ[a0])
                        + delta[b1][d1] * (PA_0 * PB_0 * QD_0)
                        + delta[b1][d0] * (PA_0 * PB_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PB_1 * QD_0)
                        + delta[b0][d0] * (PA_0 * PB_1 * QD_1)
                        + delta[b0][b1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][d1] * (PB_0 * PB_1 * QD_0)
                        + delta[a0][d0] * (PB_0 * PB_1 * QD_1)
                        + delta[a0][b1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b0] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * QD_0 * QD_1
                        + PA_0 * PB_1 * PQ[b0] * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1
                    )

                )

                + F5_t[2] * (

                    (-0.25) * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PQ[a0])
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0])
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (QD_1)
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        delta[a0][b1] * delta[d0][d1] * (PQ[b0] * (-1.0) + PB_0)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PB_0)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * (-1.0) + PB_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PB_1)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * (-1.0) + PA_0)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[d0] * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[d1] * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0)
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PB_0 * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PB_0 * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PB_1 * PQ[d1] * (-1.0))
                        + delta[a0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PB_1 * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PA_0 * PQ[d0] * PQ[d1])
                    )

                    + (-0.5) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[b1] * QD_0 * QD_1)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][d1] * (PA_0 * PQ[b0] * QD_0 + PB_0 * PQ[a0] * QD_0)
                        + delta[b1][d0] * (PA_0 * PQ[b0] * QD_1 + PB_0 * PQ[a0] * QD_1)
                        + delta[b0][d1] * (PA_0 * PQ[b1] * QD_0 + PB_1 * PQ[a0] * QD_0)
                        + delta[b0][d0] * (PA_0 * PQ[b1] * QD_1 + PB_1 * PQ[a0] * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                        + delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0])
                        + delta[a0][d1] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                        + delta[a0][d0] * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                        + delta[a0][b1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PB_1 * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1
                    )

                )

                + F5_t[3] * (

                    0.5 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][d1] * (PQ[a0] * PQ[b0] * QD_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * QD_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * QD_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * QD_0)
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * QD_1)
                        + delta[a0][b1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1]
                        + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1
                    )

                    + 0.25 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0])
                        + (delta[a0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[b0])
                        + (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[b1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[d1])
                    )

                )

                + F5_t[4] * (

                    (-0.5) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1])
                        + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[d0])
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[d1])
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[d1])
                        + delta[b0][b1] * (PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[d1])
                        + delta[a0][b1] * (PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[b1] * PQ[d0] * PQ[d1])
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1]
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                    )

                )

                + F5_t[5] * (

                    S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(sd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDPP(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pp_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   pp_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* pp_first_inds,
                       const int32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const int32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (pp_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= pp_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(pp_mat_Q, kl) * rawValue(pp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pp_first_inds[kl];
        const auto l = pp_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(pp_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = l % 3;

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F5_t[6];

        gpu::computeBoysFunction(F5_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F5_t[0] * (

                    0.25 * inv_S1 * inv_S2 * (
                        delta[a0][b1] * delta[c0][d0] * (PB_0)
                        + delta[a0][b0] * delta[c0][d0] * (PB_1)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0)
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * QC_0 * QD_0)
                        + delta[a0][b1] * (PB_0 * QC_0 * QD_0)
                        + delta[a0][b0] * (PB_1 * QC_0 * QD_0)
                    )

                    + 0.5 * inv_S2 * (
                        delta[c0][d0] * (PA_0 * PB_0 * PB_1)
                    )

                    + (
                        
                        + PA_0 * PB_0 * PB_1 * QC_0 * QD_0
                    )

                )

                + F5_t[1] * (

                    0.25 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0] * (PA_0 * (-1.0) + PQ[a0])
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * (-1.0) + PQ[b0])
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * (-1.0) + PQ[b1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (QC_0)
                    )

                    + (-0.25) * inv_S2 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0] * (PA_0)
                        + delta[a0][b1] * delta[c0][d0] * (PB_0)
                        + delta[a0][b0] * delta[c0][d0] * (PB_1)
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PB_0 * PB_1)
                    )

                    + 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * QC_0 * QD_0 * (-1.0) + PQ[a0] * QC_0 * QD_0)
                        + delta[a0][b1] * (PB_0 * QC_0 * QD_0 * (-1.0) + PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b0] * (PB_1 * QC_0 * QD_0 * (-1.0) + PQ[b1] * QC_0 * QD_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] + PA_0 * PB_1 * PQ[b0] + PB_0 * PB_1 * PQ[a0])
                        + delta[b1][d0] * (PA_0 * PB_0 * QC_0)
                        + delta[b1][c0] * (PA_0 * PB_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * PB_1 * QC_0)
                        + delta[b0][c0] * (PA_0 * PB_1 * QD_0)
                        + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][d0] * (PB_0 * PB_1 * QC_0)
                        + delta[a0][c0] * (PB_0 * PB_1 * QD_0)
                        + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * QC_0 * QD_0
                        + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_0
                        + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0
                    )

                )

                + F5_t[2] * (

                    (-0.25) * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0] * (PQ[a0])
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0])
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (QD_0)
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        delta[a0][b1] * delta[c0][d0] * (PQ[b0] * (-1.0) + PB_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PB_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * (-1.0) + PB_1)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PB_1)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * (-1.0) + PA_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[d0] * (-1.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0)
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PB_0 * PQ[c0] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PB_0 * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PB_1 * PQ[c0] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                        + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0])
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0])
                    )

                    + (-0.5) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * QC_0 * QD_0)
                        + delta[a0][b1] * (PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b0] * (PQ[b1] * QC_0 * QD_0)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][c0] * (PA_0 * PQ[b0] * QD_0 + PB_0 * PQ[a0] * QD_0)
                        + delta[b0][c0] * (PA_0 * PQ[b1] * QD_0 + PB_1 * PQ[a0] * QD_0)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0])
                        + delta[b1][d0] * (PA_0 * PQ[b0] * QC_0 + PB_0 * PQ[a0] * QC_0)
                        + delta[a0][d0] * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                        + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PQ[b1] * QC_0 + PB_1 * PQ[a0] * QC_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_0
                        + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0
                        + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0
                    )

                )

                + F5_t[3] * (

                    0.5 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                        + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                    )

                    + 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0)
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * QC_0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0]
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0]
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0
                    )

                    + 0.25 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0])
                        + (delta[a0][b1] * delta[c0][d0] + delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[b0])
                        + (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[b1])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[d0])
                    )

                )

                + F5_t[4] * (

                    (-0.5) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0])
                        + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0])
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0])
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0])
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0])
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0]
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                    )

                )

                + F5_t[5] * (

                    S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pp_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDPD(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F6_t[7];

        gpu::computeBoysFunction(F6_t, S1 * S2 * inv_S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F6_t[0] * (

                    0.25 * inv_S1 * inv_S2 * (
                        delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0)
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * QC_0 * QD_0 * QD_1)
                        + delta[a0][b1] * (PB_0 * QC_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PB_1 * QC_0 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1 * QC_0)
                        + delta[c0][d1] * (PA_0 * PB_0 * PB_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * PB_1 * QD_1)
                    )

                    + (
                        
                        + PA_0 * PB_0 * PB_1 * QC_0 * QD_0 * QD_1
                    )

                )

                + F6_t[1] * (

                    0.25 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (QC_0 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (QC_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (QD_0 * QD_1)
                    )

                    + 0.25 * inv_S2 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PB_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PB_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PB_1)
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] + PA_0 * PB_0 * PB_1 * QC_0)
                        + delta[c0][d1] * (PA_0 * PB_0 * PB_1 * PQ[d0] + PA_0 * PB_0 * PB_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * PB_1 * PQ[d1] + PA_0 * PB_0 * PB_1 * QD_1)
                    )

                    + 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b1] * (PB_0 * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PB_1 * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QC_0 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] * QC_0 + PA_0 * PB_1 * PQ[b0] * QC_0 + PB_0 * PB_1 * PQ[a0] * QC_0)
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[b1] * QD_0 + PA_0 * PB_1 * PQ[b0] * QD_0 + PB_0 * PB_1 * PQ[a0] * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] * QD_1 + PA_0 * PB_1 * PQ[b0] * QD_1 + PB_0 * PB_1 * PQ[a0] * QD_1)
                        + delta[b1][d1] * (PA_0 * PB_0 * QC_0 * QD_0)
                        + delta[b1][d0] * (PA_0 * PB_0 * QC_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PB_0 * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PB_1 * QC_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * PB_1 * QC_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PB_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][d1] * (PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[a0][d0] * (PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[a0][c0] * (PB_0 * PB_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][b0] * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0 * QD_1
                    )

                    + 0.125 * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0])
                    )

                )

                + F6_t[2] * (

                    (-0.125) * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0])
                    )

                    + (-0.125) * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0])
                    )

                    + 0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PB_1 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PB_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0])
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0])
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1])
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0])
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0])
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0])
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0])
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1])
                    )

                    + (-0.25) * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (QC_0 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (QC_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (QD_0 * QD_1)
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * QD_1)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PB_0 * QC_0)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PB_0 * QD_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PB_0 * QD_1)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PB_1 * QC_0)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PB_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PB_1 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * QC_0)
                    )

                    + 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PB_0 * PB_1 * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PB_0 * PB_1 * PQ[d1])
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PB_0 * PQ[b1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[b1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[b1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PB_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                    )

                    + (-0.5) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[b1] * QC_0 * QD_0 * QD_1)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[c0][d1] * (PA_0 * PQ[b0] * PQ[b1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0)
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1)
                        + delta[b1][d1] * (PA_0 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a0] * QC_0 * QD_0)
                        + delta[b1][d0] * (PA_0 * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a0] * QC_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[d1] * QC_0 * QD_0)
                        + delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0)
                        + delta[a0][d1] * (PB_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][d0] * (PB_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[b0] * QC_0 * QD_1)
                        + delta[a0][c0] * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[d1] * QC_0 * QD_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0 * QD_1
                    )

                )

                + F6_t[3] * (

                    0.25 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[c0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[d1] * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PB_0 * PQ[c0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PB_0 * PQ[d0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PB_0 * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PB_1 * PQ[c0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PB_1 * PQ[d1] * (-1.0))
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[d0] * PQ[d1])
                    )

                    + 0.25 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[b0] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[b0] * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[b1] * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[b1] * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b1])
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0] * PQ[b1])
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[b0] * QC_0)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[b1] * QC_0)
                    )

                    + 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] + PA_0 * PB_1 * PQ[b0] * PQ[c0] + PB_0 * PB_1 * PQ[a0] * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] + PA_0 * PB_1 * PQ[b0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[d1] + PA_0 * PB_1 * PQ[b0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[d1])
                        + delta[b1][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PA_0 * PB_0 * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PA_0 * PB_0 * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PA_0 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                    )

                    + 0.5 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                    )

                    + 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                        + delta[b1][d1] * (PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + delta[b1][c0] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * QC_0 * QD_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0 * QD_1)
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                    )

                    + S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                    + S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1
                    )

                    + 0.125 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0])
                    )

                )

                + F6_t[4] * (

                    (-0.25) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b1])
                        + (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[c0])
                        + (delta[b0][b1] * delta[c0][d1] + delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * PQ[d0])
                        + (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[d1])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0] * PQ[b1])
                        + (delta[a0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[b0] * PQ[c0])
                        + (delta[a0][b1] * delta[c0][d1] + delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[b0] * PQ[d0])
                        + (delta[a0][b1] * delta[c0][d0] + delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[b0] * PQ[d1])
                        + (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[b1] * PQ[c0])
                        + (delta[a0][b0] * delta[c0][d1] + delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[b1] * PQ[d0])
                        + (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[b1] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1])
                        + delta[b1][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                    )

                    + (-0.5) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] + PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                        + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                    )

                    + S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                    )

                    + S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                    )

                )

                + F6_t[5] * (

                    (-1.0) * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                    )

                    + 0.5 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                        + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                    )

                )

                + F6_t[6] * (

                    (-1.0) * S1 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD0(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[2];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[0] * 0.125 * inv_S1 * inv_S2 * inv_S2 * (
                        (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PB_0)
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PB_1)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0)
                        )

                    + F7_t[0] * 0.25 * inv_S1 * inv_S2 * (
                        delta[b0][b1] * delta[c1][d1] * (PA_0 * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PB_0 * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PB_0 * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PB_1 * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PB_1 * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * QC_1)
                        )

                    + F7_t[0] * 0.25 * inv_S2 * inv_S2 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PB_1)
                        )

                    + F7_t[0] * 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PB_0 * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PB_1 * QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F7_t[0] * 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1 * QC_0 * QC_1)
                        + delta[c1][d1] * (PA_0 * PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PB_0 * PB_1 * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * PB_1 * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PB_0 * PB_1 * QD_0 * QD_1)
                        )

                    + F7_t[0] * (
                        + PA_0 * PB_0 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F7_t[1] * 0.125 * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * (-1.0) + PQ[a0])
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * (-1.0) + PQ[b0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PB_1 * (-1.0) + PQ[b1])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (QD_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (QD_1)
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (QC_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (QC_1)
                        )

                    + F7_t[1] * (-0.25) * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0)
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PB_0)
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PB_1)
                        )

                    + F7_t[1] * (-0.5) * S1 * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PB_1)
                        )

                    + F7_t[1] * 0.25 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * QC_0 * QC_1 * (-1.0) + PQ[a0] * QC_0 * QC_1)
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * QC_0 * QD_0 * (-1.0) + PQ[a0] * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * QC_0 * QD_1 * (-1.0) + PQ[a0] * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * QC_1 * QD_0 * (-1.0) + PQ[a0] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * QC_1 * QD_1 * (-1.0) + PQ[a0] * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * QC_0 * QC_1 * (-1.0) + PQ[b0] * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PB_0 * QC_0 * QD_0 * (-1.0) + PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PB_0 * QC_0 * QD_1 * (-1.0) + PQ[b0] * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * QC_1 * QD_0 * (-1.0) + PQ[b0] * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * QC_1 * QD_1 * (-1.0) + PQ[b0] * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * QC_0 * QC_1 * (-1.0) + PQ[b1] * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PB_1 * QC_0 * QD_0 * (-1.0) + PQ[b1] * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PB_1 * QC_0 * QD_1 * (-1.0) + PQ[b1] * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * QC_1 * QD_0 * (-1.0) + PQ[b1] * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * QC_1 * QD_1 * (-1.0) + PQ[b1] * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (QC_0 * QC_1 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (QC_0 * QC_1 * QD_1)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (QC_0 * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (QC_1 * QD_0 * QD_1)
                        )

                    + F7_t[1] * 0.25 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PQ[b1] + PA_0 * PB_1 * PQ[b0] + PB_0 * PB_1 * PQ[a0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * QC_1)
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * QD_1)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PB_1 * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PB_1 * QC_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PB_1 * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PB_1 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PA_0 * QC_0 * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PA_0 * QC_0 * QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PA_0 * QC_0 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PA_0 * QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PA_0 * QC_1 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PA_0 * QD_0 * QD_1 * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * PB_1 * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PB_1 * QC_1)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * PB_1 * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * PB_1 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PB_0 * QC_0 * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PB_0 * QC_0 * QD_0 * (-1.0))
                        + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PB_0 * QC_0 * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PB_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PB_0 * QC_1 * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PB_0 * QD_0 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_1 * QC_0 * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_1 * QC_0 * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_1 * QC_0 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_1 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_1 * QC_1 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_1 * QD_0 * QD_1 * (-1.0))
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD1(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[3];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[1] * (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * QC_1 + PA_0 * PB_0 * PB_1 * PQ[c1] * QC_0 + PA_0 * PB_0 * PB_1 * QC_0 * QC_1)
                        + delta[c1][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_0 + PA_0 * PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_0 + PA_0 * PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PB_0 * PB_1 * PQ[c1] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_1 + PA_0 * PB_0 * PB_1 * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * PB_1 * PQ[c1] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_1 + PA_0 * PB_0 * PB_1 * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PB_0 * PB_1 * PQ[d0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[d1] * QD_0 + PA_0 * PB_0 * PB_1 * QD_0 * QD_1)
                        )

                    + F7_t[1] * 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PB_0 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PB_1 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F7_t[1] * 0.5 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] * QC_0 * QC_1 + PA_0 * PB_1 * PQ[b0] * QC_0 * QC_1 + PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1)
                        + delta[c1][d1] * (PA_0 * PB_0 * PQ[b1] * QC_0 * QD_0 + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_0 + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PB_0 * PQ[b1] * QC_0 * QD_1 + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_1 + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[b1] * QC_1 * QD_0 + PA_0 * PB_1 * PQ[b0] * QC_1 * QD_0 + PB_0 * PB_1 * PQ[a0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] * QC_1 * QD_1 + PA_0 * PB_1 * PQ[b0] * QC_1 * QD_1 + PB_0 * PB_1 * PQ[a0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PB_0 * PQ[b1] * QD_0 * QD_1 + PA_0 * PB_1 * PQ[b0] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1)
                        + delta[b1][d1] * (PA_0 * PB_0 * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PA_0 * PB_0 * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PA_0 * PB_0 * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PB_0 * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PB_1 * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PA_0 * PB_1 * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PA_0 * PB_1 * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PB_1 * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PA_0 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][d1] * (PB_0 * PB_1 * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PB_0 * PB_1 * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PB_0 * PB_1 * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PB_0 * PB_1 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PB_0 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b0] * (PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        )

                    + F7_t[1] * S1 * inv_S4 * (
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )

                    + F7_t[1] * S2 * inv_S4 * (
                        + PA_0 * PB_0 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_0 * PB_1 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F7_t[2] * 0.125 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PB_0)
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PB_1)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0)
                        )

                    + F7_t[2] * (-0.125) * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0])
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[b0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[b1])
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (QC_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (QC_1)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (QD_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (QD_1)
                        )

                    + F7_t[2] * 0.125 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * (-2.0) + PB_0 * 2.0)
                        + (delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PB_0)
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[b1] * (-2.0) + PB_1 * 2.0)
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PB_1)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * (-2.0) + PA_0 * 2.0)
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[c1] * (-1.0) + QC_1 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0)
                        )

                    + F7_t[2] * 0.25 * S1 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PB_1)
                        )

                    + F7_t[2] * 0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PQ[b1] * (-2.0) + PA_0 * PB_1 * PQ[b0] * (-2.0) + PB_0 * PB_1 * PQ[a0] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PQ[c0] * (-1.0) + PA_0 * PB_0 * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PQ[c1] * (-1.0) + PA_0 * PB_0 * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[d0] * (-1.0) + PA_0 * PB_0 * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[d1] * (-1.0) + PA_0 * PB_0 * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PB_1 * PQ[c0] * (-1.0) + PA_0 * PB_1 * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PB_1 * PQ[c1] * (-1.0) + PA_0 * PB_1 * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PB_1 * PQ[d0] * (-1.0) + PA_0 * PB_1 * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PB_1 * PQ[d1] * (-1.0) + PA_0 * PB_1 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1)
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PB_1 * PQ[c1] * (-1.0) + PB_0 * PB_1 * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0)
                        + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                        + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1)
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1)
                        + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0)
                        + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                        + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1)
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] + PB_1 * PQ[c1] * QD_1 + PB_1 * PQ[d1] * QC_1)
                        + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0)
                        )

                    + F7_t[2] * (-0.25) * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PQ[a0] * QC_0 * QC_1)
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (QC_0 * QC_1 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (QC_0 * QC_1 * QD_1)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (QC_0 * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (QC_1 * QD_0 * QD_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD2(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[3];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[2] * 0.25 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PQ[b0] * QD_0 + PB_0 * PQ[a0] * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[b0] * QD_1 + PB_0 * PQ[a0] * QD_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PQ[b1] * QD_0 + PB_1 * PQ[a0] * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[b1] * QD_1 + PB_1 * PQ[a0] * QD_1)
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0 + PA_0 * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0 + PA_0 * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[c1] * QD_0 + PA_0 * PQ[d0] * QC_1 + PA_0 * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[c1] * QD_1 + PA_0 * PQ[d1] * QC_1 + PA_0 * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0 + PA_0 * QD_0 * QD_1)
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * QC_0 * QD_0)
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * QC_0 * QD_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * QC_1 * QD_0)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * QC_1 * QD_1)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * QD_0 * QD_1)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * QC_0 + PB_0 * PQ[a0] * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * QC_1 + PB_0 * PQ[a0] * QC_1)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PQ[b1] * QC_1 + PB_1 * PQ[b0] * QC_1)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QC_1 + PB_0 * PQ[c1] * QC_0 + PB_0 * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0 + PB_0 * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0 + PB_0 * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[c1] * QD_0 + PB_0 * PQ[d0] * QC_1 + PB_0 * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[c1] * QD_1 + PB_0 * PQ[d1] * QC_1 + PB_0 * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0 + PB_0 * QD_0 * QD_1)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PB_0 * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PB_0 * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PB_0 * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PB_0 * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PB_0 * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PB_0 * QD_0 * QD_1)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PQ[b1] * QC_0 + PB_1 * PQ[a0] * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[b1] * QC_1 + PB_1 * PQ[a0] * QC_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QC_1 + PB_1 * PQ[c1] * QC_0 + PB_1 * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0 + PB_1 * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0 + PB_1 * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[c1] * QD_0 + PB_1 * PQ[d0] * QC_1 + PB_1 * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[c1] * QD_1 + PB_1 * PQ[d1] * QC_1 + PB_1 * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0 + PB_1 * QD_0 * QD_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PB_1 * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PB_1 * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PB_1 * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PB_1 * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PB_1 * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PB_1 * QD_0 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QC_1 + PA_0 * PQ[c1] * QC_0 + PA_0 * QC_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * QC_1 * QD_0 * (-1.0) + PQ[c1] * QC_0 * QD_0 * (-1.0) + PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * QC_1 * QD_1 * (-1.0) + PQ[c1] * QC_0 * QD_1 * (-1.0) + PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QC_1 * QD_1 * (-1.0) + PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * QC_0 * QC_1)
                        )

                    + F7_t[2] * 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] + PA_0 * PB_0 * PB_1 * PQ[c0] * QC_1 + PA_0 * PB_0 * PB_1 * PQ[c1] * QC_0)
                        + delta[c1][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0] + PA_0 * PB_0 * PB_1 * PQ[c0] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d1] + PA_0 * PB_0 * PB_1 * PQ[c0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d0] + PA_0 * PB_0 * PB_1 * PQ[c1] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d1] + PA_0 * PB_0 * PB_1 * PQ[c1] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PB_0 * PB_1 * PQ[d0] * PQ[d1] + PA_0 * PB_0 * PB_1 * PQ[d0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[d1] * QD_0)
                        )

                    + F7_t[2] * 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0))
                        + delta[c1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0 * (-1.0))
                        + delta[c1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_1 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * QD_1 * (-1.0))
                        + delta[c0][c1] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PB_0 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PB_0 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][c1] * (PA_0 * PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PB_1 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][c1] * (PA_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    + F7_t[2] * (-0.5) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F7_t[2] * 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_0 + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[b1] * QC_1 * QD_0 + PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] * QC_1 * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[b1][d1] * (PA_0 * PQ[b0] * QC_0 * QC_1 * QD_0 + PB_0 * PQ[a0] * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PA_0 * PQ[b0] * QC_0 * QC_1 * QD_1 + PB_0 * PQ[a0] * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PA_0 * PQ[b0] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PQ[b0] * QC_1 * QD_0 * QD_1 + PB_0 * PQ[a0] * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PQ[b1] * QC_0 * QC_1 * QD_0 + PB_1 * PQ[a0] * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PA_0 * PQ[b1] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[a0] * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PA_0 * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PQ[b1] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[a0] * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_0 * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_0 * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_0 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1 + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1)
                        + delta[a0][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 * QD_0 + PB_1 * PQ[b0] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PB_0 * PQ[b1] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[b0] * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PB_0 * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PB_0 * PQ[b1] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[b0] * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_0 * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_0 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        )

                    + F7_t[2] * S1 * S1 * inv_S4 * inv_S4 * (
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    + F7_t[2] * S1 * S2 * inv_S4 * inv_S4 * (
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD3(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[4];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[2] * S2 * S2 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F7_t[3] * 0.125 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * (-1.0) + PQ[a0])
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * (-1.0))
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * (-1.0) + PQ[b0])
                        + (delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PB_0 * (-1.0))
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PB_1 * (-1.0) + PQ[b1])
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PB_1 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[c0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[c1])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[d0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[d1])
                        )

                    + F7_t[3] * 0.125 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[d0] + QD_0)
                        + (delta[a0][c0] * delta[b0][c1] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][c0]) * (QD_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[d1] + QD_1)
                        + (delta[a0][c0] * delta[b0][c1] * delta[b1][d0] + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] + delta[a0][d0] * delta[b0][c1] * delta[b1][c0]) * (QD_1)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * 2.0)
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[a0])
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * 2.0)
                        + (delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[b0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[b1] * 2.0)
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PQ[b1])
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[c0] + QC_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[c1] + QC_1)
                        + (delta[a0][c1] * delta[b0][d0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c1]) * (QC_0)
                        + (delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]) * (QC_1)
                        )

                    + F7_t[3] * 0.25 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PQ[b1] + PA_0 * PB_1 * PQ[b0] + PB_0 * PB_1 * PQ[a0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PB_1 * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PB_1 * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PB_1 * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PB_1 * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * PB_1 * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PB_1 * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * PB_1 * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * PB_1 * PQ[d1])
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    + F7_t[3] * 0.25 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[a0] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[b0] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0)
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0)
                        + delta[a0][b1] * delta[c1][d1] * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                        + delta[a0][b1] * delta[c1][d0] * (PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PB_0 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1)
                        + delta[a0][b1] * delta[c0][d0] * (PB_0 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PB_0 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PB_0 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] + PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0)
                        + delta[a0][b0] * delta[c1][d1] * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] + PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                        + delta[a0][b0] * delta[c1][d0] * (PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] + PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] + PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1)
                        + delta[a0][b0] * delta[c0][d0] * (PB_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] + PQ[b1] * PQ[c1] * QD_1 + PQ[b1] * PQ[d1] * QC_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] + PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * PQ[c1] * QD_0 + PQ[c0] * PQ[d0] * QC_1 + PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * PQ[c1] * QD_1 + PQ[c0] * PQ[d1] * QC_1 + PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[c1] * PQ[d0] * QD_1 + PQ[c1] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_1)
                        )

                    + F7_t[3] * 0.25 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * QD_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b1] * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b1] * QD_1)
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0 + PQ[a0] * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0 + PQ[a0] * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * QD_0 + PQ[a0] * PQ[d0] * QC_1 + PQ[a0] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * QD_1 + PQ[a0] * PQ[d1] * QC_1 + PQ[a0] * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0 + PQ[a0] * QD_0 * QD_1)
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PQ[a0] * QC_0 * QD_0)
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PQ[a0] * QC_0 * QD_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * QC_1 * QD_0)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * QC_1 * QD_1)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * QD_0 * QD_1)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[b0] * PQ[b1] * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[b0] * PQ[b1] * QD_1)
                        + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0 + PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0 + PQ[b0] * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * QD_0 + PQ[b0] * PQ[d0] * QC_1 + PQ[b0] * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * QD_1 + PQ[b0] * PQ[d1] * QC_1 + PQ[b0] * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0 + PQ[b0] * QD_0 * QD_1)
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PQ[b0] * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PQ[b0] * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[b0] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[b0] * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0 + PQ[b1] * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0 + PQ[b1] * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * QD_0 + PQ[b1] * PQ[d0] * QC_1 + PQ[b1] * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * QD_1 + PQ[b1] * PQ[d1] * QC_1 + PQ[b1] * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0 + PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PQ[b1] * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PQ[b1] * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[b1] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[b1] * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * QC_1 * QD_0 + PQ[c1] * QC_0 * QD_0 + PQ[d0] * QC_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * QC_1 * QD_1 + PQ[c1] * QC_0 * QD_1 + PQ[d1] * QC_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QC_0 * QD_1 + PQ[d1] * QC_0 * QD_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[c1] * QD_0 * QD_1 + PQ[d0] * QC_1 * QD_1 + PQ[d1] * QC_1 * QD_0)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * PQ[b1])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0] * QC_1)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b1] * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b1] * QC_1)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * QC_1 + PQ[a0] * PQ[c1] * QC_0 + PQ[a0] * QC_0 * QC_1)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0] * PQ[b1] * QC_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * QC_1 + PQ[b0] * PQ[c1] * QC_0 + PQ[b0] * QC_0 * QC_1)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[b0] * QC_0 * QC_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * QC_1 + PQ[b1] * PQ[c1] * QC_0 + PQ[b1] * QC_0 * QC_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[b1] * QC_0 * QC_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD4(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[4];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[3] * (-0.5) * S1 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PA_0 * PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        )

                    + F7_t[3] * 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PB_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PB_0 * PQ[b1] * PQ[c1] * QC_0 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0)
                        + delta[c1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_0 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_0 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PB_0 * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_1 + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PB_0 * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_1 + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PB_0 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PB_0 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PA_0 * PB_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PA_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    + F7_t[3] * 0.5 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                        + delta[c1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0 * (-1.0))
                        + delta[c1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_1 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_1 * (-1.0))
                        + delta[c0][c1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][c1] * (PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][c1] * (PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    + F7_t[3] * 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[b1][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PQ[a0] * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PQ[a0] * PQ[b0] * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PQ[a0] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        )

                    + F7_t[3] * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    + F7_t[3] * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD5(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[5];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[3] * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )

                    + F7_t[3] * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F7_t[4] * (-0.125) * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[a0])
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[b0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0] + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PQ[b1])
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c1]) * (PQ[c0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]) * (PQ[c1])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][c0]) * (PQ[d0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] + delta[a0][d0] * delta[b0][c1] * delta[b1][c0]) * (PQ[d1])
                        )

                    + F7_t[4] * 0.25 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * PQ[c0] + PB_0 * PQ[a0] * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[d0] + PB_0 * PQ[a0] * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d1])
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PB_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[b0] * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1])
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PB_0 * PQ[c0] * PQ[c1])
                        + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[d0])
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PB_0 * PQ[c0] * PQ[d0])
                        + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d1])
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PB_0 * PQ[c0] * PQ[d1])
                        + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c1] * PQ[d0])
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PB_0 * PQ[c1] * PQ[d0])
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PB_0 * PQ[c1] * PQ[d1])
                        + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PB_0 * PQ[d0] * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[d1])
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1])
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PB_1 * PQ[c0] * PQ[c1])
                        + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[d0])
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PB_1 * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d1])
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PB_1 * PQ[c0] * PQ[d1])
                        + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c1] * PQ[d0])
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PB_1 * PQ[c1] * PQ[d0])
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PB_1 * PQ[c1] * PQ[d1])
                        + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PB_1 * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1])
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[d0])
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d1])
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c1] * PQ[d0])
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d1])
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[c0] * PQ[c1])
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * PQ[c0] * PQ[d0])
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * PQ[c0] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PQ[c1] * PQ[d0])
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[c1] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * PQ[d0] * PQ[d1])
                        )

                    + F7_t[4] * 0.25 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * PQ[b1] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c1][d1] * (PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c1][d0] * (PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                        )

                    + F7_t[4] * 0.5 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[c1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[c1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[c0][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[c0][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[c0][c1] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b1][c1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][c1] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][c1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][c0] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    + F7_t[4] * 0.5 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                        + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    + F7_t[4] * (-0.5) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_0 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1)
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1)
                        + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * QD_0)
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1)
                        + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * QD_0)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * QD_0)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    + F7_t[4] * S1 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    + F7_t[4] * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    + F7_t[4] * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockPDDD6(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   pd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* pd_first_inds_local,
                       const int32_t* pd_second_inds_local,
                       const double*   pd_pair_data_local,
                       const int32_t  pd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM][TILE_DIM + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    double PA_0, PB_0, PB_1;
    int32_t i, j, a0, b0, b1;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {
        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

    }

    ERIs[threadIdx.y][threadIdx.x] = 0.0;

    __syncthreads();

    if (ij < pd_prim_pair_count_local)
    {
        i = rawValue(pd_first_inds_local, ij);
        j = rawValue(pd_second_inds_local, ij);

        a_i = rawValue(p_prim_info, i / 3 + p_prim_count * 0);

        r_i[0] = rawValue(p_prim_info, i / 3 + p_prim_count * 2);
        r_i[1] = rawValue(p_prim_info, i / 3 + p_prim_count * 3);
        r_i[2] = rawValue(p_prim_info, i / 3 + p_prim_count * 4);

        a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

        r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
        r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
        r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

        S1 = a_i + a_j;
        inv_S1 = 1.0 / S1;

        S_ij_00 = rawValue(pd_pair_data_local, ij);

        a0 = i % 3;
        b0 = d_cart_inds[j % 6][0];
        b1 = d_cart_inds[j % 6][1];

        PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
        PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
        PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

    }

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM - 1) / TILE_DIM; m++)
    {
        const int32_t kl = m * TILE_DIM + threadIdx.y;

        if ((ij >= pd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(pd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[8];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 7, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[4] * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )

                    + F7_t[5] * 0.5 * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[c1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[c1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[c0][c1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b1][c1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][c1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][c1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][c0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    + F7_t[5] * 0.5 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                        )

                    + F7_t[5] * S1 * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    + F7_t[5] * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    + F7_t[5] * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    + F7_t[5] * 0.25 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * PQ[b1])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0] * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b1] * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b1] * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b1] * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b1] * PQ[d1])
                        + (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[c0] * PQ[c1])
                        + (delta[b0][b1] * delta[c1][d1] + delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PQ[a0] * PQ[c0] * PQ[d0])
                        + (delta[b0][b1] * delta[c1][d0] + delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PQ[a0] * PQ[c0] * PQ[d1])
                        + (delta[b0][b1] * delta[c0][d1] + delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * PQ[c1] * PQ[d0])
                        + (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[c1] * PQ[d1])
                        + (delta[b0][b1] * delta[c0][c1] + delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * PQ[d0] * PQ[d1])
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1] * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[b0] * PQ[b1] * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[b0] * PQ[b1] * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[b0] * PQ[b1] * PQ[d1])
                        + (delta[a0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[b0] * PQ[c0] * PQ[c1])
                        + (delta[a0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PQ[b0] * PQ[c0] * PQ[d0])
                        + (delta[a0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PQ[b0] * PQ[c0] * PQ[d1])
                        + (delta[a0][b1] * delta[c0][d1] + delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[b0] * PQ[c1] * PQ[d0])
                        + (delta[a0][b1] * delta[c0][d0] + delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[b0] * PQ[c1] * PQ[d1])
                        + (delta[a0][b1] * delta[c0][c1] + delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PQ[b0] * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[b1] * PQ[c0] * PQ[c1])
                        + (delta[a0][b0] * delta[c1][d1] + delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PQ[b1] * PQ[c0] * PQ[d0])
                        + (delta[a0][b0] * delta[c1][d0] + delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PQ[b1] * PQ[c0] * PQ[d1])
                        + (delta[a0][b0] * delta[c0][d1] + delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[b1] * PQ[c1] * PQ[d0])
                        + (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[b1] * PQ[c1] * PQ[d1])
                        + (delta[a0][b0] * delta[c0][c1] + delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PQ[b1] * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    + F7_t[6] * (-0.5) * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[b1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[b1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[b1][c1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b1][c0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[b0][c1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][c0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[a0][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[a0][c1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][c0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    + F7_t[6] * S1 * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    + F7_t[6] * S1 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    + F7_t[7] * S1 * S1 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y][threadIdx.x] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);

    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < pd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM; n++)
        {
            J_ij += ERIs[n][threadIdx.x];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDSS(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   ss_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   ss_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* ss_first_inds,
                       const int32_t* ss_second_inds,
                       const double*   ss_pair_data,
                       const int32_t  ss_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (ss_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= ss_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(ss_mat_Q, kl) * rawValue(ss_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = ss_first_inds[kl];
        const auto l = ss_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(s_prim_info, l + s_prim_count * 0);

        const double r_l[3] = {rawValue(s_prim_info, l + s_prim_count * 2),
                               rawValue(s_prim_info, l + s_prim_count * 3),
                               rawValue(s_prim_info, l + s_prim_count * 4)};

        const auto S_kl_00 = rawValue(ss_pair_data, kl);


        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F4_t[5];

        gpu::computeBoysFunction(F4_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);


        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F4_t[0] * (

                    0.5 * inv_S1 * (
                        delta[a1][b1] * (PA_0 * PB_0)
                        + delta[a1][b0] * (PA_0 * PB_1)
                        + delta[a0][b1] * (PA_1 * PB_0)
                        + delta[a0][b0] * (PA_1 * PB_1)
                        + delta[a0][a1] * (PB_0 * PB_1)
                        + delta[b0][b1] * (PA_0 * PA_1)
                    )

                    + (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1
                    )

                    + 0.25 * inv_S1 * inv_S1 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0])
                    )

                )

                + F4_t[1] * (

                    (-0.5) * S2 * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0])
                    )

                    + 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                        + delta[a1][b1] * (PA_0 * PB_0 * (-1.0) + PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + delta[a1][b0] * (PA_0 * PB_1 * (-1.0) + PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + delta[a0][b1] * (PA_1 * PB_0 * (-1.0) + PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + delta[a0][b0] * (PA_1 * PB_1 * (-1.0) + PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + delta[a0][a1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1]
                        + PA_0 * PA_1 * PB_1 * PQ[b0]
                        + PA_0 * PB_0 * PB_1 * PQ[a1]
                        + PA_1 * PB_0 * PB_1 * PQ[a0]
                    )

                )

                + F4_t[2] * (

                    0.5 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                        + delta[a1][b1] * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b0])
                        + delta[a1][b0] * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b1])
                        + delta[a0][b1] * (PA_1 * PQ[b0] * (-1.0) + PB_0 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b0])
                        + delta[a0][b0] * (PA_1 * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b1])
                        + delta[a0][a1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1]
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1]
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0]
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1]
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0]
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1]
                    )

                    + 0.25 * S2 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0])
                    )

                )

                + F4_t[3] * (

                    (-0.5) * S2 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * PQ[a1])
                        + delta[a1][b1] * (PQ[a0] * PQ[b0])
                        + delta[a1][b0] * (PQ[a0] * PQ[b1])
                        + delta[a0][b1] * (PQ[a1] * PQ[b0])
                        + delta[a0][b0] * (PQ[a1] * PQ[b1])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1])
                    )

                    + S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1]
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1]
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1]
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0]
                    )

                )

                + F4_t[4] * (

                    S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(ss_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDSP(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sp_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   sp_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* sp_first_inds,
                       const int32_t* sp_second_inds,
                       const double*   sp_pair_data,
                       const int32_t  sp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (sp_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= sp_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(sp_mat_Q, kl) * rawValue(sp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sp_first_inds[kl];
        const auto l = sp_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(sp_pair_data, kl);

        const auto d0 = l % 3;

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F5_t[6];

        gpu::computeBoysFunction(F5_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F5_t[0] * (

                    0.25 * inv_S1 * inv_S1 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QD_0)
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QD_0)
                        + delta[a1][b1] * (PA_0 * PB_0 * QD_0)
                        + delta[a1][b0] * (PA_0 * PB_1 * QD_0)
                        + delta[a0][b1] * (PA_1 * PB_0 * QD_0)
                        + delta[a0][b0] * (PA_1 * PB_1 * QD_0)
                        + delta[a0][a1] * (PB_0 * PB_1 * QD_0)
                    )

                    + (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1 * QD_0
                    )

                )

                + F5_t[1] * (

                    (-0.5) * S2 * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QD_0)
                    )

                    + 0.25 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0] * (-1.0))
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1)
                    )

                    + 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                        + delta[a1][b1] * (PA_0 * PB_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 + PB_0 * PQ[a0] * QD_0)
                        + delta[a1][b0] * (PA_0 * PB_1 * QD_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 + PB_1 * PQ[a0] * QD_0)
                        + delta[a0][b1] * (PA_1 * PB_0 * QD_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 + PB_0 * PQ[a1] * QD_0)
                        + delta[a0][b0] * (PA_1 * PB_1 * QD_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 + PB_1 * PQ[a1] * QD_0)
                        + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[b1][d0] * (PA_0 * PA_1 * PB_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1)
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[d0] * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[d0] * (-1.0))
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[d0] * (-1.0))
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * QD_0
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * QD_0
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * QD_0
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * QD_0
                    )

                )

                + F5_t[2] * (

                    0.25 * S2 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QD_0)
                    )

                    + 0.25 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * (-1.0) + PQ[a0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * (-1.0) + PQ[a1])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * (-1.0) + PQ[b0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * (-1.0) + PQ[b1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0] * 2.0)
                    )

                    + 0.5 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] + PA_0 * PB_0 * PQ[a1] + PA_1 * PB_0 * PQ[a0])
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] + PA_0 * PB_1 * PQ[b0] + PB_0 * PB_1 * PQ[a0])
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] + PA_0 * PB_1 * PQ[a1] + PA_1 * PB_1 * PQ[a0])
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[d0])
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[d0])
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] + PA_1 * PB_1 * PQ[b0] + PB_0 * PB_1 * PQ[a1])
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[d0])
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[d0])
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[d0])
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QD_0
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QD_0
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QD_0
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QD_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0
                    )

                )

                + F5_t[3] * (

                    (-0.25) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0])
                    )

                    + (-0.5) * S2 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0)
                    )

                    + 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0] + PB_0 * PQ[a0] * PQ[a1])
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0])
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] + PB_0 * PQ[a0] * PQ[d0])
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] + PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0])
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] + PB_0 * PQ[a1] * PQ[d0])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1])
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[d0])
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[d0])
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                    )

                    + (-1.0) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0]
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0]
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0]
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0]
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0]
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0]
                    )

                    + S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0
                    )

                )

                + F5_t[4] * (

                    (-1.0) * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0]
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0]
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0]
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0]
                    )

                    + S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0
                    )

                    + 0.5 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0])
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1])
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0])
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1])
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0])
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0])
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1])
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0])
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0])
                    )

                )

                + F5_t[5] * (

                    (-1.0) * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(sp_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDSD(double*         mat_J,
                       const double*   s_prim_info,
                       const int32_t  s_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   sd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   sd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* sd_first_inds,
                       const int32_t* sd_second_inds,
                       const double*   sd_pair_data,
                       const int32_t  sd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (sd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= sd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(sd_mat_Q, kl) * rawValue(sd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = sd_first_inds[kl];
        const auto l = sd_second_inds[kl];

        const auto a_k = rawValue(s_prim_info, k + s_prim_count * 0);

        const double r_k[3] = {rawValue(s_prim_info, k + s_prim_count * 2),
                               rawValue(s_prim_info, k + s_prim_count * 3),
                               rawValue(s_prim_info, k + s_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(sd_pair_data, kl);

        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F6_t[7];

        gpu::computeBoysFunction(F6_t, S1 * S2 * inv_S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F6_t[0] * (

                    0.25 * inv_S1 * inv_S1 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QD_0 * QD_1)
                    )

                    + 0.25 * inv_S1 * inv_S2 * (
                        delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1)
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PB_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PB_1 * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1)
                    )

                    + (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1 * QD_0 * QD_1
                    )

                    + 0.125 * inv_S1 * inv_S1 * inv_S2 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1])
                    )

                )

                + F6_t[1] * (

                    (-0.25) * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1])
                    )

                    + (-0.125) * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1])
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QD_0 * QD_1)
                    )

                    + 0.25 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * (-1.0) + PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * (-1.0) + PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * (-1.0) + PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * (-1.0) + PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                    )

                    + (-0.25) * inv_S2 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1)
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1)
                    )

                    + 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a0] * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PB_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a1] * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PB_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a1] * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PB_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                    )

                    + 0.5 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] + PA_0 * PA_1 * PB_1 * PQ[b0] + PA_0 * PB_0 * PB_1 * PQ[a1] + PA_1 * PB_0 * PB_1 * PQ[a0])
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * QD_0)
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * QD_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * QD_1)
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * QD_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * QD_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * QD_0 * QD_1
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * QD_0 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1
                    )

                )

                + F6_t[2] * (

                    0.25 * S2 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QD_0 * QD_1)
                    )

                    + 0.25 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b0])
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * (-1.0) + PB_0 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b0])
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0)
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0) + PA_0 * PB_0)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PB_0)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0) + PA_0 * PB_1)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PB_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * PQ[d0] * (-1.0))
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[d1] * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * (-1.0) + PB_0 * PQ[a1] * (-1.0) + PA_1 * PB_0)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PB_0)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * (-1.0) + PA_1 * PB_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PB_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * PQ[d0] * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[d1] * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PB_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[d1] * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PA_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * PQ[d1] * (-1.0))
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * PQ[d1] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * QD_0 + PA_0 * PB_0 * PQ[a1] * QD_0 + PA_1 * PB_0 * PQ[a0] * QD_0)
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * QD_1 + PA_0 * PB_0 * PQ[a1] * QD_1 + PA_1 * PB_0 * PQ[a0] * QD_1)
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * QD_0 + PA_0 * PB_1 * PQ[a1] * QD_0 + PA_1 * PB_1 * PQ[a0] * QD_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * QD_1 + PA_0 * PB_1 * PQ[a1] * QD_1 + PA_1 * PB_1 * PQ[a0] * QD_1)
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0)
                        + delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] + PA_1 * PB_0 * PQ[a0] * PQ[b1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] + PB_0 * PB_1 * PQ[a0] * PQ[a1])
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * QD_0 + PA_0 * PB_1 * PQ[b0] * QD_0 + PB_0 * PB_1 * PQ[a0] * QD_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * QD_1 + PA_0 * PB_1 * PQ[b0] * QD_1 + PB_0 * PB_1 * PQ[a0] * QD_1)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QD_0)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[d1] * QD_0)
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * QD_0 + PA_1 * PB_1 * PQ[b0] * QD_0 + PB_0 * PB_1 * PQ[a1] * QD_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * QD_1 + PA_1 * PB_1 * PQ[b0] * QD_1 + PB_0 * PB_1 * PQ[a1] * QD_1)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[d1] * QD_0)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[d1] * QD_0)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1
                    )

                    + 0.125 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1])
                    )

                    + 0.125 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * 2.0
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1])
                    )

                )

                + F6_t[3] * (

                    (-0.125) * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1])
                    )

                    + (-0.25) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1])
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0])
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0])
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                    )

                    + 0.25 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[d1])
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * (-1.0) + PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[d1] * (-1.0) + PA_0 * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0] * PQ[d1] * (-2.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                    )

                    + 0.5 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                    )

                    + (-0.5) * S2 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * QD_0 * QD_1)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                    )

                    + 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * QD_0)
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * QD_1)
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * QD_0)
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0)
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0)
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0)
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0)
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0)
                        + delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1]
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1]
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1
                    )

                )

                + F6_t[4] * (

                    0.5 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                    )

                    + 0.5 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0)
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1]
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1]
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1]
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0)
                    )

                    + S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1
                    )

                    + 0.25 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[a1])
                        + (delta[a1][b1] * delta[d0][d1] + delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PQ[a0] * PQ[b0])
                        + (delta[a1][b0] * delta[d0][d1] + delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[d0])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[d1])
                        + (delta[a0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[a1] * PQ[b0])
                        + (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[d1])
                        + (delta[a0][a1] * delta[d0][d1] + delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[d0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[d0] * PQ[d1])
                    )

                )

                + F6_t[5] * (

                    (-0.5) * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                        + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1])
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                    )

                    + S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1]
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1]
                    )

                    + S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0)
                    )

                )

                + F6_t[6] * (

                    S1 * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(sd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPP(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pp_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pp_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pp_first_inds,
                       const int32_t* pp_second_inds,
                       const double*   pp_pair_data,
                       const int32_t  pp_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pp_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pp_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pp_mat_Q, kl) * rawValue(pp_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pp_first_inds[kl];
        const auto l = pp_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(p_prim_info, l / 3 + p_prim_count * 0);

        const double r_l[3] = {rawValue(p_prim_info, l / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, l / 3 + p_prim_count * 4)};

        const auto S_kl_00 = rawValue(pp_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = l % 3;

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F6_t[7];

        gpu::computeBoysFunction(F6_t, S1 * S2 * inv_S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                F6_t[0] * (

                    0.25 * inv_S1 * inv_S1 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QD_0)
                    )

                    + 0.25 * inv_S1 * inv_S2 * (
                        delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1)
                    )

                    + 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QC_0 * QD_0)
                        + delta[a1][b1] * (PA_0 * PB_0 * QC_0 * QD_0)
                        + delta[a1][b0] * (PA_0 * PB_1 * QC_0 * QD_0)
                        + delta[a0][b1] * (PA_1 * PB_0 * QC_0 * QD_0)
                        + delta[a0][b0] * (PA_1 * PB_1 * QC_0 * QD_0)
                        + delta[a0][a1] * (PB_0 * PB_1 * QC_0 * QD_0)
                    )

                    + 0.5 * inv_S2 * (
                        delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1)
                    )

                    + (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QD_0
                    )

                    + 0.125 * inv_S1 * inv_S1 * inv_S2 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0])
                    )

                )

                + F6_t[1] * (

                    (-0.25) * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0])
                    )

                    + (-0.125) * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0])
                    )

                    + (-0.5) * S2 * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QD_0)
                    )

                    + 0.25 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * (-1.0) + PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * (-1.0) + PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * (-1.0) + PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * (-1.0) + PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * QC_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * QC_0)
                    )

                    + (-0.25) * inv_S2 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1)
                    )

                    + (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1)
                    )

                    + 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QD_0 + PA_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[a1][b1] * (PA_0 * PB_0 * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a0] * QC_0 * QD_0)
                        + delta[a1][b0] * (PA_0 * PB_1 * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[a0][b1] * (PA_1 * PB_0 * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a1] * QC_0 * QD_0)
                        + delta[a0][b0] * (PA_1 * PB_1 * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a1] * QC_0 * QD_0)
                        + delta[a0][a1] * (PB_0 * PB_1 * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[b0] * QC_0 * QD_0)
                    )

                    + 0.5 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] + PA_0 * PA_1 * PB_1 * PQ[b0] + PA_0 * PB_0 * PB_1 * PQ[a1] + PA_1 * PB_0 * PB_1 * PQ[a0])
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * QC_0)
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * QC_0)
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * QD_0)
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * QC_0)
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * QD_0)
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * QC_0)
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * QD_0)
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                    )

                    + S1 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QD_0
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QD_0
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QD_0
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0
                    )

                )

                + F6_t[2] * (

                    0.25 * S2 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QD_0)
                    )

                    + 0.25 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b0])
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * (-1.0) + PB_0 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b0])
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0)
                    )

                    + 0.25 * inv_S4 * inv_S4 * (
                        delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0) + PA_0 * PB_0)
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PB_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0) + PA_0 * PB_1)
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PB_1)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PA_0 * PA_1)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[c0] * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * PQ[d0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * (-1.0) + PB_0 * PQ[a1] * (-1.0) + PA_1 * PB_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PB_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * (-1.0) + PA_1 * PB_1)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PB_1)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[c0] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * PQ[d0] * (-1.0))
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1)
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PB_1)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[c0] * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[c0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * PQ[d0] * (-1.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PA_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0])
                    )

                    + 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * PQ[c0] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * PQ[c0] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * (-1.0))
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0])
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * PQ[c0] * (-1.0))
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0])
                    )

                    + 0.5 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QD_0)
                    )

                    + 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * QD_0 + PA_0 * PB_0 * PQ[a1] * QD_0 + PA_1 * PB_0 * PQ[a0] * QD_0)
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * QD_0 + PA_0 * PB_1 * PQ[a1] * QD_0 + PA_1 * PB_1 * PQ[a0] * QD_0)
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] + PA_1 * PB_0 * PQ[a0] * PQ[b1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] + PB_0 * PB_1 * PQ[a0] * PQ[a1])
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * QC_0 + PA_0 * PB_0 * PQ[a1] * QC_0 + PA_1 * PB_0 * PQ[a0] * QC_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * QC_0 + PA_0 * PB_1 * PQ[b0] * QC_0 + PB_0 * PB_1 * PQ[a0] * QC_0)
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * QD_0 + PA_0 * PB_1 * PQ[b0] * QD_0 + PB_0 * PB_1 * PQ[a0] * QD_0)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[c0] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * QC_0 + PA_0 * PB_1 * PQ[a1] * QC_0 + PA_1 * PB_1 * PQ[a0] * QC_0)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[c0] * QD_0 + PA_0 * PB_1 * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * QC_0 + PA_1 * PB_1 * PQ[b0] * QC_0 + PB_0 * PB_1 * PQ[a1] * QC_0)
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * QD_0 + PA_1 * PB_1 * PQ[b0] * QD_0 + PB_0 * PB_1 * PQ[a1] * QD_0)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[c0] * QD_0 + PA_1 * PB_0 * PQ[d0] * QC_0)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[c0] * QD_0 + PA_1 * PB_1 * PQ[d0] * QC_0)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0)
                    )

                    + S1 * S1 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * S2 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_0
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_0
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_0
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_0
                    )

                    + 0.125 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0])
                    )

                    + 0.125 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * 2.0
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1])
                    )

                )

                + F6_t[3] * (

                    (-0.125) * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1])
                    )

                    + (-0.25) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1])
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0])
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0])
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                    )

                    + 0.25 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * (-1.0) + PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[c0])
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[d0])
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * (-1.0) + PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[c0])
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[d0])
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * (-1.0) + PA_0 * PQ[c0])
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[d0] * (-1.0) + PA_0 * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[c0])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[d0])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0] * (-2.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                    )

                    + 0.5 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0))
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0))
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                    )

                    + (-0.5) * S2 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * QC_0 * QD_0)
                    )

                    + 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * QD_0)
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * QD_0)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0 + PB_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a1] * PQ[c0] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0)
                        + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0])
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * QC_0)
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0)
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * QC_0 + PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * QC_0)
                    )

                    + S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0]
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0]
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0]
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_0
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_0
                    )

                )

                + F6_t[4] * (

                    0.5 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0))
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0))
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                    )

                    + 0.5 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0)
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                    )

                    + S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0]
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0]
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0]
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0]
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0)
                    )

                    + S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0
                    )

                    + 0.25 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[a1])
                        + (delta[a1][b1] * delta[c0][d0] + delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PQ[a0] * PQ[b0])
                        + (delta[a1][b0] * delta[c0][d0] + delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0])
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[d0])
                        + (delta[a0][b1] * delta[c0][d0] + delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[a1] * PQ[b0])
                        + (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[d0])
                        + (delta[a0][a1] * delta[c0][d0] + delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0])
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0])
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0])
                    )

                )

                + F6_t[5] * (

                    (-0.5) * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                        + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0])
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                    )

                    + S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0]
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0]
                    )

                    + S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0)
                    )

                )

                + F6_t[6] * (

                    S1 * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0]
                    )

                )

                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pp_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD0(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[2];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F7_t[0] * 0.125 * inv_S1 * inv_S1 * inv_S2 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (QC_0)
                        )

                    + F7_t[0] * 0.25 * inv_S1 * inv_S1 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QD_0 * QD_1)
                        )

                    + F7_t[0] * 0.25 * inv_S1 * inv_S2 * (
                        delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * QC_0)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * QD_1)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * QC_0)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0)
                        )

                    + F7_t[0] * 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QC_0 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * QC_0 * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PB_1 * QC_0 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * QC_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PB_1 * QC_0 * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PB_1 * QC_0 * QD_0 * QD_1)
                        )

                    + F7_t[0] * 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * QC_0)
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * QD_1)
                        )

                    + F7_t[0] * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QD_0 * QD_1
                        )

                    + F7_t[1] * (-0.25) * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (QC_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (QD_1)
                        )

                    + F7_t[1] * 0.125 * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PB_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PB_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * (-1.0) + QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[d0] * (-1.0) + QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[d1] * (-1.0) + QD_1 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_1)
                        )

                    + F7_t[1] * (-0.5) * S2 * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QD_0 * QD_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD1(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[3];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[1] * 0.25 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 + PB_0 * PQ[a0] * QC_0)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 + PB_0 * PQ[a0] * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QD_1 + PB_0 * PQ[a0] * QD_1)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * QC_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 + PB_1 * PQ[a0] * QC_0)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * QD_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 + PB_1 * PQ[a0] * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QD_1 + PB_1 * PQ[a0] * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * QC_0 * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * QC_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * QC_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 + PB_0 * PQ[a1] * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * QD_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 + PB_0 * PQ[a1] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QD_1 + PB_0 * PQ[a1] * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * QC_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 + PB_1 * PQ[a1] * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * QD_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 + PB_1 * PQ[a1] * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QD_1 + PB_1 * PQ[a1] * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * QC_0 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * QC_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * QD_0 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[d1] * QC_0 * QD_0 * (-1.0))
                        )

                    + F7_t[1] * 0.25 * inv_S2 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PA_1 * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PA_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[d1] * (-1.0) + PA_0 * PA_1 * QD_1 * (-1.0))
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PB_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * (-1.0) + PA_0 * PB_0 * QC_0 * (-1.0))
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * PQ[d0] * (-1.0) + PA_0 * PB_0 * QD_0 * (-1.0))
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * PQ[d1] * (-1.0) + PA_0 * PB_0 * QD_1 * (-1.0))
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * PQ[c0] * (-1.0) + PA_0 * PB_1 * QC_0 * (-1.0))
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * PQ[d0] * (-1.0) + PA_0 * PB_1 * QD_0 * (-1.0))
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * PQ[d1] * (-1.0) + PA_0 * PB_1 * QD_1 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PB_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * PQ[c0] * (-1.0) + PA_1 * PB_0 * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * PQ[d0] * (-1.0) + PA_1 * PB_0 * QD_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * PQ[d1] * (-1.0) + PA_1 * PB_0 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * PQ[c0] * (-1.0) + PA_1 * PB_1 * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * PQ[d0] * (-1.0) + PA_1 * PB_1 * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * PQ[d1] * (-1.0) + PA_1 * PB_1 * QD_1 * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PB_1 * QC_0 * (-1.0))
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PB_1 * QD_0 * (-1.0))
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PB_1 * QD_1 * (-1.0))
                        )

                    + F7_t[1] * (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] + PA_0 * PA_1 * PB_0 * PB_1 * QC_0)
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] + PA_0 * PA_1 * PB_0 * PB_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] + PA_0 * PA_1 * PB_0 * PB_1 * QD_1)
                        )

                    + F7_t[1] * 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QD_0 * QD_1 + PA_1 * PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PB_1 * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * QC_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[a1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PB_1 * QC_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[a1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PB_1 * QC_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[b0] * QC_0 * QD_0 * QD_1)
                        )

                    + F7_t[1] * 0.5 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0)
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QD_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * QD_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * QD_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QD_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * QD_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * QD_1)
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * QC_0 * QD_0)
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * QC_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * QC_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * QC_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        )

                    + F7_t[1] * S1 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        )

                    + F7_t[1] * S2 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QD_0 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QD_0 * QD_1
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0 * QD_1
                        )

                    + F7_t[2] * 0.125 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (QC_0)
                        )

                    + F7_t[2] * 0.125 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_0 * (-1.0) + PQ[a0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_1 * (-1.0) + PQ[a1])
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PB_0 * (-1.0) + PQ[b0])
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PB_1 * (-1.0) + PQ[b1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[d0] * 2.0 + QD_0 * 2.0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[d1] * 2.0 + QD_1 * 2.0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * 2.0 + QC_0 * 2.0)
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (QC_0)
                        )

                    + F7_t[2] * 0.125 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_1 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PB_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PB_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[d0])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[d1])
                        )

                    + F7_t[2] * 0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_1 * (-1.0))
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PB_1 * (-1.0))
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * PQ[c0])
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * PQ[d0])
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * PQ[d1])
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * PQ[c0])
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * PQ[d0])
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * PQ[d1])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PB_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * PQ[c0])
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * PQ[d0])
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * PQ[d1])
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * PQ[c0])
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * PQ[d0])
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * PQ[d1])
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0])
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0])
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0])
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[d0])
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[d1])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD2(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    //__shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            //PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            //PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            //PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            //PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[3];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[2] * 0.25 * S2 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QD_0 * QD_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD3(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[3];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[2] * 0.25 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_1)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * QC_0 * QD_0 * (-1.0) + PQ[a0] * QC_0 * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * QC_0 * QD_1 * (-1.0) + PQ[a0] * QC_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * QC_0 * QD_0 * (-1.0) + PQ[a1] * QC_0 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * QC_0 * QD_1 * (-1.0) + PQ[a1] * QC_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * QD_0 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * QC_0 * QD_0 * (-1.0) + PQ[b0] * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * QC_0 * QD_1 * (-1.0) + PQ[b0] * QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * QC_0 * QD_0 * (-1.0) + PQ[b1] * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * QC_0 * QD_1 * (-1.0) + PQ[b1] * QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QD_0 * QD_1 * 2.0 + PQ[d0] * QC_0 * QD_1 * 2.0 + PQ[d1] * QC_0 * QD_0 * 2.0)
                        )

                    + F7_t[2] * 0.25 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] + PA_0 * PA_1 * QD_0)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PA_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] + PA_0 * PA_1 * QD_1)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PA_1 * QD_1)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b0] + PA_0 * PB_0 * PQ[a1] + PA_1 * PB_0 * PQ[a0])
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PQ[b1] + PA_0 * PB_1 * PQ[b0] + PB_0 * PB_1 * PQ[a0])
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[c0] + PA_0 * PB_0 * QC_0)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] + PA_0 * PB_0 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] + PA_0 * PB_0 * QD_1)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PB_0 * QC_0)
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PB_0 * QD_0)
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PB_0 * QD_1)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b1] + PA_0 * PB_1 * PQ[a1] + PA_1 * PB_1 * PQ[a0])
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[c0] + PA_0 * PB_1 * QC_0)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] + PA_0 * PB_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] + PA_0 * PB_1 * QD_1)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PB_1 * QC_0)
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PB_1 * QD_0)
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PB_1 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] + PA_0 * PA_1 * QC_0)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PQ[b1] + PA_1 * PB_1 * PQ[b0] + PB_0 * PB_1 * PQ[a1])
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[c0] + PA_1 * PB_0 * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] + PA_1 * PB_0 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] + PA_1 * PB_0 * QD_1)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PB_0 * QC_0)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PB_0 * QD_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PB_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[c0] + PA_1 * PB_1 * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] + PA_1 * PB_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] + PA_1 * PB_1 * QD_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PB_1 * QC_0)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PB_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PB_1 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] + PB_0 * PB_1 * QC_0)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] + PB_0 * PB_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] + PB_0 * PB_1 * QD_1)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PB_1 * QC_0)
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PB_1 * QD_0)
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PB_1 * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PA_1 * QC_0)
                        )

                    + F7_t[2] * 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1])
                        )

                    + F7_t[2] * 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PB_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        )

                    + F7_t[2] * 0.5 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PQ[a1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        )

                    + F7_t[2] * 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[c0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1)
                        + delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * QC_0 * QD_0 + PA_0 * PB_0 * PQ[a1] * QC_0 * QD_0 + PA_1 * PB_0 * PQ[a0] * QC_0 * QD_0)
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * QC_0 * QD_1 + PA_0 * PB_0 * PQ[a1] * QC_0 * QD_1 + PA_1 * PB_0 * PQ[a0] * QC_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * QD_0 * QD_1 + PA_0 * PB_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PB_0 * PQ[a0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * QC_0 * QD_0 + PA_0 * PB_1 * PQ[a1] * QC_0 * QD_0 + PA_1 * PB_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * QC_0 * QD_1 + PA_0 * PB_1 * PQ[a1] * QC_0 * QD_1 + PA_1 * PB_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * QD_0 * QD_1 + PA_0 * PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PB_1 * PQ[a0] * QD_0 * QD_1)
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[d0] * QC_0 * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0 * QD_0)
                        + delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0)
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * QC_0 * QD_0 + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_0 + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * QC_0 * QD_1 + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_1 + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * QD_0 * QD_1 + PA_0 * PB_1 * PQ[b0] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PB_0 * PQ[d0] * QC_0 * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_0 * QD_0)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[c0] * QD_0 * QD_1 + PA_0 * PB_1 * PQ[d0] * QC_0 * QD_1 + PA_0 * PB_1 * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * QC_0 * QD_0 + PA_1 * PB_1 * PQ[b0] * QC_0 * QD_0 + PB_0 * PB_1 * PQ[a1] * QC_0 * QD_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * QC_0 * QD_1 + PA_1 * PB_1 * PQ[b0] * QC_0 * QD_1 + PB_0 * PB_1 * PQ[a1] * QC_0 * QD_1)
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * QD_0 * QD_1 + PA_1 * PB_1 * PQ[b0] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[c0] * QD_0 * QD_1 + PA_1 * PB_0 * PQ[d0] * QC_0 * QD_1 + PA_1 * PB_0 * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[c0] * QD_0 * QD_1 + PA_1 * PB_1 * PQ[d0] * QC_0 * QD_1 + PA_1 * PB_1 * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[d0] * QC_0 * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0 * QD_0)
                        )

                    + F7_t[2] * S1 * S1 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD4(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[4];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[2] * S1 * S2 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        )

                    + F7_t[2] * S2 * S2 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_0 * QD_1
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_0 * QD_1
                        )

                    + F7_t[3] * (-0.125) * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a1])
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PQ[b0])
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PQ[b1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] + QC_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[d0] + QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[d1] + QD_1)
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (QC_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (QD_1)
                        )

                    + F7_t[3] * 0.125 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PQ[b0] * (-1.0) + PB_0)
                        + (delta[a0][c0] * delta[a1][d0] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c0]) * (PB_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PQ[b1] * (-1.0) + PB_1)
                        + (delta[a0][c0] * delta[a1][d0] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c0]) * (PB_1)
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a0] * (-1.0) + PA_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a1] * (-1.0) + PA_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * (-2.0))
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (PQ[c0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[d0] * (-2.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[d1] * (-2.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (PQ[d1] * (-1.0))
                        + (delta[a1][c0] * delta[b0][d0] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c0]) * (PA_0)
                        + (delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]) * (PA_1)
                        )

                    + F7_t[3] * 0.25 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] + PA_1 * PQ[a0] * PQ[c0])
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PA_1 * PQ[c0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] + PA_1 * PQ[a0] * PQ[d0])
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PA_1 * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d1] + PA_1 * PQ[a0] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PA_1 * PQ[d1] * (-1.0))
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PQ[b1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * (-1.0))
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] + PB_0 * PQ[a0] * PQ[c0])
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PB_0 * PQ[c0] * (-1.0))
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] + PB_0 * PQ[a0] * PQ[d0])
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PB_0 * PQ[d0] * (-1.0))
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d1])
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PB_0 * PQ[d1] * (-1.0))
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * PQ[c0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[c0])
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PB_1 * PQ[c0] * (-1.0))
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[d0])
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[d1])
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PB_1 * PQ[d1] * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PQ[b1] * (-1.0) + PA_1 * PB_1 * PQ[b0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] + PB_0 * PQ[a1] * PQ[c0])
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PB_0 * PQ[c0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] + PB_0 * PQ[a1] * PQ[d0])
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PB_0 * PQ[d0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d1] + PB_0 * PQ[a1] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PB_0 * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * PQ[c0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] + PB_1 * PQ[a1] * PQ[c0])
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PB_1 * PQ[c0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[d0])
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d1] + PB_1 * PQ[a1] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PB_1 * PQ[d1] * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] + PB_1 * PQ[b0] * PQ[c0])
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PB_1 * PQ[c0] * (-1.0))
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] + PB_1 * PQ[b0] * PQ[d0])
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PB_1 * PQ[d0] * (-1.0))
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d1] + PB_1 * PQ[b0] * PQ[d1])
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PB_1 * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[d0])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * PQ[d0] * PQ[d1])
                        )

                    + F7_t[3] * (-0.25) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0)
                        + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QD_1)
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_0)
                        + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * QC_0 * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * QC_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * QC_0 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * QC_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * QD_0 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0)
                        + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QD_0 * QD_1 + PQ[d0] * QC_0 * QD_1 + PQ[d1] * QC_0 * QD_0)
                        )

                    + F7_t[3] * 0.25 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] + PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] + PA_1 * PQ[a0] * QD_0)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PQ[a1] * QD_0 + PA_1 * PQ[a0] * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] + PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] + PA_1 * PQ[a0] * QD_1)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[a1] * QD_1 + PA_1 * PQ[a0] * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] + PA_0 * PQ[b0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] + PB_0 * PQ[a0] * QD_0)
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PQ[b0] * QD_0 + PB_0 * PQ[a0] * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] + PA_0 * PQ[b0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] + PB_0 * PQ[a0] * QD_1)
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PQ[b0] * QD_1 + PB_0 * PQ[a0] * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] + PA_0 * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] + PB_1 * PQ[a0] * QD_0)
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PQ[b1] * QD_0 + PB_1 * PQ[a0] * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] + PA_0 * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[d1] + PB_1 * PQ[a0] * QD_1)
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PQ[b1] * QD_1 + PB_1 * PQ[a0] * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 + PA_0 * PQ[d0] * QC_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[c0] * QD_1 + PA_0 * PQ[d1] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * QD_1 + PA_0 * PQ[d1] * QD_0)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] + PA_1 * PQ[b0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] + PB_0 * PQ[a1] * QD_0)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PQ[b0] * QD_0 + PB_0 * PQ[a1] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] + PA_1 * PQ[b0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] + PB_0 * PQ[a1] * QD_1)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PQ[b0] * QD_1 + PB_0 * PQ[a1] * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] + PA_1 * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] + PB_1 * PQ[a1] * QD_0)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PQ[b1] * QD_0 + PB_1 * PQ[a1] * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] + PA_1 * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[d1] + PB_1 * PQ[a1] * QD_1)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PQ[b1] * QD_1 + PB_1 * PQ[a1] * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 + PA_1 * PQ[d0] * QC_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[c0] * QD_1 + PA_1 * PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * QD_1 + PA_1 * PQ[d1] * QD_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b0] + PA_1 * PQ[a0] * PQ[b0] + PB_0 * PQ[a0] * PQ[a1])
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[b0])
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] + PA_0 * PQ[b0] * QC_0 + PB_0 * PQ[a0] * PQ[c0] + PB_0 * PQ[a0] * QC_0)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PQ[b0] * QC_0 + PB_0 * PQ[a0] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PQ[b0] * PQ[b1] + PB_0 * PQ[a1] * PQ[b1] + PB_1 * PQ[a1] * PQ[b0])
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] + PA_1 * PQ[b0] * QC_0 + PB_0 * PQ[a1] * PQ[c0] + PB_0 * PQ[a1] * QC_0)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PQ[b0] * QC_0 + PB_0 * PQ[a1] * QC_0)
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] + PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] + PB_1 * PQ[b0] * QC_0)
                        + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] + PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] + PB_1 * PQ[b0] * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] + PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] + PB_1 * PQ[b0] * QD_1)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PQ[b1] * QC_0 + PB_1 * PQ[b0] * QC_0)
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PQ[b1] * QD_0 + PB_1 * PQ[b0] * QD_0)
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PQ[b1] * QD_1 + PB_1 * PQ[b0] * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 + PB_0 * PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[c0] * QD_1 + PB_0 * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * QD_1 + PB_0 * PQ[d1] * QD_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b1] + PA_1 * PQ[a0] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1])
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] + PA_0 * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[c0] + PB_1 * PQ[a0] * QC_0)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PQ[b1] * QC_0 + PB_1 * PQ[a0] * QC_0)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] + PA_1 * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[c0] + PB_1 * PQ[a1] * QC_0)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PQ[b1] * QC_0 + PB_1 * PQ[a1] * QC_0)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 + PB_1 * PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[c0] * QD_1 + PB_1 * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * QD_1 + PB_1 * PQ[d1] * QD_0)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] + PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] + PA_1 * PQ[a0] * QC_0)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0] * QD_1 * (-2.0) + PQ[c0] * PQ[d1] * QD_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * (-2.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[a1] * QC_0 + PA_1 * PQ[a0] * QC_0)
                        )

                    + F7_t[3] * 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1])
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        )

                    + F7_t[3] * 0.5 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    + F7_t[3] * (-0.5) * S2 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * PQ[a1] * QC_0 * QD_0 * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        )

                    + F7_t[3] * 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                        + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                        + delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * QC_0 * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * QC_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a0] * PQ[a1] * QC_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * QC_0 * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * QC_0 * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 * QD_0 + PA_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0)
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_0 + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QD_0 + PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QD_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 + PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_0 + PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_1 + PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_1)
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 + PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_0 * QD_0 + PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_0 * QD_0)
                        + delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 + PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        )

                    + F7_t[3] * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD5(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[5];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[3] * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0
                        )

                    + F7_t[3] * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        )

                    + F7_t[3] * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_0 * QD_1
                        )

                    + F7_t[4] * 0.25 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0])
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0])
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * (-1.0))
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * (-1.0))
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0])
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * (-1.0))
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0])
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1])
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * (-1.0))
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0])
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * (-1.0))
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0])
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * (-1.0))
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1])
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * (-1.0))
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PQ[b0] * PQ[b1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0])
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0])
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0])
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0])
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * (-1.0))
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0])
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * (-1.0))
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0])
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * (-1.0))
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1])
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0] * PQ[d1] * 2.0)
                        )

                    + F7_t[4] * 0.25 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[d0] + PQ[a0] * PQ[a1] * QD_0)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[d1] + PQ[a0] * PQ[a1] * QD_1)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[d0] + PQ[a0] * PQ[b0] * QD_0)
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[d1] + PQ[a0] * PQ[b0] * QD_1)
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[d0] + PQ[a0] * PQ[b1] * QD_0)
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[d1] + PQ[a0] * PQ[b1] * QD_1)
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QD_0 + PQ[a0] * PQ[d0] * QC_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QD_1 + PQ[a0] * PQ[d1] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[d0] * QD_1 + PQ[a0] * PQ[d1] * QD_0)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[d0] + PQ[a1] * PQ[b0] * QD_0)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[d1] + PQ[a1] * PQ[b0] * QD_1)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[d0] + PQ[a1] * PQ[b1] * QD_0)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[d1] + PQ[a1] * PQ[b1] * QD_1)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QD_0 + PQ[a1] * PQ[d0] * QC_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QD_1 + PQ[a1] * PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[d0] * QD_1 + PQ[a1] * PQ[d1] * QD_0)
                        + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[d0] + PQ[b0] * PQ[b1] * QD_0)
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[d1] + PQ[b0] * PQ[b1] * QD_1)
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QD_0 + PQ[b0] * PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QD_1 + PQ[b0] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[d0] * QD_1 + PQ[b0] * PQ[d1] * QD_0)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QD_0 + PQ[b1] * PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QD_1 + PQ[b1] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[d0] * QD_1 + PQ[b1] * PQ[d1] * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0] * QD_1 + PQ[c0] * PQ[d1] * QD_0 + PQ[d0] * PQ[d1] * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b1])
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] + PQ[a0] * PQ[a1] * QC_0)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[a1] * QC_0)
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0] * PQ[b1])
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] + PQ[a0] * PQ[b0] * QC_0)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PQ[a0] * PQ[b0] * QC_0)
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] + PQ[a0] * PQ[b1] * QC_0)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PQ[a0] * PQ[b1] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[a1] * PQ[b0] * PQ[b1])
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] + PQ[a1] * PQ[b0] * QC_0)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[a1] * PQ[b0] * QC_0)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] + PQ[a1] * PQ[b1] * QC_0)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[a1] * PQ[b1] * QC_0)
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] + PQ[b0] * PQ[b1] * QC_0)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PQ[b0] * PQ[b1] * QC_0)
                        )

                    + F7_t[4] * 0.5 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1])
                        + delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PB_0 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD6(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[5];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[4] * 0.5 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    + F7_t[4] * 0.5 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                        + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_1)
                        + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_1)
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QD_0)
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD7(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    //__shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        //delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        //delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        //delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[5];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[4] * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0)
                        )

                    + F7_t[4] * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0
                        )

                    + F7_t[4] * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        )

                    + F7_t[4] * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD8(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    //__shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            //PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            //PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            //PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            //PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[5];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        //const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        //const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        //const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[4] * 0.125 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c0]) * (PQ[a0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]) * (PQ[a1])
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c0]) * (PQ[b0])
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c0]) * (PQ[b1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (PQ[c0])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (PQ[d0])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (PQ[d1])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDPD9(double*         mat_J,
                       const double*   p_prim_info,
                       const int32_t  p_prim_count,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   pd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   pd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* pd_first_inds,
                       const int32_t* pd_second_inds,
                       const double*   pd_pair_data,
                       const int32_t  pd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (pd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= pd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(pd_mat_Q, kl) * rawValue(pd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = pd_first_inds[kl];
        const auto l = pd_second_inds[kl];

        const auto a_k = rawValue(p_prim_info, k / 3 + p_prim_count * 0);

        const double r_k[3] = {rawValue(p_prim_info, k / 3 + p_prim_count * 2),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 3),
                               rawValue(p_prim_info, k / 3 + p_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(pd_pair_data, kl);

        const auto c0 = k % 3;
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F7_t[8];

        gpu::computeBoysFunction(F7_t, S1 * S2 * inv_S4 * r2_PQ, 7, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F7_t[5] * (-0.25) * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b1])
                        + (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[a1] * PQ[c0])
                        + (delta[b0][b1] * delta[c0][d1] + delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * PQ[d0])
                        + (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * PQ[d1])
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0] * PQ[b1])
                        + (delta[a1][b1] * delta[d0][d1] + delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PQ[a0] * PQ[b0] * PQ[c0])
                        + (delta[a1][b1] * delta[c0][d1] + delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * PQ[d0])
                        + (delta[a1][b1] * delta[c0][d0] + delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * PQ[d1])
                        + (delta[a1][b0] * delta[d0][d1] + delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PQ[a0] * PQ[b1] * PQ[c0])
                        + (delta[a1][b0] * delta[c0][d1] + delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * PQ[d0])
                        + (delta[a1][b0] * delta[c0][d0] + delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[d0])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[a1] * PQ[b0] * PQ[b1])
                        + (delta[a0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[a1] * PQ[b0] * PQ[c0])
                        + (delta[a0][b1] * delta[c0][d1] + delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * PQ[d0])
                        + (delta[a0][b1] * delta[c0][d0] + delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * PQ[d1])
                        + (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[a1] * PQ[b1] * PQ[c0])
                        + (delta[a0][b0] * delta[c0][d1] + delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * PQ[d0])
                        + (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[d0][d1] + delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PQ[b0] * PQ[b1] * PQ[c0])
                        + (delta[a0][a1] * delta[c0][d1] + delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * PQ[d0])
                        + (delta[a0][a1] * delta[c0][d0] + delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    + F7_t[5] * 0.5 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                        + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                        + delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    + F7_t[5] * (-0.5) * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                        + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                        + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0)
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        )

                    + F7_t[5] * (-1.0) * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1]
                        )

                    + F7_t[5] * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0
                        )

                    + F7_t[5] * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0)
                        )

                    + F7_t[6] * (-1.0) * S1 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1]
                        )

                    + F7_t[6] * S1 * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0
                        )

                    + F7_t[6] * 0.5 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                        + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                        + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                        + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        )

                    + F7_t[7] * (-1.0) * S1 * S1 * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1]
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        ERIs[threadIdx.y] += eri_ijkl * rawValue(pd_mat_D, kl) * 2.0;
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD0(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[2];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    F8_t[0] * 0.125 * inv_S1 * inv_S1 * inv_S2 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (QC_0 * QC_1)
                        )

                    + F8_t[0] * 0.125 * inv_S1 * inv_S2 * inv_S2 * (
                        (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0)
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_1)
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_0)
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_1)
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * PB_1)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1)
                        )

                    + F8_t[0] * 0.25 * inv_S1 * inv_S1 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F8_t[0] * 0.25 * inv_S1 * inv_S2 * (
                        delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0 * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * QC_0 * QC_1)
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PB_0 * QC_0 * QD_0)
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PB_0 * QC_0 * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * QC_1 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * QC_1 * QD_1)
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PB_0 * QD_0 * QD_1)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * QC_0 * QC_1)
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PB_1 * QC_0 * QD_0)
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PB_1 * QC_0 * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * QC_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * QC_1 * QD_1)
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PB_1 * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PB_0 * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PB_0 * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PB_0 * QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PB_1 * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PB_1 * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PB_1 * QD_0 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1)
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QC_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QC_1 * QD_1)
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0 * QC_1)
                        )

                    + F8_t[0] * 0.25 * inv_S2 * inv_S2 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * PB_1)
                        )

                    + F8_t[0] * 0.5 * inv_S1 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F8_t[0] * 0.5 * inv_S2 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QC_1)
                        + delta[c1][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PA_1 * PB_0 * PB_1 * QD_0 * QD_1)
                        )

                    + F8_t[0] * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F8_t[0] * 0.0625 * inv_S1 * inv_S1 * inv_S2 * inv_S2 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0])
                        )

                    + F8_t[1] * (-0.125) * inv_S1 * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD1(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[2];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[1] * (-0.125) * inv_S1 * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0])
                        )

                    + F8_t[1] * (-0.25) * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (QD_0 * QD_1)
                        )

                    + F8_t[1] * 0.125 * inv_S1 * inv_S2 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0 * (-1.0) + PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_1 * (-1.0) + PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * QD_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * QD_1)
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_0 * (-1.0) + PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_1 * (-1.0) + PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * QD_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * QD_1)
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0]) * (PB_0 * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PB_0 * QC_1)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * QD_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0]) * (PB_1 * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PB_1 * QC_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0) + QC_0 * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0) + QC_0 * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0) + QC_0 * QD_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0) + QC_1 * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0) + QC_1 * QD_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0) + QD_0 * QD_1 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_0 * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_1 * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_1 * QC_1)
                        )

                    + F8_t[1] * (-0.25) * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1)
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0)
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_1)
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_0)
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_1)
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * PB_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD2(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[2];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[1] * (-0.5) * S1 * inv_S2 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * PB_1)
                        )

                    + F8_t[1] * (-0.5) * S2 * inv_S1 * inv_S1 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QC_1 * QD_0 * QD_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD3(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[2];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[1] * 0.25 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QD_0 + PA_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QD_1 + PA_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * QC_1 * QD_0 + PA_1 * PQ[a0] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QC_1 * QD_1 + PA_1 * PQ[a0] * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 + PB_0 * PQ[a0] * QC_0 * QC_1)
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PB_0 * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a0] * QC_0 * QD_0)
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PB_0 * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a0] * QC_0 * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b0] * QC_1 * QD_0 + PB_0 * PQ[a0] * QC_1 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QC_1 * QD_1 + PB_0 * PQ[a0] * QC_1 * QD_1)
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PB_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a0] * QD_0 * QD_1)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * QC_0 * QC_1)
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PB_1 * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PB_1 * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[a0] * QC_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[a0] * QC_1 * QD_1)
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PB_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * QD_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * QC_0 * QC_1 * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * QC_0 * QC_1 * QD_1)
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PA_0 * QC_0 * QD_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QC_1 + PB_0 * PQ[a1] * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PB_0 * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a1] * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PB_0 * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a1] * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b0] * QC_1 * QD_0 + PB_0 * PQ[a1] * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QC_1 * QD_1 + PB_0 * PQ[a1] * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PB_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a1] * QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a1] * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PB_1 * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a1] * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PB_1 * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a1] * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[a1] * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[a1] * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PB_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a1] * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * QC_0 * QC_1 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * QC_0 * QC_1 * QD_1)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PA_1 * QC_0 * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * QC_1 * QD_0 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[b0] * QC_0 * QD_1)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[b0] * QC_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[b0] * QC_1 * QD_1)
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * QC_0 * QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * QC_0 * QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PB_0 * QC_0 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * QC_1 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * QC_0 * QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * QC_0 * QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PB_1 * QC_0 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * QC_1 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD4(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[2];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 1, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[1] * 0.25 * inv_S2 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * PQ[b1] + PA_0 * PA_1 * PB_1 * PQ[b0] + PA_0 * PB_0 * PB_1 * PQ[a1] + PA_1 * PB_0 * PB_1 * PQ[a0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_0 * QC_1)
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PB_0 * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PB_0 * QD_1)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_1 * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_1 * QC_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PB_1 * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PB_1 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * QC_0 * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * QC_0 * QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * QC_0 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * QC_1 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * QD_0 * QD_1 * (-1.0))
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PB_1 * QC_0)
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PB_1 * QC_1)
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * PB_1 * QD_0)
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * PB_1 * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PB_0 * QC_0 * QC_1 * (-1.0))
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_0 * QC_0 * QD_0 * (-1.0))
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PB_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_0 * QC_0 * QD_1 * (-1.0))
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PB_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_0 * QC_1 * QD_1 * (-1.0))
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_0 * QD_0 * QD_1 * (-1.0))
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PB_1 * QC_0 * QC_1 * (-1.0))
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_1 * QC_0 * QD_0 * (-1.0))
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_1 * QC_0 * QD_1 * (-1.0))
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PB_1 * QC_1 * QD_0 * (-1.0))
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_1 * QC_1 * QD_1 * (-1.0))
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_1 * QD_0 * QD_1 * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PB_0 * PB_1 * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PB_1 * QC_1)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PB_0 * PB_1 * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PB_0 * PB_1 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[c1] * QC_0 * (-1.0) + PA_1 * PB_0 * QC_0 * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_0 * QC_0 * QD_0 * (-1.0))
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PB_0 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_0 * QC_0 * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_1 * (-1.0) + PA_1 * PB_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QC_1 * (-1.0) + PA_1 * PB_0 * QC_1 * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_0 * QD_0 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PA_1 * PB_1 * QC_0 * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_1 * QC_0 * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_1 * QC_0 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PA_1 * PB_1 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PA_1 * PB_1 * QC_1 * QD_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_1 * QD_0 * QD_1 * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * QC_0 * QC_1 * (-1.0))
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * QC_0 * QD_0 * (-1.0))
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * QC_0 * QD_1 * (-1.0))
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * QC_1 * QD_1 * (-1.0))
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * QD_0 * QD_1 * (-1.0))
                        )

                    + F8_t[1] * (-0.5) * S1 * inv_S2 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * QC_0 + PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QC_1)
                        + delta[c1][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QC_0 + PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QC_0 + PA_0 * PA_1 * PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QC_1 + PA_0 * PA_1 * PB_0 * PB_1 * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QC_1 + PA_0 * PA_1 * PB_0 * PB_1 * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QD_0 + PA_0 * PA_1 * PB_0 * PB_1 * QD_0 * QD_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD5(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[3];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[1] * 0.5 * S2 * inv_S1 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PA_1 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1 + PA_1 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1 + PB_0 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1 + PB_1 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1 + PB_0 * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1 + PB_1 * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PB_1 * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1 + PB_1 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F8_t[1] * 0.5 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QC_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QC_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QC_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1)
                        + delta[c1][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QD_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QD_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QD_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QD_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QD_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QD_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QC_1 * QD_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_1 * QD_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_1 * QD_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QC_1 * QD_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_1 * QD_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_1 * QD_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * QD_0 * QD_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * QD_0 * QD_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1)
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PA_0 * PA_1 * PB_0 * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PA_0 * PA_1 * PB_1 * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * QC_0 * QC_1 * QD_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * QC_0 * QC_1 * QD_1)
                        + delta[a1][c1] * (PA_0 * PB_0 * PB_1 * QC_0 * QD_0 * QD_1)
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PA_1 * PB_0 * PB_1 * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0))
                        )

                    + F8_t[1] * S1 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )

                    + F8_t[1] * S2 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F8_t[2] * 0.125 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0)
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_1)
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_0)
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_1)
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * PB_1)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD6(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[3];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[2] * 0.125 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (QC_0 * QC_1)
                        )

                    + F8_t[2] * 0.125 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b0])
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_0 * QC_0 * (-1.0) + PQ[a0] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_0 * QC_1 * (-1.0) + PQ[a0] * QC_1)
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * QD_0 * (-1.0) + PQ[a0] * QD_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * QD_1 * (-1.0) + PQ[a0] * QD_1)
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PQ[b0] * (-1.0) + PB_0 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_1 * QC_0 * (-1.0) + PQ[a1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_1 * QC_1 * (-1.0) + PQ[a1] * QC_1)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * QD_0 * (-1.0) + PQ[a1] * QD_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * QD_1 * (-1.0) + PQ[a1] * QD_1)
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0]) * (PB_0 * QC_0 * (-1.0) + PQ[b0] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PB_0 * QC_1 * (-1.0) + PQ[b0] * QC_1)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * QD_0 * (-1.0) + PQ[b0] * QD_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * QD_1 * (-1.0) + PQ[b0] * QD_1)
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0]) * (PB_1 * QC_0 * (-1.0) + PQ[b1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PB_1 * QC_1 * (-1.0) + PQ[b1] * QC_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * QD_0 * (-1.0) + PQ[b1] * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * QD_1 * (-1.0) + PQ[b1] * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (PQ[c0] * QD_0 * 2.0 + PQ[d0] * QC_0 * 2.0 + QC_0 * QD_0 * 2.0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (PQ[c0] * QD_1 * 2.0 + PQ[d1] * QC_0 * 2.0 + QC_0 * QD_1 * 2.0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[c1] * QD_0 * 2.0 + PQ[d0] * QC_1 * 2.0 + QC_1 * QD_0 * 2.0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[c1] * QD_1 * 2.0 + PQ[d1] * QC_1 * 2.0 + QC_1 * QD_1 * 2.0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (PQ[d0] * QD_1 * 2.0 + PQ[d1] * QD_0 * 2.0 + QD_0 * QD_1 * 2.0)
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1]) * (QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1]) * (QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][c1] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1]) * (QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * QC_1 * 2.0 + PQ[c1] * QC_0 * 2.0 + QC_0 * QC_1 * 2.0)
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (QC_0 * QC_1)
                        )

                    + F8_t[2] * 0.125 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * (-2.0) + PB_0 * PQ[a0] * (-2.0) + PA_0 * PB_0 * 2.0)
                        + (delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a1][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * PB_0)
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * (-2.0) + PA_0 * PB_1 * 2.0)
                        + (delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a1][d1] * delta[b0][d0] * delta[c0][c1]) * (PA_0 * PB_1)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * (-2.0) + PA_1 * PQ[a0] * (-2.0) + PA_0 * PA_1 * 2.0)
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_0 * PQ[c0] * (-1.0) + PA_0 * QC_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_0 * PQ[c1] * (-1.0) + PA_0 * QC_1 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * PQ[d0] * (-1.0) + PA_0 * QD_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * PQ[d1] * (-1.0) + PA_0 * QD_1 * (-1.0))
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PQ[b0] * (-2.0) + PB_0 * PQ[a1] * (-2.0) + PA_1 * PB_0 * 2.0)
                        + (delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_1 * PB_0)
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PQ[b1] * (-2.0) + PB_1 * PQ[a1] * (-2.0) + PA_1 * PB_1 * 2.0)
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PA_1 * PB_1)
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_1 * PQ[c0] * (-1.0) + PA_1 * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_1 * PQ[c1] * (-1.0) + PA_1 * QC_1 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * PQ[d0] * (-1.0) + PA_1 * QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * PQ[d1] * (-1.0) + PA_1 * QD_1 * (-1.0))
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] * (-2.0) + PB_1 * PQ[b0] * (-2.0) + PB_0 * PB_1 * 2.0)
                        + (delta[a0][c0] * delta[a1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[c0][c1]) * (PB_0 * PB_1)
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0]) * (PB_0 * PQ[c0] * (-1.0) + PB_0 * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PB_0 * PQ[c1] * (-1.0) + PB_0 * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * PQ[d0] * (-1.0) + PB_0 * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * PQ[d1] * (-1.0) + PB_0 * QD_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0]) * (PB_1 * PQ[c0] * (-1.0) + PB_1 * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PB_1 * PQ[c1] * (-1.0) + PB_1 * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * PQ[d0] * (-1.0) + PB_1 * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * PQ[d1] * (-1.0) + PB_1 * QD_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * PA_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                        )

                    + F8_t[2] * 0.25 * S1 * S1 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * PB_1)
                        )

                    + F8_t[2] * 0.25 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * PQ[b1] * (-2.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * (-2.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * (-2.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * PQ[c0] * (-1.0) + PA_0 * PA_1 * PB_0 * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_0 * PQ[c1] * (-1.0) + PA_0 * PA_1 * PB_0 * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PB_0 * PQ[d0] * (-1.0) + PA_0 * PA_1 * PB_0 * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PB_0 * PQ[d1] * (-1.0) + PA_0 * PA_1 * PB_0 * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_1 * PQ[c0] * (-1.0) + PA_0 * PA_1 * PB_1 * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_1 * PQ[c1] * (-1.0) + PA_0 * PA_1 * PB_1 * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PB_1 * PQ[d0] * (-1.0) + PA_0 * PA_1 * PB_1 * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PB_1 * PQ[d1] * (-1.0) + PA_0 * PA_1 * PB_1 * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_1)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_1)
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0)
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PB_1 * PQ[c0] * (-1.0) + PA_0 * PB_0 * PB_1 * QC_0 * (-1.0))
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PB_1 * PQ[c1] * (-1.0) + PA_0 * PB_0 * PB_1 * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * PB_1 * PQ[d0] * (-1.0) + PA_0 * PB_0 * PB_1 * QD_0 * (-1.0))
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * PB_1 * PQ[d1] * (-1.0) + PA_0 * PB_0 * PB_1 * QD_1 * (-1.0))
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] + PA_0 * PB_0 * PQ[c0] * QC_1 + PA_0 * PB_0 * PQ[c1] * QC_0)
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] + PA_0 * PB_0 * PQ[c0] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_0)
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PB_0 * PQ[c0] * PQ[d1] + PA_0 * PB_0 * PQ[c0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_0)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * PQ[c1] * PQ[d0] + PA_0 * PB_0 * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_1)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * PQ[c1] * PQ[d1] + PA_0 * PB_0 * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_1)
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PB_0 * PQ[d0] * PQ[d1] + PA_0 * PB_0 * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QD_0)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] + PA_0 * PB_1 * PQ[c0] * QC_1 + PA_0 * PB_1 * PQ[c1] * QC_0)
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] + PA_0 * PB_1 * PQ[c0] * QD_0 + PA_0 * PB_1 * PQ[d0] * QC_0)
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PB_1 * PQ[c0] * PQ[d1] + PA_0 * PB_1 * PQ[c0] * QD_1 + PA_0 * PB_1 * PQ[d1] * QC_0)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * PQ[c1] * PQ[d0] + PA_0 * PB_1 * PQ[c1] * QD_0 + PA_0 * PB_1 * PQ[d0] * QC_1)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * PQ[c1] * PQ[d1] + PA_0 * PB_1 * PQ[c1] * QD_1 + PA_0 * PB_1 * PQ[d1] * QC_1)
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PB_1 * PQ[d0] * PQ[d1] + PA_0 * PB_1 * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[d1] * QD_0)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PB_0 * PB_1 * PQ[c0] * (-1.0) + PA_1 * PB_0 * PB_1 * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PB_1 * PQ[c1] * (-1.0) + PA_1 * PB_0 * PB_1 * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PB_0 * PB_1 * PQ[d0] * (-1.0) + PA_1 * PB_0 * PB_1 * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PB_0 * PB_1 * PQ[d1] * (-1.0) + PA_1 * PB_0 * PB_1 * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * PQ[c0] * PQ[c1] + PA_1 * PB_0 * PQ[c0] * QC_1 + PA_1 * PB_0 * PQ[c1] * QC_0)
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PB_0 * PQ[c0] * PQ[d0] + PA_1 * PB_0 * PQ[c0] * QD_0 + PA_1 * PB_0 * PQ[d0] * QC_0)
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PB_0 * PQ[c0] * PQ[d1] + PA_1 * PB_0 * PQ[c0] * QD_1 + PA_1 * PB_0 * PQ[d1] * QC_0)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * PQ[c1] * PQ[d0] + PA_1 * PB_0 * PQ[c1] * QD_0 + PA_1 * PB_0 * PQ[d0] * QC_1)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * PQ[c1] * PQ[d1] + PA_1 * PB_0 * PQ[c1] * QD_1 + PA_1 * PB_0 * PQ[d1] * QC_1)
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PB_0 * PQ[d0] * PQ[d1] + PA_1 * PB_0 * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[d1] * QD_0)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * PQ[c0] * PQ[c1] + PA_1 * PB_1 * PQ[c0] * QC_1 + PA_1 * PB_1 * PQ[c1] * QC_0)
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PB_1 * PQ[c0] * PQ[d0] + PA_1 * PB_1 * PQ[c0] * QD_0 + PA_1 * PB_1 * PQ[d0] * QC_0)
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PB_1 * PQ[c0] * PQ[d1] + PA_1 * PB_1 * PQ[c0] * QD_1 + PA_1 * PB_1 * PQ[d1] * QC_0)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * PQ[c1] * PQ[d0] + PA_1 * PB_1 * PQ[c1] * QD_0 + PA_1 * PB_1 * PQ[d0] * QC_1)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * PQ[c1] * PQ[d1] + PA_1 * PB_1 * PQ[c1] * QD_1 + PA_1 * PB_1 * PQ[d1] * QC_1)
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PB_1 * PQ[d0] * PQ[d1] + PA_1 * PB_1 * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[d1] * QD_0)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0)
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0)
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1)
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[c1] * QC_0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD7(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[3];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[2] * 0.25 * S2 * S2 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F8_t[2] * 0.25 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1)
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * QC_1 * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1)
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * QC_1 * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * QD_1)
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QC_1)
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * QC_1 * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * QD_1)
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * QC_0 * QC_1 * QD_0 * (-1.0) + PQ[a0] * QC_0 * QC_1 * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[a0] * QC_0 * QC_1 * QD_1)
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PA_0 * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QC_0 * QD_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * QC_1 * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QC_1 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * QC_1 * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QC_1 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * QC_0 * QC_1 * QD_0 * (-1.0) + PQ[a1] * QC_0 * QC_1 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[a1] * QC_0 * QC_1 * QD_1)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PA_1 * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a1] * QC_0 * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * QC_1 * QD_0 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * QC_0 * QC_1 * QD_0 * (-1.0) + PQ[b0] * QC_0 * QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[b0] * QC_0 * QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PB_0 * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QC_0 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[b0] * QC_1 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * QC_0 * QC_1 * QD_0 * (-1.0) + PQ[b1] * QC_0 * QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[b1] * QC_0 * QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PB_1 * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QC_0 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[b1] * QC_1 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QC_1 * QD_0 * QD_1 * 2.0 + PQ[c1] * QC_0 * QD_0 * QD_1 * 2.0 + PQ[d0] * QC_0 * QC_1 * QD_1 * 2.0 + PQ[d1] * QC_0 * QC_1 * QD_0 * 2.0)
                        )

                    + F8_t[2] * 0.25 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b0] * QD_0 + PA_0 * PB_0 * PQ[a1] * QD_0 + PA_1 * PB_0 * PQ[a0] * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b0] * QD_1 + PA_0 * PB_0 * PQ[a1] * QD_1 + PA_1 * PB_0 * PQ[a0] * QD_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b1] * QD_0 + PA_0 * PB_1 * PQ[a1] * QD_0 + PA_1 * PB_1 * PQ[a0] * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b1] * QD_1 + PA_0 * PB_1 * PQ[a1] * QD_1 + PA_1 * PB_1 * PQ[a0] * QD_1)
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_0 + PA_0 * PA_1 * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0 + PA_0 * PA_1 * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QC_1 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[d0] * QC_1 + PA_0 * PA_1 * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_1 + PA_0 * PA_1 * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[d1] * QD_0 + PA_0 * PA_1 * QD_0 * QD_1)
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * PA_1 * QC_0 * QD_0)
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * PA_1 * QC_0 * QD_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PA_1 * QC_1 * QD_0)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PA_1 * QC_1 * QD_1)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * PA_1 * QD_0 * QD_1)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b0] * PQ[b1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] + PA_1 * PB_0 * PQ[a0] * PQ[b1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] + PB_0 * PB_1 * PQ[a0] * PQ[a1])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b0] * QC_0 + PA_0 * PB_0 * PQ[a1] * QC_0 + PA_1 * PB_0 * PQ[a0] * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b0] * QC_1 + PA_0 * PB_0 * PQ[a1] * QC_1 + PA_1 * PB_0 * PQ[a0] * QC_1)
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PQ[b1] * QC_0 + PA_0 * PB_1 * PQ[b0] * QC_0 + PB_0 * PB_1 * PQ[a0] * QC_0)
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PQ[b1] * QC_1 + PA_0 * PB_1 * PQ[b0] * QC_1 + PB_0 * PB_1 * PQ[a0] * QC_1)
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[b1] * QD_0 + PA_0 * PB_1 * PQ[b0] * QD_0 + PB_0 * PB_1 * PQ[a0] * QD_0)
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[b1] * QD_1 + PA_0 * PB_1 * PQ[b0] * QD_1 + PB_0 * PB_1 * PQ[a0] * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[c0] * QC_1 + PA_0 * PB_0 * PQ[c1] * QC_0 + PA_0 * PB_0 * QC_0 * QC_1)
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[c0] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_0 + PA_0 * PB_0 * QC_0 * QD_0)
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_0 + PA_0 * PB_0 * QC_0 * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[d0] * QC_1 + PA_0 * PB_0 * QC_1 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_1 + PA_0 * PB_0 * QC_1 * QD_1)
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[d1] * QD_0 + PA_0 * PB_0 * QD_0 * QD_1)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PB_0 * QC_0 * QC_1)
                        + (delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PA_0 * PB_0 * QC_0 * QD_0)
                        + (delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PA_0 * PB_0 * QC_0 * QD_1)
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PB_0 * QC_1 * QD_0)
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PB_0 * QC_1 * QD_1)
                        + (delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PA_0 * PB_0 * QD_0 * QD_1)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b1] * QC_0 + PA_0 * PB_1 * PQ[a1] * QC_0 + PA_1 * PB_1 * PQ[a0] * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b1] * QC_1 + PA_0 * PB_1 * PQ[a1] * QC_1 + PA_1 * PB_1 * PQ[a0] * QC_1)
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[c0] * QC_1 + PA_0 * PB_1 * PQ[c1] * QC_0 + PA_0 * PB_1 * QC_0 * QC_1)
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[c0] * QD_0 + PA_0 * PB_1 * PQ[d0] * QC_0 + PA_0 * PB_1 * QC_0 * QD_0)
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c0] * QD_1 + PA_0 * PB_1 * PQ[d1] * QC_0 + PA_0 * PB_1 * QC_0 * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[c1] * QD_0 + PA_0 * PB_1 * PQ[d0] * QC_1 + PA_0 * PB_1 * QC_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c1] * QD_1 + PA_0 * PB_1 * PQ[d1] * QC_1 + PA_0 * PB_1 * QC_1 * QD_1)
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[d1] * QD_0 + PA_0 * PB_1 * QD_0 * QD_1)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PB_1 * QC_0 * QC_1)
                        + (delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PA_0 * PB_1 * QC_0 * QD_0)
                        + (delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PA_0 * PB_1 * QC_0 * QD_1)
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PB_1 * QC_1 * QD_0)
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PB_1 * QC_1 * QD_1)
                        + (delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PA_0 * PB_1 * QD_0 * QD_1)
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[c1] * QC_0 + PA_0 * PA_1 * QC_0 * QC_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PA_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PB_0 * PQ[b1] * QC_0 + PA_1 * PB_1 * PQ[b0] * QC_0 + PB_0 * PB_1 * PQ[a1] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PQ[b1] * QC_1 + PA_1 * PB_1 * PQ[b0] * QC_1 + PB_0 * PB_1 * PQ[a1] * QC_1)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PB_0 * PQ[b1] * QD_0 + PA_1 * PB_1 * PQ[b0] * QD_0 + PB_0 * PB_1 * PQ[a1] * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PB_0 * PQ[b1] * QD_1 + PA_1 * PB_1 * PQ[b0] * QD_1 + PB_0 * PB_1 * PQ[a1] * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[c0] * QC_1 + PA_1 * PB_0 * PQ[c1] * QC_0 + PA_1 * PB_0 * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[c0] * QD_0 + PA_1 * PB_0 * PQ[d0] * QC_0 + PA_1 * PB_0 * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[c0] * QD_1 + PA_1 * PB_0 * PQ[d1] * QC_0 + PA_1 * PB_0 * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[c1] * QD_0 + PA_1 * PB_0 * PQ[d0] * QC_1 + PA_1 * PB_0 * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[c1] * QD_1 + PA_1 * PB_0 * PQ[d1] * QC_1 + PA_1 * PB_0 * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[d1] * QD_0 + PA_1 * PB_0 * QD_0 * QD_1)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PB_0 * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PA_1 * PB_0 * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PA_1 * PB_0 * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PB_0 * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PB_0 * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PA_1 * PB_0 * QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[c0] * QC_1 + PA_1 * PB_1 * PQ[c1] * QC_0 + PA_1 * PB_1 * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[c0] * QD_0 + PA_1 * PB_1 * PQ[d0] * QC_0 + PA_1 * PB_1 * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[c0] * QD_1 + PA_1 * PB_1 * PQ[d1] * QC_0 + PA_1 * PB_1 * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[c1] * QD_0 + PA_1 * PB_1 * PQ[d0] * QC_1 + PA_1 * PB_1 * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[c1] * QD_1 + PA_1 * PB_1 * PQ[d1] * QC_1 + PA_1 * PB_1 * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[d1] * QD_0 + PA_1 * PB_1 * QD_0 * QD_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PB_1 * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PA_1 * PB_1 * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PA_1 * PB_1 * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PB_1 * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PB_1 * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PA_1 * PB_1 * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PA_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[c1] * QC_0 + PB_0 * PB_1 * QC_0 * QC_1)
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_0 + PB_0 * PB_1 * QC_0 * QD_0)
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0 + PB_0 * PB_1 * QC_0 * QD_1)
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[d0] * QC_1 + PB_0 * PB_1 * QC_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_1 + PB_0 * PB_1 * QC_1 * QD_1)
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[d1] * QD_0 + PB_0 * PB_1 * QD_0 * QD_1)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PB_1 * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PB_0 * PB_1 * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PB_0 * PB_1 * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PB_1 * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PB_1 * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PB_0 * PB_1 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PA_1 * QC_0 * QC_1)
                        )

                    + F8_t[2] * 0.5 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QC_1 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * QC_0)
                        + delta[c1][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QD_0 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * QD_1 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * QD_0 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * QD_1 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * QD_1 + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d1] * QD_0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD8(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[3];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[2] * 0.5 * S1 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 * (-1.0))
                        + delta[c1][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0 * (-1.0))
                        + delta[c1][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_0 * QD_1 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_1 * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_1 * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QC_1 * QD_1 * (-1.0))
                        + delta[c0][c1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * QD_0 * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][c1] * (PA_0 * PA_1 * PB_0 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_0 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][c1] * (PA_0 * PA_1 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a1][c1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PB_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_0 * PB_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_0 * PB_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PB_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_0 * PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][c1] * (PA_1 * PB_0 * PB_1 * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PB_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_1 * PB_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_1 * PB_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_1 * PB_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_1 * PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_1 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_1 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_1 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_1 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    + F8_t[2] * 0.5 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PA_0 * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F8_t[2] * 0.5 * S2 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_1 * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_1 * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_1 * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_1 * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_1 * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_1 * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1 * QD_0 + PA_0 * PB_0 * PQ[a1] * QC_0 * QC_1 * QD_0 + PA_1 * PB_0 * PQ[a0] * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * QC_0 * QC_1 * QD_1 + PA_0 * PB_0 * PQ[a1] * QC_0 * QC_1 * QD_1 + PA_1 * PB_0 * PQ[a0] * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PA_0 * PA_1 * PQ[b0] * QC_0 * QD_0 * QD_1 + PA_0 * PB_0 * PQ[a1] * QC_0 * QD_0 * QD_1 + PA_1 * PB_0 * PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * QC_1 * QD_0 * QD_1 + PA_0 * PB_0 * PQ[a1] * QC_1 * QD_0 * QD_1 + PA_1 * PB_0 * PQ[a0] * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * QC_0 * QC_1 * QD_0 + PA_0 * PB_1 * PQ[a1] * QC_0 * QC_1 * QD_0 + PA_1 * PB_1 * PQ[a0] * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * QC_0 * QC_1 * QD_1 + PA_0 * PB_1 * PQ[a1] * QC_0 * QC_1 * QD_1 + PA_1 * PB_1 * PQ[a0] * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PA_0 * PA_1 * PQ[b1] * QC_0 * QD_0 * QD_1 + PA_0 * PB_1 * PQ[a1] * QC_0 * QD_0 * QD_1 + PA_1 * PB_1 * PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * QC_1 * QD_0 * QD_1 + PA_0 * PB_1 * PQ[a1] * QC_1 * QD_0 * QD_1 + PA_1 * PB_1 * PQ[a0] * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_0 * PA_1 * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_0 * PA_1 * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_0 * PA_1 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QC_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1)
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * QC_0 * QC_1 * QD_0 + PA_0 * PB_1 * PQ[b0] * QC_0 * QC_1 * QD_0 + PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 * QD_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * QC_0 * QC_1 * QD_1 + PA_0 * PB_1 * PQ[b0] * QC_0 * QC_1 * QD_1 + PB_0 * PB_1 * PQ[a0] * QC_0 * QC_1 * QD_1)
                        + delta[a1][c1] * (PA_0 * PB_0 * PQ[b1] * QC_0 * QD_0 * QD_1 + PA_0 * PB_1 * PQ[b0] * QC_0 * QD_0 * QD_1 + PB_0 * PB_1 * PQ[a0] * QC_0 * QD_0 * QD_1)
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * QC_1 * QD_0 * QD_1 + PA_0 * PB_1 * PQ[b0] * QC_1 * QD_0 * QD_1 + PB_0 * PB_1 * PQ[a0] * QC_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_0 * PB_0 * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_0 * PB_0 * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_0 * PB_0 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * QC_0 * QC_1 * QD_0 + PA_1 * PB_1 * PQ[b0] * QC_0 * QC_1 * QD_0 + PB_0 * PB_1 * PQ[a1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * QC_0 * QC_1 * QD_1 + PA_1 * PB_1 * PQ[b0] * QC_0 * QC_1 * QD_1 + PB_0 * PB_1 * PQ[a1] * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PA_1 * PB_0 * PQ[b1] * QC_0 * QD_0 * QD_1 + PA_1 * PB_1 * PQ[b0] * QC_0 * QD_0 * QD_1 + PB_0 * PB_1 * PQ[a1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * QC_1 * QD_0 * QD_1 + PA_1 * PB_1 * PQ[b0] * QC_1 * QD_0 * QD_1 + PB_0 * PB_1 * PQ[a1] * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_1 * PB_0 * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_1 * PB_0 * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_1 * PB_0 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_1 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_1 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_1 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_0 * PB_1 * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_0 * PB_1 * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_0 * PB_1 * PQ[d1] * QC_0 * QC_1 * QD_0)
                        )

                    + F8_t[2] * S1 * S1 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD9(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[3];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 2, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[2] * S1 * S2 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )

                    + F8_t[2] * S2 * S2 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F8_t[2] * 0.0625 * inv_S1 * inv_S1 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0])
                        )

                    + F8_t[2] * 0.0625 * inv_S1 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * 4.0
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1])
                        )

                    + F8_t[2] * 0.0625 * inv_S2 * inv_S2 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD10(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[4];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[3] * 0.0625 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (-2.0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (-1.0)
                        )

                    + F8_t[3] * 0.0625 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (-2.0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (-1.0)
                        )

                    + F8_t[3] * 0.125 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * (-1.0) + PA_0 * PQ[a1] + PA_1 * PQ[a0])
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * PA_1 * (-1.0))
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_0 * (-1.0) + PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + (delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a1][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * (-1.0))
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PB_1 * (-1.0) + PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + (delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a1][d1] * delta[b0][d0] * delta[c0][c1]) * (PA_0 * PB_1 * (-1.0))
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_0 * (-1.0) + PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + (delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_1 * PB_0 * (-1.0))
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PB_1 * (-1.0) + PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PA_1 * PB_1 * (-1.0))
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * PB_1 * (-1.0) + PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][c0] * delta[a1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[c0][c1]) * (PB_0 * PB_1 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0]) * (PB_0 * PQ[c0])
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PB_0 * PQ[c1])
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * PQ[d0])
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0]) * (PB_1 * PQ[c0])
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PB_1 * PQ[c1])
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * PQ[d0])
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * PQ[c1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (PQ[c0] * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (PQ[c0] * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[c1] * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[c1] * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_0 * PQ[c0])
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_0 * PQ[c1])
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * PQ[d0])
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_1 * PQ[c0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_1 * PQ[c1])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * PQ[d0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * PQ[d1])
                        )

                    + F8_t[3] * (-0.125) * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1])
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0])
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[a0] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a0] * QC_1)
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[a0] * QD_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[a0] * QD_1)
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[a1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a1] * QC_1)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[a1] * QD_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[a1] * QD_1)
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0]) * (PQ[b0] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PQ[b0] * QC_1)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1]) * (PQ[b0] * QD_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1]) * (PQ[b0] * QD_1)
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0]) * (PQ[b1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PQ[b1] * QC_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1]) * (PQ[b1] * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]) * (PQ[b1] * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * QC_1 + PQ[c1] * QC_0 + QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (PQ[c0] * QD_0 + PQ[d0] * QC_0 + QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (PQ[c0] * QD_1 + PQ[d1] * QC_0 + QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[c1] * QD_0 + PQ[d0] * QC_1 + QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[c1] * QD_1 + PQ[d1] * QC_1 + QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (PQ[d0] * QD_1 + PQ[d1] * QD_0 + QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1]) * (QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1]) * (QC_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][c1] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1]) * (QD_0 * QD_1)
                        )

                    + F8_t[3] * 0.125 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[a0] * PQ[d0] * (-1.0) + PQ[a0] * QD_0 * (-1.0) + PA_0 * PQ[d0] + PA_0 * QD_0)
                        + (delta[a1][c0] * delta[b0][c1] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] + delta[a1][d1] * delta[b0][c1] * delta[b1][c0]) * (PA_0 * QD_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[a0] * PQ[d1] * (-1.0) + PQ[a0] * QD_1 * (-1.0) + PA_0 * PQ[d1] + PA_0 * QD_1)
                        + (delta[a1][c0] * delta[b0][c1] * delta[b1][d0] + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] + delta[a1][d0] * delta[b0][c1] * delta[b1][c0]) * (PA_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[a1] * PQ[d0] * (-1.0) + PQ[a1] * QD_0 * (-1.0) + PA_1 * PQ[d0] + PA_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][c1] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][c0]) * (PA_1 * QD_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[a1] * PQ[d1] * (-1.0) + PQ[a1] * QD_1 * (-1.0) + PA_1 * PQ[d1] + PA_1 * QD_1)
                        + (delta[a0][c0] * delta[b0][c1] * delta[b1][d0] + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] + delta[a0][d0] * delta[b0][c1] * delta[b1][c0]) * (PA_1 * QD_1)
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * (-2.0) + PA_0 * PQ[b0] * 2.0 + PB_0 * PQ[a0] * 2.0)
                        + (delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a1][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[b0] + PB_0 * PQ[a0])
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b0] * (-2.0) + PA_1 * PQ[b0] * 2.0 + PB_0 * PQ[a1] * 2.0)
                        + (delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_1 * PQ[b0] + PB_0 * PQ[a1])
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[b1] * 2.0 + PB_1 * PQ[b0] * 2.0)
                        + (delta[a0][c0] * delta[a1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[c0][c1]) * (PB_0 * PQ[b1] + PB_1 * PQ[b0])
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0]) * (PQ[b0] * PQ[c0] * (-1.0) + PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[c0] + PB_0 * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PQ[b0] * PQ[c1] * (-1.0) + PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[c1] + PB_0 * QC_1)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1]) * (PQ[b0] * PQ[d0] * (-1.0) + PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[d0] + PB_0 * QD_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1]) * (PQ[b0] * PQ[d1] * (-1.0) + PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[d1] + PB_0 * QD_1)
                        + (delta[a0][c1] * delta[a1][d0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c1]) * (PB_0 * QC_0)
                        + (delta[a0][c0] * delta[a1][d0] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c0]) * (PB_0 * QC_1)
                        + (delta[a0][c0] * delta[a1][c1] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] + delta[a0][d1] * delta[a1][c1] * delta[b1][c0]) * (PB_0 * QD_0)
                        + (delta[a0][c0] * delta[a1][c1] * delta[b1][d0] + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] + delta[a0][d0] * delta[a1][c1] * delta[b1][c0]) * (PB_0 * QD_1)
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b1] * (-2.0) + PA_0 * PQ[b1] * 2.0 + PB_1 * PQ[a0] * 2.0)
                        + (delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a1][d1] * delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[b1] + PB_1 * PQ[a0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b1] * (-2.0) + PA_1 * PQ[b1] * 2.0 + PB_1 * PQ[a1] * 2.0)
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PA_1 * PQ[b1] + PB_1 * PQ[a1])
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0]) * (PQ[b1] * PQ[c0] * (-1.0) + PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[c0] + PB_1 * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PQ[b1] * PQ[c1] * (-1.0) + PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[c1] + PB_1 * QC_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1]) * (PQ[b1] * PQ[d0] * (-1.0) + PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[d0] + PB_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]) * (PQ[b1] * PQ[d1] * (-1.0) + PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[d1] + PB_1 * QD_1)
                        + (delta[a0][c1] * delta[a1][d0] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c1]) * (PB_1 * QC_0)
                        + (delta[a0][c0] * delta[a1][d0] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c0]) * (PB_1 * QC_1)
                        + (delta[a0][c0] * delta[a1][c1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][c0]) * (PB_1 * QD_0)
                        + (delta[a0][c0] * delta[a1][c1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][c0]) * (PB_1 * QD_1)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * (-2.0) + PA_0 * PQ[a1] * 2.0 + PA_1 * PQ[a0] * 2.0)
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[a0] * PQ[c0] * (-1.0) + PQ[a0] * QC_0 * (-1.0) + PA_0 * PQ[c0] + PA_0 * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a0] * PQ[c1] * (-1.0) + PQ[a0] * QC_1 * (-1.0) + PA_0 * PQ[c1] + PA_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[a1] * PQ[c0] * (-1.0) + PQ[a1] * QC_0 * (-1.0) + PA_1 * PQ[c0] + PA_1 * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a1] * PQ[c1] * (-1.0) + PQ[a1] * QC_1 * (-1.0) + PA_1 * PQ[c1] + PA_1 * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * PQ[c1] * (-2.0) + PQ[c0] * QC_1 * (-2.0) + PQ[c1] * QC_0 * (-2.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (PQ[c0] * PQ[d0] * (-2.0) + PQ[c0] * QD_0 * (-2.0) + PQ[d0] * QC_0 * (-2.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (PQ[c0] * PQ[d1] * (-2.0) + PQ[c0] * QD_1 * (-2.0) + PQ[d1] * QC_0 * (-2.0))
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (PQ[c0] * QC_1 * (-1.0) + PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1]) * (PQ[c0] * QD_0 * (-1.0) + PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1]) * (PQ[c0] * QD_1 * (-1.0) + PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[c1] * PQ[d0] * (-2.0) + PQ[c1] * QD_0 * (-2.0) + PQ[d0] * QC_1 * (-2.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[c1] * PQ[d1] * (-2.0) + PQ[c1] * QD_1 * (-2.0) + PQ[d1] * QC_1 * (-2.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (PQ[c1] * QD_0 * (-1.0) + PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (PQ[c1] * QD_1 * (-1.0) + PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (PQ[d0] * PQ[d1] * (-2.0) + PQ[d0] * QD_1 * (-2.0) + PQ[d1] * QD_0 * (-2.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][c1] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1]) * (PQ[d0] * QD_1 * (-1.0) + PQ[d1] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[a1] + PA_1 * PQ[a0])
                        + (delta[a1][c1] * delta[b0][d0] * delta[b1][d1] + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c1]) * (PA_0 * QC_0)
                        + (delta[a1][c0] * delta[b0][d0] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c0]) * (PA_0 * QC_1)
                        + (delta[a0][c1] * delta[b0][d0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c1]) * (PA_1 * QC_0)
                        + (delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]) * (PA_1 * QC_1)
                        )

                    + F8_t[3] * 0.25 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * PQ[b1] + PA_0 * PA_1 * PB_1 * PQ[b0] + PA_0 * PB_0 * PB_1 * PQ[a1] + PA_1 * PB_0 * PB_1 * PQ[a0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_0 * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_0 * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PB_0 * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PB_0 * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PB_1 * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PB_1 * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PB_1 * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PB_1 * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PB_1 * PQ[c0])
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PB_1 * PQ[c1])
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * PB_1 * PQ[d0])
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * PB_1 * PQ[d1])
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PB_0 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PB_0 * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PB_0 * PB_1 * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PB_1 * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PB_0 * PB_1 * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PB_0 * PB_1 * PQ[d1])
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PB_0 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PB_0 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PB_0 * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0))
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD11(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[4];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[3] * 0.25 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * (-2.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * (-2.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * (-2.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * (-2.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * (-2.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[b1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0)
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PA_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PA_1 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PA_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * PA_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * PA_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PA_1 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_1)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PA_1 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_0 * PQ[a1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PA_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PA_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PA_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * PA_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PB_0 * PQ[b1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_0 * (-1.0))
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PB_0 * PQ[b1] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[b1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_0 * (-1.0))
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[b1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * QD_1 * (-1.0))
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PB_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0)
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PB_0 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PA_0 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PA_0 * PB_0 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PB_0 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1)
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PB_0 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PB_0 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QC_1 * (-1.0))
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0)
                        + (delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PA_0 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QC_0)
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_0)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PA_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PA_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_1)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_1)
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QC_1 * (-1.0))
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0)
                        + (delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PA_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[d0] * PQ[d1] * QC_1)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PB_0 * PQ[b1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PB_1 * PQ[b0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PB_0 * PQ[b1] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PB_1 * PQ[b0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PB_0 * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[b1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[b0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PB_0 * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[b1] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[b0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PB_0 * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PB_0 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] + PA_1 * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QC_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QC_0)
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PB_0 * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0)
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PB_0 * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PA_1 * PQ[b0] * PQ[c0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_0)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PB_0 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PA_1 * PB_0 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PA_1 * PB_0 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PB_0 * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] + PA_1 * PQ[b0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_1)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PB_0 * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] + PA_1 * PQ[b0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_1)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PB_0 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PB_0 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PB_0 * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0)
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PA_1 * PB_0 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] + PA_1 * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a1] * PQ[c0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QC_0)
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[c0] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0)
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a1] * PQ[c0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_0)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PA_1 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PA_1 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] + PA_1 * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a1] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_1)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PB_1 * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] + PA_1 * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PB_1 * PQ[a1] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PA_1 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0)
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PB_1 * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0)
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PB_1 * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PB_1 * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PB_0 * PB_1 * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PB_0 * PB_1 * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PB_1 * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PB_1 * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1)
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PB_1 * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PB_1 * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PB_1 * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0)
                        + (delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PB_0 * PB_1 * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[d0] * PQ[d1] * QC_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[d0] * PQ[d1] * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    + F8_t[3] * (-0.25) * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * QC_0 * QC_1)
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                        + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * QC_1 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * QC_1 * QD_1)
                        + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * QC_0 * QC_1)
                        + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * QC_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * QC_1 * QD_1)
                        + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * QC_0 * QC_1 * QD_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * QC_0 * QC_1 * QD_1)
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PQ[a0] * QC_0 * QD_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * QC_0 * QC_1)
                        + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * QC_0 * QC_1)
                        + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * QC_0 * QC_1 * QD_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * QC_0 * QC_1 * QD_1)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[a1] * QC_0 * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * QC_1 * QD_0 * QD_1)
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * QC_0 * QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * QC_0 * QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PQ[b0] * QC_0 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * QC_1 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * QC_0 * QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * QC_0 * QC_1 * QD_1)
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PQ[b1] * QC_0 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * QC_1 * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[d1] * QC_0 * QC_1 * QD_0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD12(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[4];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[3] * 0.25 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * QD_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * QD_1)
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_0 + PA_0 * PQ[a1] * QC_0 * QD_0 + PA_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 + PA_0 * PQ[a1] * QC_0 * QD_1 + PA_1 * PQ[a0] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * QC_1 * QD_0 + PA_1 * PQ[a0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * QC_1 * QD_1 + PA_1 * PQ[a0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * QD_0 * QD_1)
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * PQ[a1] * QC_0 * QD_0 + PA_1 * PQ[a0] * QC_0 * QD_0)
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * PQ[a1] * QC_0 * QD_1 + PA_1 * PQ[a0] * QC_0 * QD_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PQ[a1] * QC_1 * QD_0 + PA_1 * PQ[a0] * QC_1 * QD_0)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[a1] * QC_1 * QD_1 + PA_1 * PQ[a0] * QC_1 * QD_1)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * PQ[a1] * QD_0 * QD_1 + PA_1 * PQ[a0] * QD_0 * QD_1)
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[b1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QD_0)
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[b1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QD_1)
                        + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a0] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * QC_0 * QD_0)
                        + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a0] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * QC_0 * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * QC_1 * QD_0 + PB_0 * PQ[a0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * QC_1 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * QC_1 * QD_1 + PB_0 * PQ[a0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * QC_1 * QD_1)
                        + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * QD_0 * QD_1)
                        + (delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PA_0 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a0] * QC_0 * QD_0)
                        + (delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PA_0 * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a0] * QC_0 * QD_1)
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PQ[b0] * QC_1 * QD_0 + PB_0 * PQ[a0] * QC_1 * QD_0)
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PQ[b0] * QC_1 * QD_1 + PB_0 * PQ[a0] * QC_1 * QD_1)
                        + (delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PA_0 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a0] * QD_0 * QD_1)
                        + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_0 + PA_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * QC_0 * QD_0)
                        + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_0 + PA_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * QC_0 * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[b1] * PQ[d0] * QC_1 + PA_0 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[a0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * QC_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[a0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * QC_1 * QD_1)
                        + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * QD_0 * QD_1)
                        + (delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PA_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * QC_0 * QD_0)
                        + (delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PA_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a0] * QC_0 * QD_1)
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[a0] * QC_1 * QD_0)
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[a0] * QC_1 * QD_1)
                        + (delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PA_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * QD_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QC_1 * QD_0 + PA_0 * PQ[c1] * QC_0 * QD_0 + PA_0 * PQ[d0] * QC_0 * QC_1)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[c0] * QC_1 * QD_1 + PA_0 * PQ[c1] * QC_0 * QD_1 + PA_0 * PQ[d1] * QC_0 * QC_1)
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[c0] * QD_0 * QD_1 + PA_0 * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[d1] * QC_0 * QD_0)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[d0] * QC_1 * QD_1 + PA_0 * PQ[d1] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PQ[b0] * PQ[b1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PQ[b0] * PQ[b1] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QD_1)
                        + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_0 + PA_1 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_0 + PB_0 * PQ[a1] * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_0 + PA_1 * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_0 + PB_0 * PQ[a1] * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * QC_1 * QD_0 + PB_0 * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * QC_1 * QD_1 + PB_0 * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * QD_0 * QD_1)
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PA_1 * PQ[b0] * QC_0 * QD_0 + PB_0 * PQ[a1] * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PA_1 * PQ[b0] * QC_0 * QD_1 + PB_0 * PQ[a1] * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PQ[b0] * QC_1 * QD_0 + PB_0 * PQ[a1] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PQ[b0] * QC_1 * QD_1 + PB_0 * PQ[a1] * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PA_1 * PQ[b0] * QD_0 * QD_1 + PB_0 * PQ[a1] * QD_0 * QD_1)
                        + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_0 + PA_1 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a1] * PQ[c0] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_0 + PB_1 * PQ[a1] * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_0 + PA_1 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a1] * PQ[c0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[b1] * PQ[d0] * QC_1 + PA_1 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[a1] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[d0] * QC_1 + PB_1 * PQ[a1] * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_1 + PA_1 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[a1] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * QD_0 * QD_1)
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PA_1 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a1] * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PA_1 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a1] * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[a1] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[a1] * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PA_1 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a1] * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QC_1 * QD_0 + PA_1 * PQ[c1] * QC_0 * QD_0 + PA_1 * PQ[d0] * QC_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PQ[a1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[c0] * QC_1 * QD_1 + PA_1 * PQ[c1] * QC_0 * QD_1 + PA_1 * PQ[d1] * QC_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[c0] * QD_0 * QD_1 + PA_1 * PQ[d0] * QC_0 * QD_1 + PA_1 * PQ[d1] * QC_0 * QD_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PQ[a1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[d0] * QC_1 * QD_1 + PA_1 * PQ[d1] * QC_1 * QD_0)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * QC_1)
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * PQ[b1] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0)
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * PQ[b1] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1)
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PQ[b0] * QC_0 * QC_1 + PB_0 * PQ[a0] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 + PB_0 * PQ[a0] * QC_0 * QC_1)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PQ[b0] * QC_0 * QC_1 + PB_0 * PQ[a0] * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PQ[b0] * PQ[b1] * QC_0 + PB_0 * PQ[a1] * PQ[b1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PQ[b0] * PQ[b1] * QC_1 + PB_0 * PQ[a1] * PQ[b1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * QC_0 + PA_1 * PQ[b0] * QC_0 * QC_1 + PB_0 * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * QC_0 + PB_0 * PQ[a1] * QC_0 * QC_1)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PQ[b0] * QC_0 * QC_1 + PB_0 * PQ[a1] * QC_0 * QC_1)
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 + PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0 + PB_1 * PQ[b0] * QC_0 * QC_1)
                        + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_0 + PB_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_0 + PB_1 * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 + PB_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * QC_0 * QD_1)
                        + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[b1] * PQ[d0] * QC_1 + PB_0 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[b0] * PQ[d0] * QC_1 + PB_1 * PQ[b0] * QC_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * QC_1 * QD_1)
                        + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[b0] * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PB_0 * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[b0] * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PB_0 * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[b0] * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[b0] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[b0] * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PB_0 * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[b0] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QC_1 * QD_0 + PB_0 * PQ[c1] * QC_0 * QD_0 + PB_0 * PQ[d0] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[c0] * QC_1 * QD_1 + PB_0 * PQ[c1] * QC_0 * QD_1 + PB_0 * PQ[d1] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[c0] * QD_0 * QD_1 + PB_0 * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[d1] * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[d0] * QC_1 * QD_1 + PB_0 * PQ[d1] * QC_1 * QD_0)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * QC_1)
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * QC_0 + PA_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * QC_0 * QC_1)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * QC_0 * QC_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * QC_0 + PA_1 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[c0] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * QC_0 + PB_1 * PQ[a1] * QC_0 * QC_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a1] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QC_1 * QD_0 + PB_1 * PQ[c1] * QC_0 * QD_0 + PB_1 * PQ[d0] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[c0] * QC_1 * QD_1 + PB_1 * PQ[c1] * QC_0 * QD_1 + PB_1 * PQ[d1] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[c0] * QD_0 * QD_1 + PB_1 * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[d1] * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[d0] * QC_1 * QD_1 + PB_1 * PQ[d1] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 + PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-2.0) + PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-2.0) + PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-2.0) + PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-2.0) + PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-2.0) + PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-2.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[a1] * QC_0 * QC_1 + PA_1 * PQ[a0] * QC_0 * QC_1)
                        )

                    + F8_t[3] * (-0.5) * S1 * S1 * S1 * inv_S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PA_0 * PA_1 * PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD13(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[4];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 3, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[3] * 0.5 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * QC_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * QC_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QC_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * QC_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0)
                        + delta[c1][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d1] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d1] * QD_0 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * QD_1 + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PB_0 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PB_0 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PB_0 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PB_0 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PB_0 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PB_1 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PB_1 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PB_1 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PB_1 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a1][c1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )

                    + F8_t[3] * 0.5 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * (-1.0))
                        + delta[c1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_0 * (-1.0))
                        + delta[c1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_1 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_1 * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QC_1 * QD_1 * (-1.0))
                        + delta[c0][c1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * QD_0 * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][c1] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][c1] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PA_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a1][c1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][c1] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_0 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_0 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PB_1 * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    + F8_t[3] * (-0.5) * S2 * S2 * S2 * inv_S1 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[b0][b1] * (PQ[a0] * PQ[a1] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1)
                        )

                    + F8_t[3] * 0.5 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + delta[c1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_1)
                        + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * QD_0)
                        + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * QD_1)
                        + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_0 + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_0 + PB_0 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_1 + PB_0 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PA_0 * PQ[a1] * PQ[b0] * QC_0 * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[a1] * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * QC_1 * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b0] * QC_1 * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[a1] * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_0 + PA_1 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_0 + PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[b1] * QC_0 * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * QC_1 * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[b1] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[a1] * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0 + PA_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_0 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_0)
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QC_1 * QD_1)
                        + delta[a1][c1] * (PA_0 * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * QC_1 * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[b1] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[b0] * QC_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_0 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_0 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 + PB_0 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_0 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 + PB_1 * PQ[a0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[a0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[a0] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 + PB_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_0 + PB_1 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_1 + PB_0 * PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PA_1 * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[b1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * QC_1 * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[b1] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[b0] * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 + PB_0 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_0 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PA_1 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PA_1 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 + PB_1 * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_0 * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_0 * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_0 * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 + PB_1 * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PB_1 * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PB_1 * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        )

                    + F8_t[3] * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    + F8_t[3] * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD14(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[5];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[3] * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )

                    + F8_t[3] * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F8_t[4] * 0.125 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[a1])
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[a1] * (-1.0) + PA_1 * PQ[a0] * (-1.0))
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b0])
                        + (delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a1][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[b0] * (-1.0) + PB_0 * PQ[a0] * (-1.0))
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0) + PQ[a0] * PQ[b1])
                        + (delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a1][d1] * delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[b1] * (-1.0) + PB_1 * PQ[a0] * (-1.0))
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_0 * PQ[c0] * (-1.0) + PQ[a0] * PQ[c0])
                        + (delta[a1][c1] * delta[b0][d0] * delta[b1][d1] + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c1]) * (PA_0 * PQ[c0] * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_0 * PQ[c1] * (-1.0) + PQ[a0] * PQ[c1])
                        + (delta[a1][c0] * delta[b0][d0] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[c1] * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * PQ[d0] * (-1.0) + PQ[a0] * PQ[d0])
                        + (delta[a1][c0] * delta[b0][c1] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] + delta[a1][d1] * delta[b0][c1] * delta[b1][c0]) * (PA_0 * PQ[d0] * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_0 * PQ[d1] * (-1.0) + PQ[a0] * PQ[d1])
                        + (delta[a1][c0] * delta[b0][c1] * delta[b1][d0] + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] + delta[a1][d0] * delta[b0][c1] * delta[b1][c0]) * (PA_0 * PQ[d1] * (-1.0))
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PQ[b0] * (-1.0) + PB_0 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b0])
                        + (delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PA_1 * PQ[b0] * (-1.0) + PB_0 * PQ[a1] * (-1.0))
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PA_1 * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * (-1.0) + PQ[a1] * PQ[b1])
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PA_1 * PQ[b1] * (-1.0) + PB_1 * PQ[a1] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PA_1 * PQ[c0] * (-1.0) + PQ[a1] * PQ[c0])
                        + (delta[a0][c1] * delta[b0][d0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c1]) * (PA_1 * PQ[c0] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PA_1 * PQ[c1] * (-1.0) + PQ[a1] * PQ[c1])
                        + (delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]) * (PA_1 * PQ[c1] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * PQ[d0] * (-1.0) + PQ[a1] * PQ[d0])
                        + (delta[a0][c0] * delta[b0][c1] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][c0]) * (PA_1 * PQ[d0] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PA_1 * PQ[d1] * (-1.0) + PQ[a1] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][c1] * delta[b1][d0] + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] + delta[a0][d0] * delta[b0][c1] * delta[b1][c0]) * (PA_1 * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0) + PQ[b0] * PQ[b1])
                        + (delta[a0][c0] * delta[a1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[c0][c1]) * (PB_0 * PQ[b1] * (-1.0) + PB_1 * PQ[b0] * (-1.0))
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0]) * (PB_0 * PQ[c0] * (-1.0) + PQ[b0] * PQ[c0])
                        + (delta[a0][c1] * delta[a1][d0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c1]) * (PB_0 * PQ[c0] * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PB_0 * PQ[c1] * (-1.0) + PQ[b0] * PQ[c1])
                        + (delta[a0][c0] * delta[a1][d0] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c0]) * (PB_0 * PQ[c1] * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * PQ[d0] * (-1.0) + PQ[b0] * PQ[d0])
                        + (delta[a0][c0] * delta[a1][c1] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] + delta[a0][d1] * delta[a1][c1] * delta[b1][c0]) * (PB_0 * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1]) * (PB_0 * PQ[d1] * (-1.0) + PQ[b0] * PQ[d1])
                        + (delta[a0][c0] * delta[a1][c1] * delta[b1][d0] + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] + delta[a0][d0] * delta[a1][c1] * delta[b1][c0]) * (PB_0 * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0]) * (PB_1 * PQ[c0] * (-1.0) + PQ[b1] * PQ[c0])
                        + (delta[a0][c1] * delta[a1][d0] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c1]) * (PB_1 * PQ[c0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PB_1 * PQ[c1] * (-1.0) + PQ[b1] * PQ[c1])
                        + (delta[a0][c0] * delta[a1][d0] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c0]) * (PB_1 * PQ[c1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * PQ[d0] * (-1.0) + PQ[b1] * PQ[d0])
                        + (delta[a0][c0] * delta[a1][c1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][c0]) * (PB_1 * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]) * (PB_1 * PQ[d1] * (-1.0) + PQ[b1] * PQ[d1])
                        + (delta[a0][c0] * delta[a1][c1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][c0]) * (PB_1 * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * PQ[c1] * 2.0)
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (PQ[c0] * PQ[c1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (PQ[c0] * PQ[d0] * 2.0)
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1]) * (PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (PQ[c0] * PQ[d1] * 2.0)
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1]) * (PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[c1] * PQ[d0] * 2.0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (PQ[c1] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[c1] * PQ[d1] * 2.0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (PQ[c1] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (PQ[d0] * PQ[d1] * 2.0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][c1] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1]) * (PQ[d0] * PQ[d1])
                        )

                    + F8_t[4] * 0.125 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[a0] * PQ[d0] + PQ[a0] * QD_0)
                        + (delta[a1][c0] * delta[b0][c1] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] + delta[a1][d1] * delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * QD_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[a0] * PQ[d1] + PQ[a0] * QD_1)
                        + (delta[a1][c0] * delta[b0][c1] * delta[b1][d0] + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] + delta[a1][d0] * delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * QD_1)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1]) * (PQ[a1] * PQ[d0] + PQ[a1] * QD_0)
                        + (delta[a0][c0] * delta[b0][c1] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][c0]) * (PQ[a1] * QD_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1]) * (PQ[a1] * PQ[d1] + PQ[a1] * QD_1)
                        + (delta[a0][c0] * delta[b0][c1] * delta[b1][d0] + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] + delta[a0][d0] * delta[b0][c1] * delta[b1][c0]) * (PQ[a1] * QD_1)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1]) * (PQ[b0] * PQ[d0] + PQ[b0] * QD_0)
                        + (delta[a0][c0] * delta[a1][c1] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] + delta[a0][d1] * delta[a1][c1] * delta[b1][c0]) * (PQ[b0] * QD_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1]) * (PQ[b0] * PQ[d1] + PQ[b0] * QD_1)
                        + (delta[a0][c0] * delta[a1][c1] * delta[b1][d0] + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] + delta[a0][d0] * delta[a1][c1] * delta[b1][c0]) * (PQ[b0] * QD_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1]) * (PQ[b1] * PQ[d0] + PQ[b1] * QD_0)
                        + (delta[a0][c0] * delta[a1][c1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][c0]) * (PQ[b1] * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1]) * (PQ[b1] * PQ[d1] + PQ[b1] * QD_1)
                        + (delta[a0][c0] * delta[a1][c1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][c0]) * (PQ[b1] * QD_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1]) * (PQ[c0] * PQ[d0] + PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1]) * (PQ[c0] * QD_0 + PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0]) * (PQ[c0] * PQ[d1] + PQ[c0] * QD_1 + PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c1] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1]) * (PQ[c0] * QD_1 + PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1]) * (PQ[c1] * PQ[d0] + PQ[c1] * QD_0 + PQ[d0] * QC_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (PQ[c1] * QD_0 + PQ[d0] * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0]) * (PQ[c1] * PQ[d1] + PQ[c1] * QD_1 + PQ[d1] * QC_1)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (PQ[c1] * QD_1 + PQ[d1] * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1]) * (PQ[d0] * PQ[d1] + PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[b1][c1] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1]) * (PQ[d0] * QD_1 + PQ[d1] * QD_0)
                        + (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * 2.0)
                        + (delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[a1])
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * 2.0)
                        + (delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a1][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b0])
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b1] * 2.0)
                        + (delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a1][d1] * delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[a0] * PQ[c0] + PQ[a0] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a0] * PQ[c1] + PQ[a0] * QC_1)
                        + (delta[a1][c1] * delta[b0][d0] * delta[b1][d1] + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c1]) * (PQ[a0] * QC_0)
                        + (delta[a1][c0] * delta[b0][d0] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * QC_1)
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b0] * 2.0)
                        + (delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[a1] * PQ[b0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b1] * 2.0)
                        + (delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0]) * (PQ[a1] * PQ[c0] + PQ[a1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0]) * (PQ[a1] * PQ[c1] + PQ[a1] * QC_1)
                        + (delta[a0][c1] * delta[b0][d0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c1]) * (PQ[a1] * QC_0)
                        + (delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]) * (PQ[a1] * QC_1)
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0]) * (PQ[b0] * PQ[b1] * 2.0)
                        + (delta[a0][c0] * delta[a1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[c0][c1]) * (PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0]) * (PQ[b0] * PQ[c0] + PQ[b0] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0]) * (PQ[b0] * PQ[c1] + PQ[b0] * QC_1)
                        + (delta[a0][c1] * delta[a1][d0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c1]) * (PQ[b0] * QC_0)
                        + (delta[a0][c0] * delta[a1][d0] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c0]) * (PQ[b0] * QC_1)
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0]) * (PQ[b1] * PQ[c0] + PQ[b1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0]) * (PQ[b1] * PQ[c1] + PQ[b1] * QC_1)
                        + (delta[a0][c1] * delta[a1][d0] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c1]) * (PQ[b1] * QC_0)
                        + (delta[a0][c0] * delta[a1][d0] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c0]) * (PQ[b1] * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1]) * (PQ[c0] * PQ[c1] + PQ[c0] * QC_1 + PQ[c1] * QC_0)
                        + (delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (PQ[c0] * QC_1 + PQ[c1] * QC_0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD15(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[5];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        //const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        //const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        //const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        //const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[4] * 0.25 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b0] * PQ[b1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] + PA_1 * PB_0 * PQ[a0] * PQ[b1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] + PB_0 * PB_1 * PQ[a0] * PQ[a1])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b0] * PQ[c0] + PA_0 * PB_0 * PQ[a1] * PQ[c0] + PA_1 * PB_0 * PQ[a0] * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b0] * PQ[c1] + PA_0 * PB_0 * PQ[a1] * PQ[c1] + PA_1 * PB_0 * PQ[a0] * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b0] * PQ[d0] + PA_0 * PB_0 * PQ[a1] * PQ[d0] + PA_1 * PB_0 * PQ[a0] * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b0] * PQ[d1] + PA_0 * PB_0 * PQ[a1] * PQ[d1] + PA_1 * PB_0 * PQ[a0] * PQ[d1])
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PB_0 * PQ[b1] * PQ[c0] + PA_0 * PB_1 * PQ[b0] * PQ[c0] + PB_0 * PB_1 * PQ[a0] * PQ[c0])
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PB_0 * PQ[b1] * PQ[c1] + PA_0 * PB_1 * PQ[b0] * PQ[c1] + PB_0 * PB_1 * PQ[a0] * PQ[c1])
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[b1] * PQ[d0] + PA_0 * PB_1 * PQ[b0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[d0])
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PB_0 * PQ[b1] * PQ[d1] + PA_0 * PB_1 * PQ[b0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[d1])
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[c1])
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PB_0 * PQ[c0] * PQ[c1])
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[d0])
                        + (delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PA_0 * PB_0 * PQ[c0] * PQ[d0])
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[d1])
                        + (delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PA_0 * PB_0 * PQ[c0] * PQ[d1])
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[c1] * PQ[d0])
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PB_0 * PQ[c1] * PQ[d0])
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[c1] * PQ[d1])
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PB_0 * PQ[c1] * PQ[d1])
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[d0] * PQ[d1])
                        + (delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PA_0 * PB_0 * PQ[d0] * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PA_1 * PQ[b1] * PQ[c0] + PA_0 * PB_1 * PQ[a1] * PQ[c0] + PA_1 * PB_1 * PQ[a0] * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PA_1 * PQ[b1] * PQ[c1] + PA_0 * PB_1 * PQ[a1] * PQ[c1] + PA_1 * PB_1 * PQ[a0] * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b1] * PQ[d0] + PA_0 * PB_1 * PQ[a1] * PQ[d0] + PA_1 * PB_1 * PQ[a0] * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PA_1 * PQ[b1] * PQ[d1] + PA_0 * PB_1 * PQ[a1] * PQ[d1] + PA_1 * PB_1 * PQ[a0] * PQ[d1])
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[c1])
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PB_1 * PQ[c0] * PQ[c1])
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[d0])
                        + (delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PA_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[d1])
                        + (delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PA_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[c1] * PQ[d0])
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PB_1 * PQ[c1] * PQ[d0])
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[c1] * PQ[d1])
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PB_1 * PQ[c1] * PQ[d1])
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[d0] * PQ[d1])
                        + (delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PA_0 * PB_1 * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1])
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d0])
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[d1])
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d0])
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[c1] * PQ[d1])
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PQ[d0] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PB_0 * PQ[b1] * PQ[c0] + PA_1 * PB_1 * PQ[b0] * PQ[c0] + PB_0 * PB_1 * PQ[a1] * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PB_0 * PQ[b1] * PQ[c1] + PA_1 * PB_1 * PQ[b0] * PQ[c1] + PB_0 * PB_1 * PQ[a1] * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PB_0 * PQ[b1] * PQ[d0] + PA_1 * PB_1 * PQ[b0] * PQ[d0] + PB_0 * PB_1 * PQ[a1] * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PB_0 * PQ[b1] * PQ[d1] + PA_1 * PB_1 * PQ[b0] * PQ[d1] + PB_0 * PB_1 * PQ[a1] * PQ[d1])
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[c1])
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PB_0 * PQ[c0] * PQ[c1])
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[d0])
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PA_1 * PB_0 * PQ[c0] * PQ[d0])
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[d1])
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PA_1 * PB_0 * PQ[c0] * PQ[d1])
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[c1] * PQ[d0])
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PB_0 * PQ[c1] * PQ[d0])
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[c1] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PB_0 * PQ[c1] * PQ[d1])
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PA_1 * PB_0 * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[c1])
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PB_1 * PQ[c0] * PQ[c1])
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[d0])
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PA_1 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[d1])
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PA_1 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[c1] * PQ[d0])
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PB_1 * PQ[c1] * PQ[d0])
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[c1] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PB_1 * PQ[c1] * PQ[d1])
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PA_1 * PB_1 * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1])
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PB_1 * PQ[c0] * PQ[c1])
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + (delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PB_0 * PB_1 * PQ[c0] * PQ[d0])
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[d1])
                        + (delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PB_0 * PB_1 * PQ[c0] * PQ[d1])
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d0])
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PB_1 * PQ[c1] * PQ[d0])
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[c1] * PQ[d1])
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PB_1 * PQ[c1] * PQ[d1])
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PB_0 * PB_1 * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PA_1 * PQ[c0] * PQ[c1])
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * PA_1 * PQ[c0] * PQ[d0])
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * PA_1 * PQ[c0] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PA_1 * PQ[c1] * PQ[d0])
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PA_1 * PQ[c1] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * PA_1 * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD16(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[5];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[4] * 0.25 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * (-2.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * (-2.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0)
                        + delta[b0][b1] * delta[c1][d1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0)
                        + delta[b0][b1] * delta[c1][d0] * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_1)
                        + delta[b0][b1] * delta[c0][d0] * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_0 * (-1.0))
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_0 * (-1.0))
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * QD_1 * (-1.0))
                        + delta[a1][b1] * delta[d0][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0)
                        + delta[a1][b1] * delta[c1][d1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[a1][b1] * delta[c1][d0] * (PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PA_0 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PA_0 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][b1] * delta[c0][d1] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1)
                        + delta[a1][b1] * delta[c0][d0] * (PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1)
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a1][b1] * delta[c0][c1] * (PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0)
                        + (delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PA_0 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a1][b0] * delta[d0][d1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0)
                        + delta[a1][b0] * delta[c1][d1] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[a1][b0] * delta[c1][d0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PA_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PA_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][b0] * delta[c0][d1] * (PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_1)
                        + delta[a1][b0] * delta[c0][d0] * (PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_1)
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a1][b0] * delta[c0][c1] * (PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0)
                        + (delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PA_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PA_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PA_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QC_0)
                        + delta[a0][b1] * delta[c1][d1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[a0][b1] * delta[c1][d0] * (PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_0)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PA_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PA_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_1)
                        + delta[a0][b1] * delta[c0][d0] * (PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_1)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0)
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PA_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QC_0)
                        + delta[a0][b0] * delta[c1][d1] * (PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[a0][b0] * delta[c1][d0] * (PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_0)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PA_1 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PA_1 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_1)
                        + delta[a0][b0] * delta[c0][d0] * (PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PA_1 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PA_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PA_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][a1] * delta[d0][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                        + delta[a0][a1] * delta[c1][d1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[a0][a1] * delta[c1][d0] * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PB_0 * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PB_0 * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][a1] * delta[c0][d1] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                        + delta[a0][a1] * delta[c0][d0] * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][a1] * delta[c0][c1] * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        + (delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PB_0 * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PB_0 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PB_0 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PB_1 * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PB_1 * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * 2.0 + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * 2.0 + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * 2.0 + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * 2.0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD17(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[5];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[4] * 0.25 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b0] * QD_0)
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b0] * QD_1)
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b1] * QD_0)
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b1] * QD_1)
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 + PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 + PQ[a0] * PQ[a1] * QC_0 * QD_1)
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * QC_1 * QD_0)
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * QC_1 * QD_1)
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PQ[a0] * PQ[a1] * QC_0 * QD_0)
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PQ[a0] * PQ[a1] * QC_0 * QD_1)
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * QC_1 * QD_0)
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * QC_1 * QD_1)
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * QD_0 * QD_1)
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[b1] * QD_0)
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[b1] * QD_1)
                        + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * QC_1 * QD_0)
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * QC_1 * QD_1)
                        + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + (delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PQ[a0] * PQ[b0] * QC_0 * QD_0)
                        + (delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PQ[a0] * PQ[b0] * QC_0 * QD_1)
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * QC_1 * QD_0)
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * QC_1 * QD_1)
                        + (delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * QD_0 * QD_1)
                        + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PQ[a0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PQ[a0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PQ[a0] * PQ[b1] * QC_1 * QD_0)
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * QC_1 * QD_1)
                        + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PQ[a0] * PQ[b1] * QC_0 * QD_0)
                        + (delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PQ[a0] * PQ[b1] * QC_0 * QD_1)
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * QC_1 * QD_0)
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * QC_1 * QD_1)
                        + (delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QC_1 * QD_0 + PQ[a0] * PQ[c1] * QC_0 * QD_0 + PQ[a0] * PQ[d0] * QC_0 * QC_1)
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QC_1 * QD_1 + PQ[a0] * PQ[c1] * QC_0 * QD_1 + PQ[a0] * PQ[d1] * QC_0 * QC_1)
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[d1] * QC_0 * QD_0)
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[d1] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[a1] * PQ[b0] * PQ[b1] * QD_0)
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[a1] * PQ[b0] * PQ[b1] * QD_1)
                        + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PQ[a1] * PQ[b0] * QC_0 * QD_1)
                        + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b0] * QC_1 * QD_0)
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * QC_1 * QD_1)
                        + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PQ[a1] * PQ[b0] * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PQ[a1] * PQ[b0] * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * QD_0 * QD_1)
                        + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PQ[a1] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PQ[a1] * PQ[b1] * QC_0 * QD_1)
                        + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PQ[a1] * PQ[b1] * QC_1 * QD_0)
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PQ[a1] * PQ[b1] * QC_1 * QD_1)
                        + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PQ[a1] * PQ[b1] * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PQ[a1] * PQ[b1] * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QC_1 * QD_0 + PQ[a1] * PQ[c1] * QC_0 * QD_0 + PQ[a1] * PQ[d0] * QC_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QC_1 * QD_1 + PQ[a1] * PQ[c1] * QC_0 * QD_1 + PQ[a1] * PQ[d1] * QC_0 * QC_1)
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QC_0 * QD_1 + PQ[a1] * PQ[d1] * QC_0 * QD_0)
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[d0] * QC_1 * QD_1 + PQ[a1] * PQ[d1] * QC_1 * QD_0)
                        + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + (delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + (delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QC_1 * QD_0 + PQ[b0] * PQ[c1] * QC_0 * QD_0 + PQ[b0] * PQ[d0] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QC_1 * QD_1 + PQ[b0] * PQ[c1] * QC_0 * QD_1 + PQ[b0] * PQ[d1] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[d0] * QC_1 * QD_1 + PQ[b0] * PQ[d1] * QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QC_1 * QD_0 + PQ[b1] * PQ[c1] * QC_0 * QD_0 + PQ[b1] * PQ[d0] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QC_1 * QD_1 + PQ[b1] * PQ[c1] * QC_0 * QD_1 + PQ[b1] * PQ[d1] * QC_0 * QC_1)
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[b1] * PQ[d0] * QC_1 * QD_1 + PQ[b1] * PQ[d1] * QC_1 * QD_0)
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0)
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1)
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0)
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1)
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 + PQ[a0] * PQ[a1] * QC_0 * QC_1)
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[a1] * QC_0 * QC_1)
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0)
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1)
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PQ[a0] * PQ[b0] * QC_0 * QC_1)
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PQ[a0] * PQ[b0] * QC_0 * QC_1)
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PQ[a0] * PQ[b1] * QC_0 * QC_1)
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PQ[a0] * PQ[b1] * QC_0 * QC_1)
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0)
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1)
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PQ[a1] * PQ[b0] * QC_0 * QC_1)
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[a1] * PQ[b0] * QC_0 * QC_1)
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PQ[a1] * PQ[b1] * QC_0 * QC_1)
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[a1] * PQ[b1] * QC_0 * QC_1)
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        )

                    + F8_t[4] * 0.5 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[c1][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[c1][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[c0][d1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[c0][d0] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[c0][c1] * (PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b1][c1] * (PA_0 * PA_1 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PA_1 * PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][c1] * (PA_0 * PA_1 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PA_1 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][d1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a1][c1] * (PA_0 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][c0] * (PA_0 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][c1] * (PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][c0] * (PA_1 * PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD18(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[5];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[4] * 0.5 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PA_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PA_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0)
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a1][c1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PB_0 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PB_0 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PB_0 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PB_1 * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PB_1 * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD19(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[5];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[4] * 0.5 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 * (-1.0))
                        + delta[c1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_0 * (-1.0))
                        + delta[c1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_1 * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * QD_0 * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * QD_1 * (-1.0))
                        + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * QD_1 * (-1.0))
                        + delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b1][c1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a1][c1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * (-1.0))
                        + delta[a0][c1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QD_0 * (-1.0))
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * QD_0 * (-1.0))
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 * (-1.0) + PB_1 * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 * (-1.0) + PB_1 * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    + F8_t[4] * 0.5 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QC_1 * QD_1)
                        + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * QD_0 * QD_1)
                        + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * QD_0 * QD_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QC_1 * QD_1)
                        + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * QD_0 * QD_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0)
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_1)
                        + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * QD_0 * QD_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_1)
                        + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0 * QD_1)
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_0 * QD_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD20(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    //__shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        //delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        //delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        //delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[5];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        //const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        //const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        //const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        //const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[4] * S1 * S1 * S1 * S1 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD21(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    //__shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        //delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        //delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        //delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[5];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 4, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[4] * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    + F8_t[4] * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD22(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[6];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[4] * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )

                    + F8_t[4] * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1 * QD_0 * QD_1
                        )

                    + F8_t[4] * 0.0625 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] * delta[b1][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] * delta[b1][d1] + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] * delta[b1][c1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] * delta[c1][d0] + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] * delta[b1][d0] + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] * delta[b1][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] * delta[c0][d0] + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] * delta[b1][d1] + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] * delta[b1][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][d0] * delta[a1][c1] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] * delta[b1][c0] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] * delta[c0][c1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] * delta[b1][c1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] * delta[b1][c0] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] * delta[b1][d0] + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] * delta[b1][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d1] * delta[a1][c1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] * delta[b1][c0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1] * delta[c0][c1] + delta[a0][d1] * delta[a1][d0] * delta[b0][c0] * delta[b1][c1] + delta[a0][d1] * delta[a1][d0] * delta[b0][c1] * delta[b1][c0])
                        )

                    + F8_t[5] * (-0.125) * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[b0][b1] * delta[c0][c1] * delta[d0][d1] + delta[b0][b1] * delta[c0][d0] * delta[c1][d1] + delta[b0][b1] * delta[c0][d1] * delta[c1][d0] + delta[b0][c0] * delta[b1][c1] * delta[d0][d1] + delta[b0][c0] * delta[b1][d0] * delta[c1][d1] + delta[b0][c0] * delta[b1][d1] * delta[c1][d0] + delta[b0][c1] * delta[b1][c0] * delta[d0][d1] + delta[b0][c1] * delta[b1][d0] * delta[c0][d1] + delta[b0][c1] * delta[b1][d1] * delta[c0][d0] + delta[b0][d0] * delta[b1][c0] * delta[c1][d1] + delta[b0][d0] * delta[b1][c1] * delta[c0][d1] + delta[b0][d0] * delta[b1][d1] * delta[c0][c1] + delta[b0][d1] * delta[b1][c0] * delta[c1][d0] + delta[b0][d1] * delta[b1][c1] * delta[c0][d0] + delta[b0][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[a1])
                        + (delta[a1][b1] * delta[c0][c1] * delta[d0][d1] + delta[a1][b1] * delta[c0][d0] * delta[c1][d1] + delta[a1][b1] * delta[c0][d1] * delta[c1][d0] + delta[a1][c0] * delta[b1][c1] * delta[d0][d1] + delta[a1][c0] * delta[b1][d0] * delta[c1][d1] + delta[a1][c0] * delta[b1][d1] * delta[c1][d0] + delta[a1][c1] * delta[b1][c0] * delta[d0][d1] + delta[a1][c1] * delta[b1][d0] * delta[c0][d1] + delta[a1][c1] * delta[b1][d1] * delta[c0][d0] + delta[a1][d0] * delta[b1][c0] * delta[c1][d1] + delta[a1][d0] * delta[b1][c1] * delta[c0][d1] + delta[a1][d0] * delta[b1][d1] * delta[c0][c1] + delta[a1][d1] * delta[b1][c0] * delta[c1][d0] + delta[a1][d1] * delta[b1][c1] * delta[c0][d0] + delta[a1][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b0])
                        + (delta[a1][b0] * delta[c0][c1] * delta[d0][d1] + delta[a1][b0] * delta[c0][d0] * delta[c1][d1] + delta[a1][b0] * delta[c0][d1] * delta[c1][d0] + delta[a1][c0] * delta[b0][c1] * delta[d0][d1] + delta[a1][c0] * delta[b0][d0] * delta[c1][d1] + delta[a1][c0] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][c0] * delta[d0][d1] + delta[a1][c1] * delta[b0][d0] * delta[c0][d1] + delta[a1][c1] * delta[b0][d1] * delta[c0][d0] + delta[a1][d0] * delta[b0][c0] * delta[c1][d1] + delta[a1][d0] * delta[b0][c1] * delta[c0][d1] + delta[a1][d0] * delta[b0][d1] * delta[c0][c1] + delta[a1][d1] * delta[b0][c0] * delta[c1][d0] + delta[a1][d1] * delta[b0][c1] * delta[c0][d0] + delta[a1][d1] * delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b1])
                        + (delta[a1][b0] * delta[b1][c1] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c1][d1] + delta[a1][b0] * delta[b1][d1] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c1][d1] + delta[a1][b1] * delta[b0][d1] * delta[c1][d0] + delta[a1][c1] * delta[b0][b1] * delta[d0][d1] + delta[a1][c1] * delta[b0][d0] * delta[b1][d1] + delta[a1][c1] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][b1] * delta[c1][d1] + delta[a1][d0] * delta[b0][c1] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c1] + delta[a1][d1] * delta[b0][b1] * delta[c1][d0] + delta[a1][d1] * delta[b0][c1] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c1]) * (PQ[a0] * PQ[c0])
                        + (delta[a1][b0] * delta[b1][c0] * delta[d0][d1] + delta[a1][b0] * delta[b1][d0] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][d0] + delta[a1][b1] * delta[b0][c0] * delta[d0][d1] + delta[a1][b1] * delta[b0][d0] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][d0] + delta[a1][c0] * delta[b0][b1] * delta[d0][d1] + delta[a1][c0] * delta[b0][d0] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][d0] + delta[a1][d0] * delta[b0][b1] * delta[c0][d1] + delta[a1][d0] * delta[b0][c0] * delta[b1][d1] + delta[a1][d0] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][b1] * delta[c0][d0] + delta[a1][d1] * delta[b0][c0] * delta[b1][d0] + delta[a1][d1] * delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[c1])
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d1] + delta[a1][b0] * delta[b1][c1] * delta[c0][d1] + delta[a1][b0] * delta[b1][d1] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d1] + delta[a1][b1] * delta[b0][c1] * delta[c0][d1] + delta[a1][b1] * delta[b0][d1] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d1] + delta[a1][c0] * delta[b0][c1] * delta[b1][d1] + delta[a1][c0] * delta[b0][d1] * delta[b1][c1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d1] + delta[a1][c1] * delta[b0][c0] * delta[b1][d1] + delta[a1][c1] * delta[b0][d1] * delta[b1][c0] + delta[a1][d1] * delta[b0][b1] * delta[c0][c1] + delta[a1][d1] * delta[b0][c0] * delta[b1][c1] + delta[a1][d1] * delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * PQ[d0])
                        + (delta[a1][b0] * delta[b1][c0] * delta[c1][d0] + delta[a1][b0] * delta[b1][c1] * delta[c0][d0] + delta[a1][b0] * delta[b1][d0] * delta[c0][c1] + delta[a1][b1] * delta[b0][c0] * delta[c1][d0] + delta[a1][b1] * delta[b0][c1] * delta[c0][d0] + delta[a1][b1] * delta[b0][d0] * delta[c0][c1] + delta[a1][c0] * delta[b0][b1] * delta[c1][d0] + delta[a1][c0] * delta[b0][c1] * delta[b1][d0] + delta[a1][c0] * delta[b0][d0] * delta[b1][c1] + delta[a1][c1] * delta[b0][b1] * delta[c0][d0] + delta[a1][c1] * delta[b0][c0] * delta[b1][d0] + delta[a1][c1] * delta[b0][d0] * delta[b1][c0] + delta[a1][d0] * delta[b0][b1] * delta[c0][c1] + delta[a1][d0] * delta[b0][c0] * delta[b1][c1] + delta[a1][d0] * delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * PQ[d1])
                        + (delta[a0][b1] * delta[c0][c1] * delta[d0][d1] + delta[a0][b1] * delta[c0][d0] * delta[c1][d1] + delta[a0][b1] * delta[c0][d1] * delta[c1][d0] + delta[a0][c0] * delta[b1][c1] * delta[d0][d1] + delta[a0][c0] * delta[b1][d0] * delta[c1][d1] + delta[a0][c0] * delta[b1][d1] * delta[c1][d0] + delta[a0][c1] * delta[b1][c0] * delta[d0][d1] + delta[a0][c1] * delta[b1][d0] * delta[c0][d1] + delta[a0][c1] * delta[b1][d1] * delta[c0][d0] + delta[a0][d0] * delta[b1][c0] * delta[c1][d1] + delta[a0][d0] * delta[b1][c1] * delta[c0][d1] + delta[a0][d0] * delta[b1][d1] * delta[c0][c1] + delta[a0][d1] * delta[b1][c0] * delta[c1][d0] + delta[a0][d1] * delta[b1][c1] * delta[c0][d0] + delta[a0][d1] * delta[b1][d0] * delta[c0][c1]) * (PQ[a1] * PQ[b0])
                        + (delta[a0][b0] * delta[c0][c1] * delta[d0][d1] + delta[a0][b0] * delta[c0][d0] * delta[c1][d1] + delta[a0][b0] * delta[c0][d1] * delta[c1][d0] + delta[a0][c0] * delta[b0][c1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[c1][d1] + delta[a0][c0] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][c0] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[c0][d1] + delta[a0][c1] * delta[b0][d1] * delta[c0][d0] + delta[a0][d0] * delta[b0][c0] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[c0][d1] + delta[a0][d0] * delta[b0][d1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[c0][d0] + delta[a0][d1] * delta[b0][d0] * delta[c0][c1]) * (PQ[a1] * PQ[b1])
                        + (delta[a0][b0] * delta[b1][c1] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c1][d1] + delta[a0][b0] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c1][d1] + delta[a0][b1] * delta[b0][d1] * delta[c1][d0] + delta[a0][c1] * delta[b0][b1] * delta[d0][d1] + delta[a0][c1] * delta[b0][d0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][b1] * delta[c1][d1] + delta[a0][d0] * delta[b0][c1] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c1] + delta[a0][d1] * delta[b0][b1] * delta[c1][d0] + delta[a0][d1] * delta[b0][c1] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c1]) * (PQ[a1] * PQ[c0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[d0][d1] + delta[a0][b0] * delta[b1][d0] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[b0][c0] * delta[d0][d1] + delta[a0][b1] * delta[b0][d0] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][d0] + delta[a0][c0] * delta[b0][b1] * delta[d0][d1] + delta[a0][c0] * delta[b0][d0] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][d0] + delta[a0][d0] * delta[b0][b1] * delta[c0][d1] + delta[a0][d0] * delta[b0][c0] * delta[b1][d1] + delta[a0][d0] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][b1] * delta[c0][d0] + delta[a0][d1] * delta[b0][c0] * delta[b1][d0] + delta[a0][d1] * delta[b0][d0] * delta[b1][c0]) * (PQ[a1] * PQ[c1])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d1] + delta[a0][b0] * delta[b1][c1] * delta[c0][d1] + delta[a0][b0] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d1] + delta[a0][b1] * delta[b0][c1] * delta[c0][d1] + delta[a0][b1] * delta[b0][d1] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d1] + delta[a0][c0] * delta[b0][c1] * delta[b1][d1] + delta[a0][c0] * delta[b0][d1] * delta[b1][c1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d1] + delta[a0][c1] * delta[b0][c0] * delta[b1][d1] + delta[a0][c1] * delta[b0][d1] * delta[b1][c0] + delta[a0][d1] * delta[b0][b1] * delta[c0][c1] + delta[a0][d1] * delta[b0][c0] * delta[b1][c1] + delta[a0][d1] * delta[b0][c1] * delta[b1][c0]) * (PQ[a1] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][c0] * delta[c1][d0] + delta[a0][b0] * delta[b1][c1] * delta[c0][d0] + delta[a0][b0] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[b0][c0] * delta[c1][d0] + delta[a0][b1] * delta[b0][c1] * delta[c0][d0] + delta[a0][b1] * delta[b0][d0] * delta[c0][c1] + delta[a0][c0] * delta[b0][b1] * delta[c1][d0] + delta[a0][c0] * delta[b0][c1] * delta[b1][d0] + delta[a0][c0] * delta[b0][d0] * delta[b1][c1] + delta[a0][c1] * delta[b0][b1] * delta[c0][d0] + delta[a0][c1] * delta[b0][c0] * delta[b1][d0] + delta[a0][c1] * delta[b0][d0] * delta[b1][c0] + delta[a0][d0] * delta[b0][b1] * delta[c0][c1] + delta[a0][d0] * delta[b0][c0] * delta[b1][c1] + delta[a0][d0] * delta[b0][c1] * delta[b1][c0]) * (PQ[a1] * PQ[d1])
                        + (delta[a0][a1] * delta[c0][c1] * delta[d0][d1] + delta[a0][a1] * delta[c0][d0] * delta[c1][d1] + delta[a0][a1] * delta[c0][d1] * delta[c1][d0] + delta[a0][c0] * delta[a1][c1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[c1][d1] + delta[a0][c0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][c0] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[c0][d1] + delta[a0][c1] * delta[a1][d1] * delta[c0][d0] + delta[a0][d0] * delta[a1][c0] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[c0][d1] + delta[a0][d0] * delta[a1][d1] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[c0][d0] + delta[a0][d1] * delta[a1][d0] * delta[c0][c1]) * (PQ[b0] * PQ[b1])
                        + (delta[a0][a1] * delta[b1][c1] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c1][d1] + delta[a0][a1] * delta[b1][d1] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c1][d1] + delta[a0][b1] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b1] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][b1] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c1] + delta[a0][d1] * delta[a1][b1] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c1]) * (PQ[b0] * PQ[c0])
                        + (delta[a0][a1] * delta[b1][c0] * delta[d0][d1] + delta[a0][a1] * delta[b1][d0] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b1] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][d0] + delta[a0][d0] * delta[a1][b1] * delta[c0][d1] + delta[a0][d0] * delta[a1][c0] * delta[b1][d1] + delta[a0][d0] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[c0][d0] + delta[a0][d1] * delta[a1][c0] * delta[b1][d0] + delta[a0][d1] * delta[a1][d0] * delta[b1][c0]) * (PQ[b0] * PQ[c1])
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d1] + delta[a0][a1] * delta[b1][c1] * delta[c0][d1] + delta[a0][a1] * delta[b1][d1] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[c0][d1] + delta[a0][b1] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d1] + delta[a0][c0] * delta[a1][c1] * delta[b1][d1] + delta[a0][c0] * delta[a1][d1] * delta[b1][c1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d1] + delta[a0][c1] * delta[a1][c0] * delta[b1][d1] + delta[a0][c1] * delta[a1][d1] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[b1][c1] + delta[a0][d1] * delta[a1][c1] * delta[b1][c0]) * (PQ[b0] * PQ[d0])
                        + (delta[a0][a1] * delta[b1][c0] * delta[c1][d0] + delta[a0][a1] * delta[b1][c1] * delta[c0][d0] + delta[a0][a1] * delta[b1][d0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[c0][d0] + delta[a0][b1] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b1] * delta[c1][d0] + delta[a0][c0] * delta[a1][c1] * delta[b1][d0] + delta[a0][c0] * delta[a1][d0] * delta[b1][c1] + delta[a0][c1] * delta[a1][b1] * delta[c0][d0] + delta[a0][c1] * delta[a1][c0] * delta[b1][d0] + delta[a0][c1] * delta[a1][d0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[c0][c1] + delta[a0][d0] * delta[a1][c0] * delta[b1][c1] + delta[a0][d0] * delta[a1][c1] * delta[b1][c0]) * (PQ[b0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c1][d1] + delta[a0][a1] * delta[b0][d1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c1][d1] + delta[a0][b0] * delta[a1][d1] * delta[c1][d0] + delta[a0][c1] * delta[a1][b0] * delta[d0][d1] + delta[a0][c1] * delta[a1][d0] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c1][d1] + delta[a0][d0] * delta[a1][c1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c1] + delta[a0][d1] * delta[a1][b0] * delta[c1][d0] + delta[a0][d1] * delta[a1][c1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c1]) * (PQ[b1] * PQ[c0])
                        + (delta[a0][a1] * delta[b0][c0] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][d0] + delta[a0][c0] * delta[a1][b0] * delta[d0][d1] + delta[a0][c0] * delta[a1][d0] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[c0][d1] + delta[a0][d0] * delta[a1][c0] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][b0] * delta[c0][d0] + delta[a0][d1] * delta[a1][c0] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][c0]) * (PQ[b1] * PQ[c1])
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[c0][d1] + delta[a0][a1] * delta[b0][d1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[c0][d1] + delta[a0][b0] * delta[a1][d1] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d1] + delta[a0][c0] * delta[a1][c1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d1] + delta[a0][c1] * delta[a1][c0] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][c0] + delta[a0][d1] * delta[a1][b0] * delta[c0][c1] + delta[a0][d1] * delta[a1][c0] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][c0]) * (PQ[b1] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][c0] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[c0][d0] + delta[a0][a1] * delta[b0][d0] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[c0][d0] + delta[a0][b0] * delta[a1][d0] * delta[c0][c1] + delta[a0][c0] * delta[a1][b0] * delta[c1][d0] + delta[a0][c0] * delta[a1][c1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[c0][d0] + delta[a0][c1] * delta[a1][c0] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][c0] + delta[a0][d0] * delta[a1][b0] * delta[c0][c1] + delta[a0][d0] * delta[a1][c0] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][c0]) * (PQ[b1] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[d0][d1] + delta[a0][a1] * delta[b0][d0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][d0] + delta[a0][b0] * delta[a1][b1] * delta[d0][d1] + delta[a0][b0] * delta[a1][d0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][d0] + delta[a0][b1] * delta[a1][b0] * delta[d0][d1] + delta[a0][b1] * delta[a1][d0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][d0] + delta[a0][d0] * delta[a1][b0] * delta[b1][d1] + delta[a0][d0] * delta[a1][b1] * delta[b0][d1] + delta[a0][d0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][d0] + delta[a0][d1] * delta[a1][b1] * delta[b0][d0] + delta[a0][d1] * delta[a1][d0] * delta[b0][b1]) * (PQ[c0] * PQ[c1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d1] + delta[a0][a1] * delta[b0][c1] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d1] + delta[a0][b0] * delta[a1][c1] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d1] + delta[a0][b1] * delta[a1][c1] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d1] + delta[a0][c1] * delta[a1][b1] * delta[b0][d1] + delta[a0][c1] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c1] + delta[a0][d1] * delta[a1][b1] * delta[b0][c1] + delta[a0][d1] * delta[a1][c1] * delta[b0][b1]) * (PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c1][d0] + delta[a0][a1] * delta[b0][c1] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c1] + delta[a0][b0] * delta[a1][b1] * delta[c1][d0] + delta[a0][b0] * delta[a1][c1] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c1] + delta[a0][b1] * delta[a1][b0] * delta[c1][d0] + delta[a0][b1] * delta[a1][c1] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c1] + delta[a0][c1] * delta[a1][b0] * delta[b1][d0] + delta[a0][c1] * delta[a1][b1] * delta[b0][d0] + delta[a0][c1] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c1] + delta[a0][d0] * delta[a1][b1] * delta[b0][c1] + delta[a0][d0] * delta[a1][c1] * delta[b0][b1]) * (PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d1] + delta[a0][a1] * delta[b0][c0] * delta[b1][d1] + delta[a0][a1] * delta[b0][d1] * delta[b1][c0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d1] + delta[a0][b0] * delta[a1][c0] * delta[b1][d1] + delta[a0][b0] * delta[a1][d1] * delta[b1][c0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d1] + delta[a0][b1] * delta[a1][c0] * delta[b0][d1] + delta[a0][b1] * delta[a1][d1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d1] + delta[a0][c0] * delta[a1][b1] * delta[b0][d1] + delta[a0][c0] * delta[a1][d1] * delta[b0][b1] + delta[a0][d1] * delta[a1][b0] * delta[b1][c0] + delta[a0][d1] * delta[a1][b1] * delta[b0][c0] + delta[a0][d1] * delta[a1][c0] * delta[b0][b1]) * (PQ[c1] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][d0] + delta[a0][a1] * delta[b0][c0] * delta[b1][d0] + delta[a0][a1] * delta[b0][d0] * delta[b1][c0] + delta[a0][b0] * delta[a1][b1] * delta[c0][d0] + delta[a0][b0] * delta[a1][c0] * delta[b1][d0] + delta[a0][b0] * delta[a1][d0] * delta[b1][c0] + delta[a0][b1] * delta[a1][b0] * delta[c0][d0] + delta[a0][b1] * delta[a1][c0] * delta[b0][d0] + delta[a0][b1] * delta[a1][d0] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][d0] + delta[a0][c0] * delta[a1][b1] * delta[b0][d0] + delta[a0][c0] * delta[a1][d0] * delta[b0][b1] + delta[a0][d0] * delta[a1][b0] * delta[b1][c0] + delta[a0][d0] * delta[a1][b1] * delta[b0][c0] + delta[a0][d0] * delta[a1][c0] * delta[b0][b1]) * (PQ[c1] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] * delta[c0][c1] + delta[a0][a1] * delta[b0][c0] * delta[b1][c1] + delta[a0][a1] * delta[b0][c1] * delta[b1][c0] + delta[a0][b0] * delta[a1][b1] * delta[c0][c1] + delta[a0][b0] * delta[a1][c0] * delta[b1][c1] + delta[a0][b0] * delta[a1][c1] * delta[b1][c0] + delta[a0][b1] * delta[a1][b0] * delta[c0][c1] + delta[a0][b1] * delta[a1][c0] * delta[b0][c1] + delta[a0][b1] * delta[a1][c1] * delta[b0][c0] + delta[a0][c0] * delta[a1][b0] * delta[b1][c1] + delta[a0][c0] * delta[a1][b1] * delta[b0][c1] + delta[a0][c0] * delta[a1][c1] * delta[b0][b1] + delta[a0][c1] * delta[a1][b0] * delta[b1][c0] + delta[a0][c1] * delta[a1][b1] * delta[b0][c0] + delta[a0][c1] * delta[a1][c0] * delta[b0][b1]) * (PQ[d0] * PQ[d1])
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD23(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[6];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[5] * 0.25 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] + PB_0 * PQ[a0] * PQ[a1] * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] + PB_0 * PQ[a0] * PQ[a1] * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[d1])
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[b0] * PQ[c0])
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[b0] * PQ[c1])
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[b1] * PQ[d0] + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[b0] * PQ[d0])
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PA_0 * PQ[b0] * PQ[b1] * PQ[d1] + PB_0 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[b0] * PQ[d1])
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c0] * PQ[c1])
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[c0] * PQ[c1])
                        + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * PQ[d0])
                        + (delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PA_0 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * PQ[d1])
                        + (delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PA_0 * PQ[b0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[c1] * PQ[d0])
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PA_0 * PQ[b0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[c1] * PQ[d0])
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[c1] * PQ[d1])
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PA_0 * PQ[b0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[c1] * PQ[d1])
                        + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * PQ[d1])
                        + (delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PA_0 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[d0] * PQ[d1])
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] + PB_1 * PQ[a1] * PQ[b0] * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PA_1 * PQ[b0] * PQ[b1] * PQ[c1] + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] + PB_1 * PQ[a1] * PQ[b0] * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PA_1 * PQ[b0] * PQ[b1] * PQ[d0] + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] + PB_1 * PQ[a1] * PQ[b0] * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PA_1 * PQ[b0] * PQ[b1] * PQ[d1] + PB_0 * PQ[a1] * PQ[b1] * PQ[d1] + PB_1 * PQ[a1] * PQ[b0] * PQ[d1])
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a1] * PQ[c0] * PQ[c1])
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PA_1 * PQ[b0] * PQ[c0] * PQ[c1] + PB_0 * PQ[a1] * PQ[c0] * PQ[c1])
                        + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a1] * PQ[c0] * PQ[d0])
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PA_1 * PQ[b0] * PQ[c0] * PQ[d0] + PB_0 * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a1] * PQ[c0] * PQ[d1])
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PA_1 * PQ[b0] * PQ[c0] * PQ[d1] + PB_0 * PQ[a1] * PQ[c0] * PQ[d1])
                        + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a1] * PQ[c1] * PQ[d0])
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PA_1 * PQ[b0] * PQ[c1] * PQ[d0] + PB_0 * PQ[a1] * PQ[c1] * PQ[d0])
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a1] * PQ[c1] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PA_1 * PQ[b0] * PQ[c1] * PQ[d1] + PB_0 * PQ[a1] * PQ[c1] * PQ[d1])
                        + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PA_1 * PQ[b0] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1])
                        + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                        + (delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PB_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[b0] * PQ[c0] * PQ[d0])
                        + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                        + (delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PB_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[d1])
                        + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PB_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[b0] * PQ[c1] * PQ[d0])
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * PQ[d1])
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PB_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[b0] * PQ[c1] * PQ[d1])
                        + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PB_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[c1] * PQ[d0] * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] + PB_1 * PQ[a0] * PQ[a1] * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PA_0 * PQ[a1] * PQ[b1] * PQ[c1] + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] + PB_1 * PQ[a0] * PQ[a1] * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PA_0 * PQ[a1] * PQ[b1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b1] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[d1])
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[c0] * PQ[c1])
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[c0] * PQ[c1])
                        + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + (delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PA_0 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[c0] * PQ[d1])
                        + (delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PA_0 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[c1] * PQ[d0])
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PA_0 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[c1] * PQ[d0])
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[c1] * PQ[d1])
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PA_0 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[c1] * PQ[d1])
                        + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        + (delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PA_0 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a1] * PQ[c0] * PQ[c1])
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PA_1 * PQ[b1] * PQ[c0] * PQ[c1] + PB_1 * PQ[a1] * PQ[c0] * PQ[c1])
                        + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[c0] * PQ[d0])
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PA_1 * PQ[b1] * PQ[c0] * PQ[d0] + PB_1 * PQ[a1] * PQ[c0] * PQ[d0])
                        + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a1] * PQ[c0] * PQ[d1])
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PA_1 * PQ[b1] * PQ[c0] * PQ[d1] + PB_1 * PQ[a1] * PQ[c0] * PQ[d1])
                        + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a1] * PQ[c1] * PQ[d0])
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PA_1 * PQ[b1] * PQ[c1] * PQ[d0] + PB_1 * PQ[a1] * PQ[c1] * PQ[d0])
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[a1] * PQ[c1] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PA_1 * PQ[b1] * PQ[c1] * PQ[d1] + PB_1 * PQ[a1] * PQ[c1] * PQ[d1])
                        + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[d0] * PQ[d1])
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PA_1 * PQ[b1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d1])
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * PQ[d1])
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[c1] * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[c1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-2.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1])
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PA_0 * PQ[a1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[c0] * PQ[d0])
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PA_0 * PQ[a1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PA_0 * PQ[a1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[c1] * PQ[d0])
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PA_0 * PQ[a1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[c1] * PQ[d1])
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PA_0 * PQ[a1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[d0] * PQ[d1])
                        )

                    + F8_t[5] * 0.25 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * (-2.0))
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_0 * (-1.0))
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QC_1 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_0 * (-1.0))
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b0] * QD_1 * (-1.0))
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_0 * (-1.0))
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[b1] * QD_1 * (-1.0))
                        + delta[b0][b1] * delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[a1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PQ[a0] * PQ[a1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PQ[a0] * PQ[a1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[b0][b1] * delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QC_1 * (-1.0))
                        + delta[b0][b1] * delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                        + delta[a1][b1] * delta[d0][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                        + delta[a1][b1] * delta[c1][d1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a1][b1] * delta[c1][d0] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PQ[a0] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PQ[a0] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PQ[a0] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][b1] * delta[c0][d1] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                        + delta[a1][b1] * delta[c0][d0] * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a1][b1] * delta[c0][c1] * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a1][b0] * delta[d0][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                        + delta[a1][b0] * delta[c1][d1] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a1][b0] * delta[c1][d0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PQ[a0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PQ[a0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PQ[a0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a1][b0] * delta[c0][d1] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                        + delta[a1][b0] * delta[c0][d0] * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a1][b0] * delta[c0][c1] * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * (-1.0))
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[b1] * QD_1 * (-1.0))
                        + delta[a0][b1] * delta[d0][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c1][d1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c1][d0] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PQ[a1] * PQ[b0] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b1] * delta[c0][d1] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][d0] * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b1] * delta[c0][c1] * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[d1] * QD_0 * (-1.0))
                        + delta[a0][b0] * delta[d0][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d1] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c1][d0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PQ[a1] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][b0] * delta[c0][d1] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][d0] * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][b0] * delta[c0][c1] * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][a1] * delta[d0][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                        + delta[a0][a1] * delta[c1][d1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                        + delta[a0][a1] * delta[c1][d0] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PQ[b0] * PQ[b1] * PQ[c0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * (-1.0))
                        + delta[a0][a1] * delta[c0][d1] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                        + delta[a0][a1] * delta[c0][d0] * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * (-1.0))
                        + (delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * (-1.0))
                        + delta[a0][a1] * delta[c0][c1] * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[d1] * QD_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[c1] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c0] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b1] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b1] * PQ[d0] * PQ[d1] * QC_1 * (-1.0))
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0))
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD24(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[6];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[5] * 0.5 * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[c1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[c1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[c0][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[c0][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[c0][c1] * (PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b1][c1] * (PA_0 * PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][c1] * (PA_0 * PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PA_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a1][d0] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a1][c1] * (PA_0 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][c0] * (PA_0 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PA_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][c1] * (PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][c0] * (PA_1 * PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PB_0 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PA_1 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PB_0 * PB_1 * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    + F8_t[5] * 0.5 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a1][c1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PA_1 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PA_1 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0) + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0) + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_0 * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_0 * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PB_1 * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PB_1 * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD25(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[6];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[5] * (-0.5) * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QC_1)
                        + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_0 * QD_1)
                        + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_0)
                        + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QC_1 * QD_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * QD_0 * QD_1)
                        + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QC_1)
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QC_1 * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QC_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QC_1)
                        + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_0 * QD_0)
                        + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1] * QC_1 * QD_0)
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QC_1 * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QC_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QC_1)
                        + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1] * QC_1 * QD_0)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * QD_0)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1)
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QD_0)
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1 * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1 * QD_0)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0 + PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1)
                        )

                    + F8_t[5] * S1 * S1 * S1 * S1 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_0 * PA_1 * PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_0 * PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_1 * PB_0 * PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD26(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    //__shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        //delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        //delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        //delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[6];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 5, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[5] * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    + F8_t[5] * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD27(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[7];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[5] * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0 * QD_0 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0 * QC_1 * QD_1 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0 * QC_1 * QD_0 * (-1.0)
                        )

                    + F8_t[6] * 0.5 * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * (-1.0))
                        + delta[c1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * (-1.0))
                        + delta[c1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * (-1.0))
                        + delta[c0][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[c0][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[c0][c1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][d1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b1][d0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b1][c1] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b1][c0] * (PA_0 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][d1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[b0][d0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[b0][c1] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][c0] * (PA_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[b0][b1] * (PA_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PA_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a1][d0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a1][c1] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][c0] * (PA_0 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a1][b1] * (PA_0 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PA_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * (-1.0))
                        + delta[a0][d0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * (-1.0))
                        + delta[a0][c1] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][c0] * (PA_1 * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0))
                        + delta[a0][b1] * (PA_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_0 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PA_1 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PB_0 * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PB_1 * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1] * (-1.0) + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    + F8_t[6] * 0.5 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_0)
                        + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_0)
                        + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QC_1)
                        + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QC_1)
                        + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1] * QD_0)
                        + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0)
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0)
                        + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_1)
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 + PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 + PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0)
                        + delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * QC_1 + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * QC_0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD28(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    //__shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        //delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        //delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        //delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[7];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 6, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[6] * S1 * S1 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PA_1 * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_0 * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_0 * PB_1 * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_1 * PB_0 * PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_1 * PB_1 * PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PB_0 * PB_1 * PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    + F8_t[6] * S1 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

__global__ void __launch_bounds__(TILE_SIZE_J)
computeCoulombFockDDDD29(double*         mat_J,
                       const double*   d_prim_info,
                       const int32_t  d_prim_count,
                       const double*   dd_mat_D,
                       const double*   dd_mat_Q_local,
                       const double*   dd_mat_Q,
                       const int32_t* dd_first_inds_local,
                       const int32_t* dd_second_inds_local,
                       const double*   dd_pair_data_local,
                       const int32_t  dd_prim_pair_count_local,
                       const int32_t* dd_first_inds,
                       const int32_t* dd_second_inds,
                       const double*   dd_pair_data,
                       const int32_t  dd_prim_pair_count,
                       const double*   boys_func_table,
                       const double*   boys_func_ft,
                       const double    eri_threshold)
{
    // each thread row scans over [ij|??] and sum up to a primitive J matrix element
    // J. Chem. Theory Comput. 2009, 5, 4, 1004-1015

    __shared__ double   ERIs[TILE_DIM_LARGE + 1];
    __shared__ int32_t d_cart_inds[6][2];
    __shared__ double   delta[3][3];

    __shared__ double a_i, a_j, r_i[3], r_j[3], S_ij_00, S1, inv_S1;
    __shared__ double PA_0, PA_1, PB_0, PB_1;
    __shared__ int32_t i, j, a0, a1, b0, b1;

    const int32_t ij = blockDim.x * blockIdx.x + threadIdx.x;

    if ((threadIdx.y == 0) && (threadIdx.x == 0))
    {

        d_cart_inds[0][0] = 0; d_cart_inds[0][1] = 0;
        d_cart_inds[1][0] = 0; d_cart_inds[1][1] = 1;
        d_cart_inds[2][0] = 0; d_cart_inds[2][1] = 2;
        d_cart_inds[3][0] = 1; d_cart_inds[3][1] = 1;
        d_cart_inds[4][0] = 1; d_cart_inds[4][1] = 2;
        d_cart_inds[5][0] = 2; d_cart_inds[5][1] = 2;

        delta[0][0] = 1.0; delta[0][1] = 0.0; delta[0][2] = 0.0;
        delta[1][0] = 0.0; delta[1][1] = 1.0; delta[1][2] = 0.0;
        delta[2][0] = 0.0; delta[2][1] = 0.0; delta[2][2] = 1.0;

        if (ij < dd_prim_pair_count_local)
        {
            i = rawValue(dd_first_inds_local, ij);
            j = rawValue(dd_second_inds_local, ij);

            a_i = rawValue(d_prim_info, i / 6 + d_prim_count * 0);

            r_i[0] = rawValue(d_prim_info, i / 6 + d_prim_count * 2);
            r_i[1] = rawValue(d_prim_info, i / 6 + d_prim_count * 3);
            r_i[2] = rawValue(d_prim_info, i / 6 + d_prim_count * 4);

            a_j = rawValue(d_prim_info, j / 6 + d_prim_count * 0);

            r_j[0] = rawValue(d_prim_info, j / 6 + d_prim_count * 2);
            r_j[1] = rawValue(d_prim_info, j / 6 + d_prim_count * 3);
            r_j[2] = rawValue(d_prim_info, j / 6 + d_prim_count * 4);

            S1 = a_i + a_j;
            inv_S1 = 1.0 / S1;

            S_ij_00 = rawValue(dd_pair_data_local, ij);

            a0 = d_cart_inds[i % 6][0];
            a1 = d_cart_inds[i % 6][1];
            b0 = d_cart_inds[j % 6][0];
            b1 = d_cart_inds[j % 6][1];

            PA_0 = (a_j  * inv_S1) * (r_j[a0] - r_i[a0]);
            PA_1 = (a_j  * inv_S1) * (r_j[a1] - r_i[a1]);
            PB_0 = (-a_i * inv_S1) * (r_j[b0] - r_i[b0]);
            PB_1 = (-a_i * inv_S1) * (r_j[b1] - r_i[b1]);

        }

    }

    ERIs[threadIdx.y] = 0.0;

    __syncthreads();

    for (int32_t m = 0; m < (dd_prim_pair_count + TILE_DIM_LARGE - 1) / TILE_DIM_LARGE; m++)
    {
        const int32_t kl = m * TILE_DIM_LARGE + threadIdx.y;

        if ((ij >= dd_prim_pair_count_local) || (kl >= dd_prim_pair_count) || (fabs(rawValue(dd_mat_Q_local, ij) * rawValue(dd_mat_Q, kl) * rawValue(dd_mat_D, kl)) <= eri_threshold))
        {
            break;
        }

        const auto k = dd_first_inds[kl];
        const auto l = dd_second_inds[kl];

        const auto a_k = rawValue(d_prim_info, k / 6 + d_prim_count * 0);

        const double r_k[3] = {rawValue(d_prim_info, k / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, k / 6 + d_prim_count * 4)};

        const auto a_l = rawValue(d_prim_info, l / 6 + d_prim_count * 0);

        const double r_l[3] = {rawValue(d_prim_info, l / 6 + d_prim_count * 2),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 3),
                               rawValue(d_prim_info, l / 6 + d_prim_count * 4)};

        const auto S_kl_00 = rawValue(dd_pair_data, kl);

        const auto c0 = d_cart_inds[k % 6][0];
        const auto c1 = d_cart_inds[k % 6][1];
        const auto d0 = d_cart_inds[l % 6][0];
        const auto d1 = d_cart_inds[l % 6][1];

        // J. Chem. Phys. 84, 3963-3974 (1986)

        const auto S2 = a_k + a_l;

        const auto inv_S2 = 1.0 / S2;
        const auto inv_S4 = 1.0 / (S1 + S2);

        const double PQ[3] = {(a_k * r_k[0] + a_l * r_l[0]) * inv_S2 - (a_i * r_i[0] + a_j * r_j[0]) * inv_S1,
                              (a_k * r_k[1] + a_l * r_l[1]) * inv_S2 - (a_i * r_i[1] + a_j * r_j[1]) * inv_S1,
                              (a_k * r_k[2] + a_l * r_l[2]) * inv_S2 - (a_i * r_i[2] + a_j * r_j[2]) * inv_S1};

        const auto r2_PQ = PQ[0] * PQ[0] + PQ[1] * PQ[1] + PQ[2] * PQ[2];

        const auto Lambda = sqrt(4.0 * S1 * S2 * MATH_CONST_INV_PI * inv_S4);

        double F8_t[9];

        gpu::computeBoysFunction(F8_t, S1 * S2 * inv_S4 * r2_PQ, 8, boys_func_table, boys_func_ft);

        const auto QC_0 = (a_l * inv_S2) * (r_l[c0] - r_k[c0]);
        const auto QC_1 = (a_l * inv_S2) * (r_l[c1] - r_k[c1]);
        const auto QD_0 = (-a_k * inv_S2) * (r_l[d0] - r_k[d0]);
        const auto QD_1 = (-a_k * inv_S2) * (r_l[d1] - r_k[d1]);

        const double eri_ijkl = Lambda * S_ij_00 * S_kl_00 * (

                    + F8_t[6] * S1 * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * QD_0 * QD_1
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * QC_1 * QD_1
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1] * QC_1 * QD_0
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * QC_0 * QD_1
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1] * QC_0 * QD_0
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1] * QC_0 * QC_1
                        )

                    + F8_t[6] * 0.25 * S1 * S1 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        (delta[c0][c1] * delta[d0][d1] + delta[c0][d0] * delta[c1][d1] + delta[c0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1])
                        + (delta[b1][c1] * delta[d0][d1] + delta[b1][d0] * delta[c1][d1] + delta[b1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0])
                        + (delta[b1][c0] * delta[d0][d1] + delta[b1][d0] * delta[c0][d1] + delta[b1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1])
                        + (delta[b1][c0] * delta[c1][d1] + delta[b1][c1] * delta[c0][d1] + delta[b1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d0])
                        + (delta[b1][c0] * delta[c1][d0] + delta[b1][c1] * delta[c0][d0] + delta[b1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[d1])
                        + (delta[b0][c1] * delta[d0][d1] + delta[b0][d0] * delta[c1][d1] + delta[b0][d1] * delta[c1][d0]) * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0])
                        + (delta[b0][c0] * delta[d0][d1] + delta[b0][d0] * delta[c0][d1] + delta[b0][d1] * delta[c0][d0]) * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1])
                        + (delta[b0][c0] * delta[c1][d1] + delta[b0][c1] * delta[c0][d1] + delta[b0][d1] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d0])
                        + (delta[b0][c0] * delta[c1][d0] + delta[b0][c1] * delta[c0][d0] + delta[b0][d0] * delta[c0][c1]) * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[d1])
                        + (delta[b0][b1] * delta[d0][d1] + delta[b0][d0] * delta[b1][d1] + delta[b0][d1] * delta[b1][d0]) * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1])
                        + (delta[b0][b1] * delta[c1][d1] + delta[b0][c1] * delta[b1][d1] + delta[b0][d1] * delta[b1][c1]) * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d0])
                        + (delta[b0][b1] * delta[c1][d0] + delta[b0][c1] * delta[b1][d0] + delta[b0][d0] * delta[b1][c1]) * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[d1])
                        + (delta[b0][b1] * delta[c0][d1] + delta[b0][c0] * delta[b1][d1] + delta[b0][d1] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d0])
                        + (delta[b0][b1] * delta[c0][d0] + delta[b0][c0] * delta[b1][d0] + delta[b0][d0] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * PQ[c1] * PQ[d1])
                        + (delta[b0][b1] * delta[c0][c1] + delta[b0][c0] * delta[b1][c1] + delta[b0][c1] * delta[b1][c0]) * (PQ[a0] * PQ[a1] * PQ[d0] * PQ[d1])
                        + (delta[a1][c1] * delta[d0][d1] + delta[a1][d0] * delta[c1][d1] + delta[a1][d1] * delta[c1][d0]) * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0])
                        + (delta[a1][c0] * delta[d0][d1] + delta[a1][d0] * delta[c0][d1] + delta[a1][d1] * delta[c0][d0]) * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1])
                        + (delta[a1][c0] * delta[c1][d1] + delta[a1][c1] * delta[c0][d1] + delta[a1][d1] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d0])
                        + (delta[a1][c0] * delta[c1][d0] + delta[a1][c1] * delta[c0][d0] + delta[a1][d0] * delta[c0][c1]) * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[d1])
                        + (delta[a1][b1] * delta[d0][d1] + delta[a1][d0] * delta[b1][d1] + delta[a1][d1] * delta[b1][d0]) * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1])
                        + (delta[a1][b1] * delta[c1][d1] + delta[a1][c1] * delta[b1][d1] + delta[a1][d1] * delta[b1][c1]) * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d0])
                        + (delta[a1][b1] * delta[c1][d0] + delta[a1][c1] * delta[b1][d0] + delta[a1][d0] * delta[b1][c1]) * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[d1])
                        + (delta[a1][b1] * delta[c0][d1] + delta[a1][c0] * delta[b1][d1] + delta[a1][d1] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d0])
                        + (delta[a1][b1] * delta[c0][d0] + delta[a1][c0] * delta[b1][d0] + delta[a1][d0] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * PQ[c1] * PQ[d1])
                        + (delta[a1][b1] * delta[c0][c1] + delta[a1][c0] * delta[b1][c1] + delta[a1][c1] * delta[b1][c0]) * (PQ[a0] * PQ[b0] * PQ[d0] * PQ[d1])
                        + (delta[a1][b0] * delta[d0][d1] + delta[a1][d0] * delta[b0][d1] + delta[a1][d1] * delta[b0][d0]) * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1])
                        + (delta[a1][b0] * delta[c1][d1] + delta[a1][c1] * delta[b0][d1] + delta[a1][d1] * delta[b0][c1]) * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + (delta[a1][b0] * delta[c1][d0] + delta[a1][c1] * delta[b0][d0] + delta[a1][d0] * delta[b0][c1]) * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + (delta[a1][b0] * delta[c0][d1] + delta[a1][c0] * delta[b0][d1] + delta[a1][d1] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d0])
                        + (delta[a1][b0] * delta[c0][d0] + delta[a1][c0] * delta[b0][d0] + delta[a1][d0] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * PQ[c1] * PQ[d1])
                        + (delta[a1][b0] * delta[c0][c1] + delta[a1][c0] * delta[b0][c1] + delta[a1][c1] * delta[b0][c0]) * (PQ[a0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][d1] + delta[a1][b1] * delta[b0][d1] + delta[a1][d1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a1][b0] * delta[b1][d0] + delta[a1][b1] * delta[b0][d0] + delta[a1][d0] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][c1] + delta[a1][b1] * delta[b0][c1] + delta[a1][c1] * delta[b0][b1]) * (PQ[a0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a1][b0] * delta[b1][c0] + delta[a1][b1] * delta[b0][c0] + delta[a1][c0] * delta[b0][b1]) * (PQ[a0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + (delta[a0][c1] * delta[d0][d1] + delta[a0][d0] * delta[c1][d1] + delta[a0][d1] * delta[c1][d0]) * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0])
                        + (delta[a0][c0] * delta[d0][d1] + delta[a0][d0] * delta[c0][d1] + delta[a0][d1] * delta[c0][d0]) * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1])
                        + (delta[a0][c0] * delta[c1][d1] + delta[a0][c1] * delta[c0][d1] + delta[a0][d1] * delta[c0][c1]) * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0])
                        + (delta[a0][c0] * delta[c1][d0] + delta[a0][c1] * delta[c0][d0] + delta[a0][d0] * delta[c0][c1]) * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[d1])
                        + (delta[a0][b1] * delta[d0][d1] + delta[a0][d0] * delta[b1][d1] + delta[a0][d1] * delta[b1][d0]) * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1])
                        + (delta[a0][b1] * delta[c1][d1] + delta[a0][c1] * delta[b1][d1] + delta[a0][d1] * delta[b1][c1]) * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0])
                        + (delta[a0][b1] * delta[c1][d0] + delta[a0][c1] * delta[b1][d0] + delta[a0][d0] * delta[b1][c1]) * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[d1])
                        + (delta[a0][b1] * delta[c0][d1] + delta[a0][c0] * delta[b1][d1] + delta[a0][d1] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0])
                        + (delta[a0][b1] * delta[c0][d0] + delta[a0][c0] * delta[b1][d0] + delta[a0][d0] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * PQ[c1] * PQ[d1])
                        + (delta[a0][b1] * delta[c0][c1] + delta[a0][c0] * delta[b1][c1] + delta[a0][c1] * delta[b1][c0]) * (PQ[a1] * PQ[b0] * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[d0][d1] + delta[a0][d0] * delta[b0][d1] + delta[a0][d1] * delta[b0][d0]) * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1])
                        + (delta[a0][b0] * delta[c1][d1] + delta[a0][c1] * delta[b0][d1] + delta[a0][d1] * delta[b0][c1]) * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0])
                        + (delta[a0][b0] * delta[c1][d0] + delta[a0][c1] * delta[b0][d0] + delta[a0][d0] * delta[b0][c1]) * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[d1])
                        + (delta[a0][b0] * delta[c0][d1] + delta[a0][c0] * delta[b0][d1] + delta[a0][d1] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0])
                        + (delta[a0][b0] * delta[c0][d0] + delta[a0][c0] * delta[b0][d0] + delta[a0][d0] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * PQ[c1] * PQ[d1])
                        + (delta[a0][b0] * delta[c0][c1] + delta[a0][c0] * delta[b0][c1] + delta[a0][c1] * delta[b0][c0]) * (PQ[a1] * PQ[b1] * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][d1] + delta[a0][b1] * delta[b0][d1] + delta[a0][d1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a0][b0] * delta[b1][d0] + delta[a0][b1] * delta[b0][d0] + delta[a0][d0] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c1] + delta[a0][b1] * delta[b0][c1] + delta[a0][c1] * delta[b0][b1]) * (PQ[a1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a0][b0] * delta[b1][c0] + delta[a0][b1] * delta[b0][c0] + delta[a0][c0] * delta[b0][b1]) * (PQ[a1] * PQ[c1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[d0][d1] + delta[a0][d0] * delta[a1][d1] + delta[a0][d1] * delta[a1][d0]) * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                        + (delta[a0][a1] * delta[c1][d1] + delta[a0][c1] * delta[a1][d1] + delta[a0][d1] * delta[a1][c1]) * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + (delta[a0][a1] * delta[c1][d0] + delta[a0][c1] * delta[a1][d0] + delta[a0][d0] * delta[a1][c1]) * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + (delta[a0][a1] * delta[c0][d1] + delta[a0][c0] * delta[a1][d1] + delta[a0][d1] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                        + (delta[a0][a1] * delta[c0][d0] + delta[a0][c0] * delta[a1][d0] + delta[a0][d0] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                        + (delta[a0][a1] * delta[c0][c1] + delta[a0][c0] * delta[a1][c1] + delta[a0][c1] * delta[a1][c0]) * (PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][d1] + delta[a0][b1] * delta[a1][d1] + delta[a0][d1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a0][a1] * delta[b1][d0] + delta[a0][b1] * delta[a1][d0] + delta[a0][d0] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][c1] + delta[a0][b1] * delta[a1][c1] + delta[a0][c1] * delta[a1][b1]) * (PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b1][c0] + delta[a0][b1] * delta[a1][c0] + delta[a0][c0] * delta[a1][b1]) * (PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][d1] + delta[a0][b0] * delta[a1][d1] + delta[a0][d1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                        + (delta[a0][a1] * delta[b0][d0] + delta[a0][b0] * delta[a1][d0] + delta[a0][d0] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c1] + delta[a0][b0] * delta[a1][c1] + delta[a0][c1] * delta[a1][b0]) * (PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][c0] + delta[a0][b0] * delta[a1][c0] + delta[a0][c0] * delta[a1][b0]) * (PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                        + (delta[a0][a1] * delta[b0][b1] + delta[a0][b0] * delta[a1][b1] + delta[a0][b1] * delta[a1][b0]) * (PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    + F8_t[7] * (-0.5) * S1 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        delta[d0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1])
                        + delta[c1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0])
                        + delta[c1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d1])
                        + delta[c0][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0])
                        + delta[c0][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d1])
                        + delta[c0][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[d0] * PQ[d1])
                        + delta[b1][d1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[b1][d0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[b1][c1] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b1][c0] * (PQ[a0] * PQ[a1] * PQ[b0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][d1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[b0][d0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[b0][c1] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[b0][c0] * (PQ[a0] * PQ[a1] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[b0][b1] * (PQ[a0] * PQ[a1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a1][d1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[a1][d0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[a1][c1] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a1][c0] * (PQ[a0] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a1][b1] * (PQ[a0] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a1][b0] * (PQ[a0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][d1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0])
                        + delta[a0][d0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1])
                        + delta[a0][c1] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1])
                        + delta[a0][c0] * (PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b1] * (PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][b0] * (PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        + delta[a0][a1] * (PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1])
                        )

                    + F8_t[7] * S1 * S1 * S1 * S1 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PA_0 * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PA_1 * PQ[a0] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PB_0 * PQ[a0] * PQ[a1] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        + PB_1 * PQ[a0] * PQ[a1] * PQ[b0] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )

                    + F8_t[7] * S1 * S1 * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * QD_1 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d1] * QD_0 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[d0] * PQ[d1] * QC_1 * (-1.0)
                        + PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c1] * PQ[d0] * PQ[d1] * QC_0 * (-1.0)
                        )

                    + F8_t[8] * S1 * S1 * S1 * S1 * S2 * S2 * S2 * S2 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * inv_S4 * (
                        PQ[a0] * PQ[a1] * PQ[b0] * PQ[b1] * PQ[c0] * PQ[c1] * PQ[d0] * PQ[d1]
                        )


                );

        // NOTE: doubling for off-diagonal elements of D due to k<=>l symmetry
        //       (static_cast<double>(k != l) + 1.0) == (k == l ? 1.0 : 2.0)
        ERIs[threadIdx.y] += eri_ijkl * rawValue(dd_mat_D, kl) * (static_cast<double>(k != l) + 1.0);
    }

    __syncthreads();

    if ((threadIdx.y == 0) && (ij < dd_prim_pair_count_local))
    {
        double J_ij = 0.0;

        for (int32_t n = 0; n < TILE_DIM_LARGE; n++)
        {
            J_ij += ERIs[n];
        }

        mat_J[ij] += J_ij;
    }
}

}  // namespace gpu
