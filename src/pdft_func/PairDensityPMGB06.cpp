//
//                           VELOXCHEM 1.0-RC2
//         ----------------------------------------------------
//                     An Electronic Structure Code
//
//  Copyright Â© 2018-2021 by VeloxChem developers. All rights reserved.
//  Contact: https://veloxchem.org/contact
//
//  SPDX-License-Identifier: LGPL-3.0-or-later
//
//  This file is part of VeloxChem.
//
//  VeloxChem is free software: you can redistribute it and/or modify it under
//  the terms of the GNU Lesser General Public License as published by the Free
//  Software Foundation, either version 3 of the License, or (at your option)
//  any later version.
//
//  VeloxChem is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
//  License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with VeloxChem. If not, see <https://www.gnu.org/licenses/>.

#include "PairDensityPMGB06.hpp"

#include <algorithm>
#include <cmath>
#include <iostream>

#include "MathConst.hpp"

namespace pdftpmgb06 {  // pdftpmgb06 namespace

void
compute_exc_vxc(const int32_t np, const double* rho, double* exc, double* vrho, const double mu)
{

   // Subroutine generated by xc_write in MultiPsi, copyright M.G. Delcey, 2024

   double fz20 = 1.709921;

   double rsfact = 0.90856029641606983*pow(M_PI, -0.33333333333333331);

   double fpol = 1.0/(-2 + 2*cbrt(2));

   double mu2 = pow(mu, 2);

   double mu3 = mu*mu2;

   double mu4 = pow(mu2, 2);

   double mu5 = mu*mu4;

   double mu6 = mu2*mu4;

   double mu8 = pow(mu4, 2);

   double alpha = (1.0/3.0)*pow(2, 2.0/3.0)*cbrt(3)/cbrt(M_PI);

   double g0_aHD = -0.20000000000000001*alpha*(-3.0 + 6.0*M_LN2 + pow(M_PI, 2))/M_PI;

   double g2_cst = (2.0/5.0)*pow(2, 2.0/3.0)/pow(alpha, 2);

   double qb = -3*M_PI*alpha/(-4 + 4*M_LN2) + 3.4485100000000002;

   for (int32_t g = 0; g < np; g++)
   {
      double density = rho[2 * g + 0];

      if (density < 1.0e-16)
      {
         exc[g] = 0.0;

         vrho[2 * g + 0] = 0.0;
         vrho[2 * g + 1] = 0.0;

         continue;
      }

      double pair_density = rho[2 * g + 1];

      double zeta2 = -2*pair_density/pow(density, 2);

      double dzeta2_drho = 4*pair_density/pow(density, 3);

      double dzeta2_dpi = -2/pow(density, 2);

      double zeta4 = pow(zeta2, 2);

      double dzeta4_dzeta2 = 2*zeta2;

      double dzeta4_drho = dzeta2_drho*dzeta4_dzeta2;

      double dzeta4_dpi = dzeta2_dpi*dzeta4_dzeta2;

      double rs = rsfact/cbrt(density);

      double drs_drho = -1.0/3.0*rsfact/pow(density, 4.0/3.0);

      double gaux = 1.6382000000000001*pow(rs, 3.0/2.0) + 7.5956999999999999*sqrt(rs) + 0.49293999999999999*pow(rs, 2) + 3.5876000000000001*rs;

      double dgaux_drho = drs_drho*(2.4573*sqrt(rs) + 0.98587999999999998*rs + 3.5876000000000001 + 3.7978499999999999/sqrt(rs));

      double pw_g = -0.062182000000000001*(0.2137*rs + 1)*log(1 + 16.081824322151103/gaux);

      double dpw_g_drho = 0.99999999999999989*dgaux_drho*(0.2137*rs + 1)/(pow(gaux, 2)*(1 + 16.081824322151103/gaux)) - 0.0132882934*drs_drho*log(1 + 16.081824322151103/gaux);

      double g1 = pw_g;

      double dg1_drho = dpw_g_drho;

      double gaux_2 = 3.3662000000000001*pow(rs, 3.0/2.0) + 14.1189*sqrt(rs) + 0.62517*pow(rs, 2) + 6.1977000000000002*rs;

      double dgaux_2_drho = drs_drho*(5.0493000000000006*sqrt(rs) + 1.25034*rs + 6.1977000000000002 + 7.05945/sqrt(rs));

      double pw_g_2 = -0.03109*(0.20548*rs + 1)*log(1 + 32.1646831778707/gaux_2);

      double dpw_g_2_drho = 1.0*dgaux_2_drho*(0.20548*rs + 1)/(pow(gaux_2, 2)*(1 + 32.1646831778707/gaux_2)) - 0.0063883732000000002*drs_drho*log(1 + 32.1646831778707/gaux_2);

      double g2 = pw_g_2;

      double dg2_drho = dpw_g_2_drho;

      double gaux_3 = 0.88026000000000004*pow(rs, 3.0/2.0) + 10.356999999999999*sqrt(rs) + 0.49670999999999998*pow(rs, 2) + 3.6231*rs;

      double dgaux_3_drho = drs_drho*(1.3203900000000002*sqrt(rs) + 0.99341999999999997*rs + 3.6231 + 5.1784999999999997/sqrt(rs));

      double pw_g_3 = -0.033773999999999998*(0.11125*rs + 1)*log(1 + 29.608574643216677/gaux_3);

      double dpw_g_3_drho = 1.0*dgaux_3_drho*(0.11125*rs + 1)/(pow(gaux_3, 2)*(1 + 29.608574643216677/gaux_3)) - 0.0037573575*drs_drho*log(1 + 29.608574643216677/gaux_3);

      double g3 = pw_g_3;

      double dg3_drho = dpw_g_3_drho;

      double dfzeta_dpi = 0;

      double fzeta = 0;

      double dfzeta_drho = 0;

      if (pair_density < -9.9999999999999998e-17)
      {
         double zeta = M_SQRT2*sqrt(-pair_density)/density;

         double dzeta_drho = -M_SQRT2*sqrt(-pair_density)/pow(density, 2);

         double dzeta_dpi = (1.0/2.0)*M_SQRT2*sqrt(-pair_density)/(density*pair_density);

         double dfzeta_dzeta = 0.0;

         if (1.0 - zeta > 1.0e-16)
         {
             fzeta = pow(1.0 - zeta, 4.0/3.0) + pow(zeta + 1.0, 4.0/3.0);

             dfzeta_dzeta = -4.0/3.0*cbrt(1.0 - zeta) + (4.0/3.0)*cbrt(zeta + 1.0);
         }
         else
         {
             fzeta = pow(zeta + 1.0, 4.0/3.0);

             dfzeta_dzeta = (4.0/3.0)*cbrt(zeta + 1.0);
         }

         dfzeta_drho = dfzeta_dzeta*dzeta_drho;

         dfzeta_dpi = dfzeta_dzeta*dzeta_dpi;

      }
      else if (pair_density < 9.9999999999999998e-17)
      {
         fzeta = (10.0/243.0)*pow(zeta2, 2) + (4.0/9.0)*zeta2 + 2.0;

         double dfzeta_dzeta2 = (20.0/243.0)*zeta2 + 4.0/9.0;

         dfzeta_drho = dfzeta_dzeta2*dzeta2_drho;

         dfzeta_dpi = dfzeta_dzeta2*dzeta2_dpi;

      }
      else
      {
         double eta = M_SQRT2*sqrt(pair_density)/density;

         double deta_drho = -M_SQRT2*sqrt(pair_density)/pow(density, 2);

         double deta_dpi = (1.0/2.0)*M_SQRT2/(density*sqrt(pair_density));

         double theta = (4.0/3.0)*atan(eta);

         double dtheta_deta = (4.0/3.0)/(pow(eta, 2) + 1);

         double dtheta_drho = deta_drho*dtheta_deta;

         double dtheta_dpi = deta_dpi*dtheta_deta;

         fzeta = 2.0*pow(pow(eta, 2) + 1, 2.0/3.0)*cos(theta);

         double dfzeta_deta = 2.6666666666666665*eta*cos(theta)/cbrt(pow(eta, 2) + 1);

         double dfzeta_dtheta = -2.0*pow(pow(eta, 2) + 1, 2.0/3.0)*sin(theta);

         dfzeta_drho = deta_drho*dfzeta_deta + dfzeta_dtheta*dtheta_drho;

         dfzeta_dpi = deta_dpi*dfzeta_deta + dfzeta_dtheta*dtheta_dpi;

      }
      double epw92 = fpol*zeta4*(fzeta - 2)*(-g1 + g2 + g3/fz20) - fpol*g3*(fzeta - 2)/fz20 + g1;

      double depw92_dzeta4 = fpol*(fzeta - 2)*(-g1 + g2 + g3/fz20);

      double depw92_dfzeta = fpol*zeta4*(-g1 + g2 + g3/fz20) - fpol*g3/fz20;

      double depw92_drho = depw92_dfzeta*dfzeta_drho + depw92_dzeta4*dzeta4_drho + dg1_drho*(-fpol*zeta4*(fzeta - 2) + 1) + dg2_drho*fpol*zeta4*(fzeta - 2) + dg3_drho*(fpol*zeta4*(fzeta - 2)/fz20 - fpol*(fzeta - 2)/fz20);

      double depw92_dpi = depw92_dfzeta*dfzeta_dpi + depw92_dzeta4*dzeta4_dpi;

      double ec = epw92;

      double dec_depw92 = 1;

      double dec_drho = dec_depw92*depw92_drho;

      double dec_dpi = dec_depw92*depw92_dpi;

      double b0 = 0.78494900000000001*rs;

      double db0_drho = 0.78494900000000001*drs_drho;

      double b02 = pow(b0, 2);

      double db02_drho = 2*b0*db0_drho;

      double b04 = pow(b02, 2);

      double db04_drho = 2*b02*db02_drho;

      double b06 = b02*b04;

      double db06_drho = b02*db04_drho + b04*db02_drho;

      double b08 = pow(b04, 2);

      double db08_drho = 2*b04*db04_drho;

      double rs2 = pow(rs, 2);

      double drs2_drho = 2*drs_drho*rs;

      double rs3 = rs*rs2;

      double drs3_drho = drs2_drho*rs + drs_drho*rs2;

      double rs4 = pow(rs2, 2);

      double drs4_drho = 2*drs2_drho*rs2;

      double d2 = (-0.38800000000000001*rs + 0.67600000000000005*rs2)*exp(-0.54700000000000004*rs)/rs2;

      double dd2_drho = drs2_drho*(0.67600000000000005*exp(-0.54700000000000004*rs)/rs2 - (-0.38800000000000001*rs + 0.67600000000000005*rs2)*exp(-0.54700000000000004*rs)/pow(rs2, 2)) + drs_drho*(-0.54700000000000004*(-0.38800000000000001*rs + 0.67600000000000005*rs2)*exp(-0.54700000000000004*rs)/rs2 - 0.38800000000000001*exp(-0.54700000000000004*rs)/rs2);

      double d3 = (-4.9500000000000002*rs + rs2)*exp(-0.31*rs)/rs3;

      double dd3_drho = drs2_drho*exp(-0.31*rs)/rs3 - drs3_drho*(-4.9500000000000002*rs + rs2)*exp(-0.31*rs)/pow(rs3, 2) + drs_drho*(-0.31*(-4.9500000000000002*rs + rs2)*exp(-0.31*rs)/rs3 - 4.9500000000000002*exp(-0.31*rs)/rs3);

      double dfzeta_2_dpi = 0;

      double fzeta_2 = 0;

      double dfzeta_2_drho = 0;

      if (pair_density < -9.9999999999999998e-17)
      {
         double zeta = M_SQRT2*sqrt(-pair_density)/density;

         double dzeta_drho = -M_SQRT2*sqrt(-pair_density)/pow(density, 2);

         double dzeta_dpi = (1.0/2.0)*M_SQRT2*sqrt(-pair_density)/(density*pair_density);

         double dfzeta_2_dzeta = 0.0;

         if (1.0 - zeta > 1.0e-16)
         {
             fzeta_2 = pow(1.0 - zeta, 2.0/3.0) + pow(zeta + 1.0, 2.0/3.0);

             dfzeta_2_dzeta = (2.0/3.0)/cbrt(zeta + 1.0) - (2.0/3.0)/cbrt(1.0 - zeta);
         }
         else
         {
             fzeta_2 = pow(zeta + 1.0, 2.0/3.0);

             dfzeta_2_dzeta = (2.0/3.0)/cbrt(zeta + 1.0);
         }

         dfzeta_2_drho = dfzeta_2_dzeta*dzeta_drho;

         dfzeta_2_dpi = dfzeta_2_dzeta*dzeta_dpi;

      }
      else if (pair_density < 9.9999999999999998e-17)
      {
         fzeta_2 = -14.0/243.0*pow(zeta2, 2) - 2.0/9.0*zeta2 + 2.0;

         double dfzeta_2_dzeta2 = -28.0/243.0*zeta2 - 2.0/9.0;

         dfzeta_2_drho = dfzeta_2_dzeta2*dzeta2_drho;

         dfzeta_2_dpi = dfzeta_2_dzeta2*dzeta2_dpi;

      }
      else
      {
         double eta = M_SQRT2*sqrt(pair_density)/density;

         double deta_drho = -M_SQRT2*sqrt(pair_density)/pow(density, 2);

         double deta_dpi = (1.0/2.0)*M_SQRT2/(density*sqrt(pair_density));

         double theta = (2.0/3.0)*atan(eta);

         double dtheta_deta = (2.0/3.0)/(pow(eta, 2) + 1);

         double dtheta_drho = deta_drho*dtheta_deta;

         double dtheta_dpi = deta_dpi*dtheta_deta;

         fzeta_2 = 2.0*cbrt(pow(eta, 2) + 1)*cos(theta);

         double dfzeta_2_deta = 1.3333333333333333*eta*cos(theta)/pow(pow(eta, 2) + 1, 2.0/3.0);

         double dfzeta_2_dtheta = -2.0*cbrt(pow(eta, 2) + 1)*sin(theta);

         dfzeta_2_drho = deta_drho*dfzeta_2_deta + dfzeta_2_dtheta*dtheta_drho;

         dfzeta_2_dpi = deta_dpi*dfzeta_2_deta + dfzeta_2_dtheta*dtheta_dpi;

      }
      double phi2 = 0.5*fzeta_2;

      double dphi2_dfzeta_2 = 0.5;

      double dphi2_drho = dfzeta_2_drho*dphi2_dfzeta_2;

      double dphi2_dpi = dfzeta_2_dpi*dphi2_dfzeta_2;

      double fzeta_3 = 0;

      double dfzeta_3_dpi = 0;

      double dfzeta_3_drho = 0;

      if (pair_density < -9.9999999999999998e-17)
      {
         double zeta = M_SQRT2*sqrt(-pair_density)/density;

         double dzeta_drho = -M_SQRT2*sqrt(-pair_density)/pow(density, 2);

         double dzeta_dpi = (1.0/2.0)*M_SQRT2*sqrt(-pair_density)/(density*pair_density);

         double dfzeta_3_dzeta = 0.0;

         if (1.0 - zeta > 1.0e-16)
         {
             fzeta_3 = pow(1.0 - zeta, 8.0/3.0) + pow(zeta + 1.0, 8.0/3.0);

             dfzeta_3_dzeta = -8.0/3.0*pow(1.0 - zeta, 5.0/3.0) + (8.0/3.0)*pow(zeta + 1.0, 5.0/3.0);
         }
         else
         {
             fzeta_3 = pow(zeta + 1.0, 8.0/3.0);

             dfzeta_3_dzeta = (8.0/3.0)*pow(zeta + 1.0, 5.0/3.0);
         }

         dfzeta_3_drho = dfzeta_3_dzeta*dzeta_drho;

         dfzeta_3_dpi = dfzeta_3_dzeta*dzeta_dpi;

      }
      else if (pair_density < 9.9999999999999998e-17)
      {
         fzeta_3 = -20.0/243.0*pow(zeta2, 2) + (40.0/9.0)*zeta2 + 2.0;

         double dfzeta_3_dzeta2 = 40.0/9.0 - 40.0/243.0*zeta2;

         dfzeta_3_drho = dfzeta_3_dzeta2*dzeta2_drho;

         dfzeta_3_dpi = dfzeta_3_dzeta2*dzeta2_dpi;

      }
      else
      {
         double eta = M_SQRT2*sqrt(pair_density)/density;

         double deta_drho = -M_SQRT2*sqrt(pair_density)/pow(density, 2);

         double deta_dpi = (1.0/2.0)*M_SQRT2/(density*sqrt(pair_density));

         double theta = (8.0/3.0)*atan(eta);

         double dtheta_deta = (8.0/3.0)/(pow(eta, 2) + 1);

         double dtheta_drho = deta_drho*dtheta_deta;

         double dtheta_dpi = deta_dpi*dtheta_deta;

         fzeta_3 = 2.0*pow(pow(eta, 2) + 1, 4.0/3.0)*cos(theta);

         double dfzeta_3_deta = 5.333333333333333*eta*cbrt(pow(eta, 2) + 1)*cos(theta);

         double dfzeta_3_dtheta = -2.0*pow(pow(eta, 2) + 1, 4.0/3.0)*sin(theta);

         dfzeta_3_drho = deta_drho*dfzeta_3_deta + dfzeta_3_dtheta*dtheta_drho;

         dfzeta_3_dpi = deta_dpi*dfzeta_3_deta + dfzeta_3_dtheta*dtheta_dpi;

      }
      double phi8 = 0.5*fzeta_3;

      double dphi8_dfzeta_3 = 0.5;

      double dphi8_drho = dfzeta_3_drho*dphi8_dfzeta_3;

      double dphi8_dpi = dfzeta_3_dpi*dphi8_dfzeta_3;

      double dcrzeta_dpi = 0;

      double crzeta = 0;

      double dcrzeta_drho = 0;

      if (pair_density < -9.9999999999999998e-17)
      {
         double zeta = M_SQRT2*sqrt(-pair_density)/density;

         double dzeta_drho = -M_SQRT2*sqrt(-pair_density)/pow(density, 2);

         double dzeta_dpi = (1.0/2.0)*M_SQRT2*sqrt(-pair_density)/(density*pair_density);

         double rp = cbrt(2)*rs/cbrt(zeta + 1);

         double drp_dzeta = -1.0/3.0*cbrt(2)*rs/pow(zeta + 1, 4.0/3.0);

         double drp_drho = drp_dzeta*dzeta_drho + cbrt(2)*drs_drho/cbrt(zeta + 1);

         double drp_dpi = drp_dzeta*dzeta_dpi;

         double r2 = pow(rp, 2);

         double dr2_drp = 2*rp;

         double dr2_drho = dr2_drp*drp_drho;

         double dr2_dpi = dr2_drp*drp_dpi;

         double g2_2 = (1 - 0.022669999999999999*rp)/(r2*(0.040000000000000001*r2 + 0.43190000000000001*rp + 1));

         double dg2_2_drp = -0.43190000000000001*(1 - 0.022669999999999999*rp)/(r2*pow(0.040000000000000001*r2 + 0.43190000000000001*rp + 1, 2)) - 0.022669999999999999/(r2*(0.040000000000000001*r2 + 0.43190000000000001*rp + 1));

         double dg2_2_dr2 = -0.040000000000000001*(1 - 0.022669999999999999*rp)/(r2*pow(0.040000000000000001*r2 + 0.43190000000000001*rp + 1, 2)) - (1 - 0.022669999999999999*rp)/(pow(r2, 2)*(0.040000000000000001*r2 + 0.43190000000000001*rp + 1));

         double dg2_2_drho = dg2_2_dr2*dr2_drho + dg2_2_drp*drp_drho;

         double dg2_2_dpi = dg2_2_dr2*dr2_dpi + dg2_2_drp*drp_dpi;

         crzeta = (1.0/4.0)*g2_2*pow(zeta + 1, 2);

         double dcrzeta_dg2_2 = (1.0/4.0)*pow(zeta + 1, 2);

         double dcrzeta_dzeta = (1.0/4.0)*g2_2*(2*zeta + 2);

         dcrzeta_drho = dcrzeta_dg2_2*dg2_2_drho;

         dcrzeta_dpi = dcrzeta_dg2_2*dg2_2_dpi;

         if (1 - zeta > 1.0e-16)
         {
             double rm = cbrt(2)*rs*cbrt(1.0/(1 - zeta));

             double drm_dzeta = (1.0/3.0)*cbrt(2)*rs*cbrt(1.0/(1 - zeta))/(1 - zeta);

             double drm_drho = drm_dzeta*dzeta_drho + cbrt(2)*drs_drho*cbrt(1.0/(1 - zeta));

             double drm_dpi = drm_dzeta*dzeta_dpi;

             double r2_2 = pow(rm, 2);

             double dr2_2_drm = 2*rm;

             double dr2_2_drho = dr2_2_drm*drm_drho;

             double dr2_2_dpi = dr2_2_drm*drm_dpi;

             double g2_3 = (1 - 0.022669999999999999*rm)/(r2_2*(0.040000000000000001*r2_2 + 0.43190000000000001*rm + 1));

             double dg2_3_drm = -0.43190000000000001*(1 - 0.022669999999999999*rm)/(r2_2*pow(0.040000000000000001*r2_2 + 0.43190000000000001*rm + 1, 2)) - 0.022669999999999999/(r2_2*(0.040000000000000001*r2_2 + 0.43190000000000001*rm + 1));

             double dg2_3_dr2_2 = -0.040000000000000001*(1 - 0.022669999999999999*rm)/(r2_2*pow(0.040000000000000001*r2_2 + 0.43190000000000001*rm + 1, 2)) - (1 - 0.022669999999999999*rm)/(pow(r2_2, 2)*(0.040000000000000001*r2_2 + 0.43190000000000001*rm + 1));

             double dg2_3_drho = dg2_3_dr2_2*dr2_2_drho + dg2_3_drm*drm_drho;

             double dg2_3_dpi = dg2_3_dr2_2*dr2_2_dpi + dg2_3_drm*drm_dpi;

             crzeta += (1.0/4.0)*g2_3*pow(1 - zeta, 2);

             double dcrzeta_dg2_3 = (1.0/4.0)*pow(1 - zeta, 2);

             dcrzeta_dzeta += (1.0/4.0)*g2_3*(2*zeta - 2);

             dcrzeta_drho += dcrzeta_dg2_3*dg2_3_drho + dcrzeta_dzeta*dzeta_drho;

             dcrzeta_dpi += dcrzeta_dg2_3*dg2_3_dpi + dcrzeta_dzeta*dzeta_dpi;
         }
         dcrzeta_drho += dcrzeta_dzeta*dzeta_drho;

         dcrzeta_dpi += dcrzeta_dzeta*dzeta_dpi;

      }
      else if (pair_density < 9.9999999999999998e-17)
      {
         double rp0 = cbrt(2)*rs;

         double drp0_drho = cbrt(2)*drs_drho;

         double dm = 0.040000000000000001*pow(rp0, 2) + 0.43190000000000001*rp0 + 1;

         double ddm_drho = drp0_drho*(0.080000000000000002*rp0 + 0.43190000000000001);

         double nm2 = 0.046634402499999998*pow(0.1852280620514008*rp0 + 1, 2);

         double dnm2_drho = drp0_drho*(0.0032000000000000002*rp0 + 0.017276);

         double d2z = -0.017632222222222219/(dm*rp0) + (10.0/9.0)/(dm*pow(rp0, 2)) + (1.0/18.0)*(-0.0081611999999999987*rp0 - 0.048955864999999994)/pow(dm, 2) + (1.0/18.0)*(0.44*rp0 + 2.5914000000000001)/(pow(dm, 2)*rp0) + (2.0/9.0)*nm2*(1 - 0.022669999999999999*rp0)/pow(dm, 3);

         double dd2z_drho = ddm_drho*(0.017632222222222219/(pow(dm, 2)*rp0) - (10.0/9.0)/(pow(dm, 2)*pow(rp0, 2)) - 1.0/9.0*(-0.0081611999999999987*rp0 - 0.048955864999999994)/pow(dm, 3) - 1.0/9.0*(0.44*rp0 + 2.5914000000000001)/(pow(dm, 3)*rp0) - 2.0/3.0*nm2*(1 - 0.022669999999999999*rp0)/pow(dm, 4)) + drp0_drho*(0.017632222222222219/(dm*pow(rp0, 2)) - (20.0/9.0)/(dm*pow(rp0, 3)) - 0.00045339999999999991/pow(dm, 2) + 0.024444444444444442/(pow(dm, 2)*rp0) - 1.0/18.0*(0.44*rp0 + 2.5914000000000001)/(pow(dm, 2)*pow(rp0, 2)) - 0.0050377777777777773*nm2/pow(dm, 3)) + (2.0/9.0)*dnm2_drho*(1 - 0.022669999999999999*rp0)/pow(dm, 3);

         double r2 = pow(rp0, 2);

         double dr2_drho = 2*drp0_drho*rp0;

         double g2_2 = (1 - 0.022669999999999999*rp0)/(r2*(0.040000000000000001*r2 + 0.43190000000000001*rp0 + 1));

         double dg2_2_drho = dr2_drho*(-0.040000000000000001*(1 - 0.022669999999999999*rp0)/(r2*pow(0.040000000000000001*r2 + 0.43190000000000001*rp0 + 1, 2)) - (1 - 0.022669999999999999*rp0)/(pow(r2, 2)*(0.040000000000000001*r2 + 0.43190000000000001*rp0 + 1))) + drp0_drho*(-0.43190000000000001*(1 - 0.022669999999999999*rp0)/(r2*pow(0.040000000000000001*r2 + 0.43190000000000001*rp0 + 1, 2)) - 0.022669999999999999/(r2*(0.040000000000000001*r2 + 0.43190000000000001*rp0 + 1)));

         crzeta = d2z*zeta2 + (1.0/2.0)*g2_2;

         double dcrzeta_dzeta2 = d2z;

         dcrzeta_drho = dcrzeta_dzeta2*dzeta2_drho + dd2z_drho*zeta2 + (1.0/2.0)*dg2_2_drho;

         dcrzeta_dpi = dcrzeta_dzeta2*dzeta2_dpi;

      }
      else
      {
         double eta = M_SQRT2*sqrt(pair_density)/density;

         double deta_drho = -M_SQRT2*sqrt(pair_density)/pow(density, 2);

         double deta_dpi = (1.0/2.0)*M_SQRT2/(density*sqrt(pair_density));

         double theta = -1.0/3.0*atan(eta);

         double dtheta_deta = -(1.0/3.0)/(pow(eta, 2) + 1);

         double dtheta_drho = deta_drho*dtheta_deta;

         double dtheta_dpi = deta_dpi*dtheta_deta;

         double rp0 = cbrt(2)*rs/pow(pow(eta, 2) + 1, 1.0/6.0);

         double drp0_deta = -1.0/3.0*cbrt(2)*eta*rs/pow(pow(eta, 2) + 1, 7.0/6.0);

         double drp0_drho = deta_drho*drp0_deta + cbrt(2)*drs_drho/pow(pow(eta, 2) + 1, 1.0/6.0);

         double drp0_dpi = deta_dpi*drp0_deta;

         double rpr = rp0*cos(theta);

         double drpr_dtheta = -rp0*sin(theta);

         double drpr_drp0 = cos(theta);

         double drpr_drho = drp0_drho*drpr_drp0 + drpr_dtheta*dtheta_drho;

         double drpr_dpi = drp0_dpi*drpr_drp0 + drpr_dtheta*dtheta_dpi;

         double rpi = rp0*sin(theta);

         double drpi_dtheta = rp0*cos(theta);

         double drpi_drp0 = sin(theta);

         double drpi_drho = drp0_drho*drpi_drp0 + drpi_dtheta*dtheta_drho;

         double drpi_dpi = drp0_dpi*drpi_drp0 + drpi_dtheta*dtheta_dpi;

         double rp2r = -pow(rpi, 2) + pow(rpr, 2);

         double drp2r_drpr = 2*rpr;

         double drp2r_drpi = -2*rpi;

         double drp2r_drho = drp2r_drpi*drpi_drho + drp2r_drpr*drpr_drho;

         double drp2r_dpi = drp2r_drpi*drpi_dpi + drp2r_drpr*drpr_dpi;

         double rp2i = 2*rpi*rpr;

         double drp2i_drpr = 2*rpi;

         double drp2i_drpi = 2*rpr;

         double drp2i_drho = drp2i_drpi*drpi_drho + drp2i_drpr*drpr_drho;

         double drp2i_dpi = drp2i_drpi*drpi_dpi + drp2i_drpr*drpr_dpi;

         double denomr = 0.040000000000000001*rp2r + 0.43190000000000001*rpr + 1;

         double ddenomr_drpr = 0.43190000000000001;

         double ddenomr_drp2r = 0.040000000000000001;

         double ddenomr_drho = ddenomr_drp2r*drp2r_drho + ddenomr_drpr*drpr_drho;

         double ddenomr_dpi = ddenomr_drp2r*drp2r_dpi + ddenomr_drpr*drpr_dpi;

         double denomi = 0.040000000000000001*rp2i + 0.43190000000000001*rpi;

         double ddenomi_drp2i = 0.040000000000000001;

         double ddenomi_drpi = 0.43190000000000001;

         double ddenomi_drho = ddenomi_drp2i*drp2i_drho + ddenomi_drpi*drpi_drho;

         double ddenomi_dpi = ddenomi_drp2i*drp2i_dpi + ddenomi_drpi*drpi_dpi;

         double denom2r = -denomi*rp2i + denomr*rp2r;

         double ddenom2r_drp2i = -denomi;

         double ddenom2r_ddenomr = rp2r;

         double ddenom2r_ddenomi = -rp2i;

         double ddenom2r_drp2r = denomr;

         double ddenom2r_drho = ddenom2r_ddenomi*ddenomi_drho + ddenom2r_ddenomr*ddenomr_drho + ddenom2r_drp2i*drp2i_drho + ddenom2r_drp2r*drp2r_drho;

         double ddenom2r_dpi = ddenom2r_ddenomi*ddenomi_dpi + ddenom2r_ddenomr*ddenomr_dpi + ddenom2r_drp2i*drp2i_dpi + ddenom2r_drp2r*drp2r_dpi;

         double denom2i = denomi*rp2r + denomr*rp2i;

         double ddenom2i_drp2i = denomr;

         double ddenom2i_ddenomr = rp2i;

         double ddenom2i_ddenomi = rp2r;

         double ddenom2i_drp2r = denomi;

         double ddenom2i_drho = ddenom2i_ddenomi*ddenomi_drho + ddenom2i_ddenomr*ddenomr_drho + ddenom2i_drp2i*drp2i_drho + ddenom2i_drp2r*drp2r_drho;

         double ddenom2i_dpi = ddenom2i_ddenomi*ddenomi_dpi + ddenom2i_ddenomr*ddenomr_dpi + ddenom2i_drp2i*drp2i_dpi + ddenom2i_drp2r*drp2r_dpi;

         double numr = 1 - 0.022669999999999999*rpr;

         double dnumr_drpr = -0.022669999999999999;

         double dnumr_drho = dnumr_drpr*drpr_drho;

         double dnumr_dpi = dnumr_drpr*drpr_dpi;

         double numi = -0.022669999999999999*rpi;

         double dnumi_drpi = -0.022669999999999999;

         double dnumi_drho = dnumi_drpi*drpi_drho;

         double dnumi_dpi = dnumi_drpi*drpi_dpi;

         double denom2 = pow(denom2i, 2) + pow(denom2r, 2);

         double ddenom2_ddenom2i = 2*denom2i;

         double ddenom2_ddenom2r = 2*denom2r;

         double ddenom2_drho = ddenom2_ddenom2i*ddenom2i_drho + ddenom2_ddenom2r*ddenom2r_drho;

         double ddenom2_dpi = ddenom2_ddenom2i*ddenom2i_dpi + ddenom2_ddenom2r*ddenom2r_dpi;

         double g2r = (denom2i*numi + denom2r*numr)/denom2;

         double dg2r_ddenom2r = numr/denom2;

         double dg2r_dnumi = denom2i/denom2;

         double dg2r_ddenom2i = numi/denom2;

         double dg2r_dnumr = denom2r/denom2;

         double dg2r_ddenom2 = -(denom2i*numi + denom2r*numr)/pow(denom2, 2);

         double dg2r_drho = ddenom2_drho*dg2r_ddenom2 + ddenom2i_drho*dg2r_ddenom2i + ddenom2r_drho*dg2r_ddenom2r + dg2r_dnumi*dnumi_drho + dg2r_dnumr*dnumr_drho;

         double dg2r_dpi = ddenom2_dpi*dg2r_ddenom2 + ddenom2i_dpi*dg2r_ddenom2i + ddenom2r_dpi*dg2r_ddenom2r + dg2r_dnumi*dnumi_dpi + dg2r_dnumr*dnumr_dpi;

         double g2i = (-denom2i*numr + denom2r*numi)/denom2;

         double dg2i_ddenom2r = numi/denom2;

         double dg2i_dnumi = denom2r/denom2;

         double dg2i_ddenom2i = -numr/denom2;

         double dg2i_dnumr = -denom2i/denom2;

         double dg2i_ddenom2 = -(-denom2i*numr + denom2r*numi)/pow(denom2, 2);

         double dg2i_drho = ddenom2_drho*dg2i_ddenom2 + ddenom2i_drho*dg2i_ddenom2i + ddenom2r_drho*dg2i_ddenom2r + dg2i_dnumi*dnumi_drho + dg2i_dnumr*dnumr_drho;

         double dg2i_dpi = ddenom2_dpi*dg2i_ddenom2 + ddenom2i_dpi*dg2i_ddenom2i + ddenom2r_dpi*dg2i_ddenom2r + dg2i_dnumi*dnumi_dpi + dg2i_dnumr*dnumr_dpi;

         crzeta = -eta*g2i + g2r*(0.5 - 0.5*pow(eta, 2));

         double dcrzeta_deta = -1.0*eta*g2r - g2i;

         double dcrzeta_dg2i = -eta;

         double dcrzeta_dg2r = 0.5 - 0.5*pow(eta, 2);

         dcrzeta_drho = dcrzeta_deta*deta_drho + dcrzeta_dg2i*dg2i_drho + dcrzeta_dg2r*dg2r_drho;

         dcrzeta_dpi = dcrzeta_deta*deta_dpi + dcrzeta_dg2i*dg2i_dpi + dcrzeta_dg2r*dg2r_dpi;

      }
      double g0 = (0.5*rs*(2*g0_aHD + 0.75239999999999996) + 0.040965000000000001*rs2 - 0.0063850000000000001*rs3 + 0.00092949999999999999*rs4 + 0.5)*exp(-0.75239999999999996*rs);

      double dg0_drho = 0.040965000000000001*drs2_drho*exp(-0.75239999999999996*rs) - 0.0063850000000000001*drs3_drho*exp(-0.75239999999999996*rs) + 0.00092949999999999999*drs4_drho*exp(-0.75239999999999996*rs) + drs_drho*((1.0*g0_aHD + 0.37619999999999998)*exp(-0.75239999999999996*rs) - 0.75239999999999996*(0.5*rs*(2*g0_aHD + 0.75239999999999996) + 0.040965000000000001*rs2 - 0.0063850000000000001*rs3 + 0.00092949999999999999*rs4 + 0.5)*exp(-0.75239999999999996*rs));

      double c4f = crzeta*g2_cst + d2*(1 - zeta2) - 1.0/5.0*phi8/(pow(alpha, 2)*rs2);

      double dc4f_dphi8 = -(1.0/5.0)/(pow(alpha, 2)*rs2);

      double dc4f_dcrzeta = g2_cst;

      double dc4f_dzeta2 = -d2;

      double dc4f_drho = dc4f_dcrzeta*dcrzeta_drho + dc4f_dphi8*dphi8_drho + dc4f_dzeta2*dzeta2_drho + dd2_drho*(1 - zeta2) + (1.0/5.0)*drs2_drho*phi8/(pow(alpha, 2)*pow(rs2, 2));

      double dc4f_dpi = dc4f_dcrzeta*dcrzeta_dpi + dc4f_dphi8*dphi8_dpi + dc4f_dzeta2*dzeta2_dpi;

      double c5f = crzeta*g2_cst + d3*(1 - zeta2);

      double dc5f_dcrzeta = g2_cst;

      double dc5f_dzeta2 = -d3;

      double dc5f_drho = dc5f_dcrzeta*dcrzeta_drho + dc5f_dzeta2*dzeta2_drho + dd3_drho*(1 - zeta2);

      double dc5f_dpi = dc5f_dcrzeta*dcrzeta_dpi + dc5f_dzeta2*dzeta2_dpi;

      double c2 = (1.0/8.0)*(g0 - 1.0/2.0)*(3*zeta2 - 3)/rs3;

      double dc2_dzeta2 = (3.0/8.0)*(g0 - 1.0/2.0)/rs3;

      double dc2_drho = dc2_dzeta2*dzeta2_drho + (1.0/8.0)*dg0_drho*(3*zeta2 - 3)/rs3 - 1.0/8.0*drs3_drho*(g0 - 1.0/2.0)*(3*zeta2 - 3)/pow(rs3, 2);

      double dc2_dpi = dc2_dzeta2*dzeta2_dpi;

      double c3 = (1.0/2.0)*M_SQRT2*g0*(zeta2 - 1)/(sqrt(M_PI)*rs3);

      double dc3_dzeta2 = (1.0/2.0)*M_SQRT2*g0/(sqrt(M_PI)*rs3);

      double dc3_drho = dc3_dzeta2*dzeta2_drho + (1.0/2.0)*M_SQRT2*dg0_drho*(zeta2 - 1)/(sqrt(M_PI)*rs3) - 1.0/2.0*M_SQRT2*drs3_drho*g0*(zeta2 - 1)/(sqrt(M_PI)*pow(rs3, 2));

      double dc3_dpi = dc3_dzeta2*dzeta2_dpi;

      double c4 = -9.0/64.0*c4f/rs3;

      double dc4_dc4f = -(9.0/64.0)/rs3;

      double dc4_drho = (9.0/64.0)*c4f*drs3_drho/pow(rs3, 2) + dc4_dc4f*dc4f_drho;

      double dc4_dpi = dc4_dc4f*dc4f_dpi;

      double c5 = -9.0/80.0*M_SQRT2*c5f/(sqrt(M_PI)*rs3);

      double dc5_dc5f = -9.0/80.0*M_SQRT2/(sqrt(M_PI)*rs3);

      double dc5_drho = (9.0/80.0)*M_SQRT2*c5f*drs3_drho/(sqrt(M_PI)*pow(rs3, 2)) + dc5_dc5f*dc5f_drho;

      double dc5_dpi = dc5_dc5f*dc5f_dpi;

      double a1 = 4*b06*c3 + b08*c5;

      double da1_dc3 = 4*b06;

      double da1_dc5 = b08;

      double da1_drho = 4*c3*db06_drho + c5*db08_drho + da1_dc3*dc3_drho + da1_dc5*dc5_drho;

      double da1_dpi = da1_dc3*dc3_dpi + da1_dc5*dc5_dpi;

      double a2 = 6*b04*ec + 4*b06*c2 + b08*c4;

      double da2_dec = 6*b04;

      double da2_dc2 = 4*b06;

      double da2_dc4 = b08;

      double da2_drho = 4*c2*db06_drho + c4*db08_drho + da2_dc2*dc2_drho + da2_dc4*dc4_drho + da2_dec*dec_drho + 6*db04_drho*ec;

      double da2_dpi = da2_dc2*dc2_dpi + da2_dc4*dc4_dpi + da2_dec*dec_dpi;

      double a3 = b08*c3;

      double da3_dc3 = b08;

      double da3_drho = c3*db08_drho + da3_dc3*dc3_drho;

      double da3_dpi = da3_dc3*dc3_dpi;

      double a4 = 4*b06*ec + b08*c2;

      double da4_dec = 4*b06;

      double da4_dc2 = b08;

      double da4_drho = c2*db08_drho + da4_dc2*dc2_drho + da4_dec*dec_drho + 4*db06_drho*ec;

      double da4_dpi = da4_dc2*dc2_dpi + da4_dec*dec_dpi;

      double a5 = b08*ec;

      double da5_dec = b08;

      double da5_drho = da5_dec*dec_drho + db08_drho*ec;

      double da5_dpi = da5_dec*dec_dpi;

      double x = mu*sqrt(rs)/phi2;

      double dx_dphi2 = -mu*sqrt(rs)/pow(phi2, 2);

      double dx_drho = dphi2_drho*dx_dphi2 + (1.0/2.0)*drs_drho*mu/(phi2*sqrt(rs));

      double dx_dpi = dphi2_dpi*dx_dphi2;

      double x2 = pow(x, 2);

      double dx2_dx = 2*x;

      double dx2_drho = dx2_dx*dx_drho;

      double dx2_dpi = dx2_dx*dx_dpi;

      double Qlog = (qb*x2 + 3.91744*x*x2 + 5.84605*x + 1)/(5.84605*x + 3.4485100000000002*x2 + 1);

      double dQlog_dx = (3.91744*x2 + 5.84605)/(5.84605*x + 3.4485100000000002*x2 + 1) - 0.17105567006782357*(qb*x2 + 3.91744*x*x2 + 5.84605*x + 1)/pow(x + 0.58988718878559032*x2 + 0.17105567006782357, 2);

      double dQlog_dx2 = (qb + 3.91744*x)/(5.84605*x + 3.4485100000000002*x2 + 1) - 0.10090354834214389*(qb*x2 + 3.91744*x*x2 + 5.84605*x + 1)/pow(x + 0.58988718878559032*x2 + 0.17105567006782357, 2);

      double dQlog_drho = dQlog_dx*dx_drho + dQlog_dx2*dx2_drho;

      double dQlog_dpi = dQlog_dx*dx_dpi + dQlog_dx2*dx2_dpi;

      double q = (-2 + 2*M_LN2)*log(Qlog)/pow(M_PI, 2);

      double dq_dQlog = (-2 + 2*M_LN2)/(pow(M_PI, 2)*Qlog);

      double dq_drho = dQlog_drho*dq_dQlog;

      double dq_dpi = dQlog_dpi*dq_dQlog;

      double e_lr = (a1*mu3 + a2*mu4 + a3*mu5 + a4*mu6 + a5*mu8 + pow(phi2, 3)*q)/pow(b02*mu2 + 1, 4);

      double de_lr_da2 = mu4/pow(b02*mu2 + 1, 4);

      double de_lr_dphi2 = 3*pow(phi2, 2)*q/pow(b02*mu2 + 1, 4);

      double de_lr_da4 = mu6/pow(b02*mu2 + 1, 4);

      double de_lr_da3 = mu5/pow(b02*mu2 + 1, 4);

      double de_lr_da1 = mu3/pow(b02*mu2 + 1, 4);

      double de_lr_dq = pow(phi2, 3)/pow(b02*mu2 + 1, 4);

      double de_lr_da5 = mu8/pow(b02*mu2 + 1, 4);

      double de_lr_drho = da1_drho*de_lr_da1 + da2_drho*de_lr_da2 + da3_drho*de_lr_da3 + da4_drho*de_lr_da4 + da5_drho*de_lr_da5 - 4*db02_drho*mu2*(a1*mu3 + a2*mu4 + a3*mu5 + a4*mu6 + a5*mu8 + pow(phi2, 3)*q)/pow(b02*mu2 + 1, 5) + de_lr_dphi2*dphi2_drho + de_lr_dq*dq_drho;

      double de_lr_dpi = da1_dpi*de_lr_da1 + da2_dpi*de_lr_da2 + da3_dpi*de_lr_da3 + da4_dpi*de_lr_da4 + da5_dpi*de_lr_da5 + de_lr_dphi2*dphi2_dpi + de_lr_dq*dq_dpi;

      exc[g] =  -e_lr + ec;

      double dExc_dec = density;

      double dExc_de_lr = -density;

      vrho[2 * g + 0] =  dExc_de_lr*de_lr_drho + dExc_dec*dec_drho - e_lr + ec;

      vrho[2 * g + 1] =  dExc_de_lr*de_lr_dpi + dExc_dec*dec_dpi;

   }
}

}  // namespace pdftpmgb06
