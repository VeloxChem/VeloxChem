//
//                           VELOXCHEM 1.0-RC2
//         ----------------------------------------------------
//                     An Electronic Structure Code
//
//  Copyright Â© 2018-2021 by VeloxChem developers. All rights reserved.
//  Contact: https://veloxchem.org/contact
//
//  SPDX-License-Identifier: LGPL-3.0-or-later
//
//  This file is part of VeloxChem.
//
//  VeloxChem is free software: you can redistribute it and/or modify it under
//  the terms of the GNU Lesser General Public License as published by the Free
//  Software Foundation, either version 3 of the License, or (at your option)
//  any later version.
//
//  VeloxChem is distributed in the hope that it will be useful, but WITHOUT
//  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
//  FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
//  License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with VeloxChem. If not, see <https://www.gnu.org/licenses/>.

#include "PairDensityVWN.hpp"

#include <algorithm>
#include <cmath>
#include <iostream>

#include "MathConst.hpp"

namespace pdftvwn_rpa {  // pdftvwn_rpa namespace

void
compute_exc_vxc(const int32_t np, const double* rho, double* exc, double* vrho)
{

   // Subroutine generated by xc_write in MultiPsi, copyright M.G. Delcey, 2024

   double rsfact = 0.90856029641606983*pow(M_PI, -0.33333333333333331);

   double f2_denom = 37.537128437796;

   double f_aux2 = 582.27315904200805 + 2920.1910372153689/f2_denom;

   double f2_denom_2 = 87.173106479035994;

   double f_aux2_2 = 34.348984975465427 + 475.81613882711014/f2_denom_2;

   double fpol = 1.0/(-2 + 2*cbrt(2));

   for (int32_t g = 0; g < np; g++)
   {
      double density = rho[2 * g + 0];

      if (density < 1.0e-16)
      {
         exc[g] = 0.0;

         vrho[2 * g + 0] = 0.0;
         vrho[2 * g + 1] = 0.0;

         continue;
      }

      double pair_density = rho[2 * g + 1];

      double rs = rsfact/cbrt(density);

      double drs_drho = -1.0/3.0*rsfact/pow(density, 4.0/3.0);

      double fx_vwn = 13.071999999999999*sqrt(rs) + rs + 42.719799999999999;

      double dfx_vwn_drho = drs_drho*(1 + 6.5359999999999996/sqrt(rs));

      double f_aux1 = log(rs/fx_vwn);

      double df_aux1_drho = -dfx_vwn_drho/fx_vwn + drs_drho/rs;

      double f_aux3 = f_aux2*atan(0.044899888641636389/(2*sqrt(rs) + 13.071999999999999));

      double df_aux3_drho = -0.00026276116910749415*drs_drho*f_aux2/(sqrt(rs)*(1 + 1.1797947232272673e-5/pow(0.15299877600979192*sqrt(rs) + 1, 2))*pow(0.15299877600979192*sqrt(rs) + 1, 2));

      double f_aux4 = -5.3501865919999991*log(pow(sqrt(rs) + 0.40928599999999998, 2)/fx_vwn)/f2_denom;

      double df_aux4_drho = 5.3501865919999991*dfx_vwn_drho/(f2_denom*fx_vwn) - 5.3501865919999991*drs_drho/(f2_denom*sqrt(rs)*(sqrt(rs) + 0.40928599999999998));

      double fRPA1 = 0.031090699999999999*f_aux1 + 0.031090699999999999*f_aux3 - 0.031090699999999999*f_aux4;

      double dfRPA1_drho = 0.031090699999999999*df_aux1_drho + 0.031090699999999999*df_aux3_drho - 0.031090699999999999*df_aux4_drho;

      double fx_vwn_2 = 20.123100000000001*sqrt(rs) + rs + 101.578;

      double dfx_vwn_2_drho = drs_drho*(1 + 10.06155/sqrt(rs));

      double f_aux1_2 = log(rs/fx_vwn_2);

      double df_aux1_2_drho = -dfx_vwn_2_drho/fx_vwn_2 + drs_drho/rs;

      double f_aux3_2 = f_aux2_2*atan(1.1716852777089861/(2*sqrt(rs) + 20.123100000000001));

      double df_aux3_2_drho = -0.0028934847797835945*drs_drho*f_aux2_2/(sqrt(rs)*(1 + 0.0033902535177474653/pow(0.099388265227524586*sqrt(rs) + 1, 2))*pow(0.099388265227524586*sqrt(rs) + 1, 2));

      double f_aux4_2 = -14.957379491400001*log(pow(sqrt(rs) + 0.74329400000000001, 2)/fx_vwn_2)/f2_denom_2;

      double df_aux4_2_drho = 14.957379491400001*dfx_vwn_2_drho/(f2_denom_2*fx_vwn_2) - 14.957379491400001*drs_drho/(f2_denom_2*sqrt(rs)*(sqrt(rs) + 0.74329400000000001));

      double fRPA2 = 0.015545349999999999*f_aux1_2 + 0.015545349999999999*f_aux3_2 - 0.015545349999999999*f_aux4_2;

      double dfRPA2_drho = 0.015545349999999999*df_aux1_2_drho + 0.015545349999999999*df_aux3_2_drho - 0.015545349999999999*df_aux4_2_drho;

      double dfzeta_dpi = 0;

      double fzeta = 0;

      double dfzeta_drho = 0;

      if (pair_density < -9.9999999999999998e-17)
      {
         double zeta = M_SQRT2*sqrt(-pair_density)/density;

         double dzeta_dpi = (1.0/2.0)*M_SQRT2*sqrt(-pair_density)/(density*pair_density);

         double dzeta_drho = -M_SQRT2*sqrt(-pair_density)/pow(density, 2);

         double dfzeta_dzeta = 0.0;

         if (1.0 - zeta > 1.0e-16)
         {
             fzeta = pow(1.0 - zeta, 4.0/3.0) + pow(zeta + 1.0, 4.0/3.0);

             dfzeta_dzeta = -4.0/3.0*cbrt(1.0 - zeta) + (4.0/3.0)*cbrt(zeta + 1.0);
         }
         else
         {
             fzeta = pow(zeta + 1.0, 4.0/3.0);

             dfzeta_dzeta = (4.0/3.0)*cbrt(zeta + 1.0);
         }

         dfzeta_dpi = dfzeta_dzeta*dzeta_dpi;

         dfzeta_drho = dfzeta_dzeta*dzeta_drho;

      }
      else if (pair_density < 9.9999999999999998e-17)
      {
         double zeta2 = -2*pair_density/pow(density, 2);

         double dzeta2_dpi = -2/pow(density, 2);

         double dzeta2_drho = 4*pair_density/pow(density, 3);

         fzeta = (10.0/243.0)*pow(zeta2, 2) + (4.0/9.0)*zeta2 + 2.0;

         double dfzeta_dzeta2 = (20.0/243.0)*zeta2 + 4.0/9.0;

         dfzeta_dpi = dfzeta_dzeta2*dzeta2_dpi;

         dfzeta_drho = dfzeta_dzeta2*dzeta2_drho;

      }
      else
      {
         double eta = M_SQRT2*sqrt(pair_density)/density;

         double deta_dpi = (1.0/2.0)*M_SQRT2/(density*sqrt(pair_density));

         double deta_drho = -M_SQRT2*sqrt(pair_density)/pow(density, 2);

         double theta = (4.0/3.0)*atan(eta);

         double dtheta_deta = (4.0/3.0)/(pow(eta, 2) + 1);

         double dtheta_dpi = deta_dpi*dtheta_deta;

         double dtheta_drho = deta_drho*dtheta_deta;

         fzeta = 2.0*pow(pow(eta, 2) + 1, 2.0/3.0)*cos(theta);

         double dfzeta_deta = 2.6666666666666665*eta*cos(theta)/cbrt(pow(eta, 2) + 1);

         double dfzeta_dtheta = -2.0*pow(pow(eta, 2) + 1, 2.0/3.0)*sin(theta);

         dfzeta_dpi = deta_dpi*dfzeta_deta + dfzeta_dtheta*dtheta_dpi;

         dfzeta_drho = deta_drho*dfzeta_deta + dfzeta_dtheta*dtheta_drho;

      }
      exc[g] =  fRPA1 + fpol*(-fRPA1 + fRPA2)*(fzeta - 2);

      double dExc_dfzeta = density*fpol*(-fRPA1 + fRPA2);

      vrho[2 * g + 1] =  dExc_dfzeta*dfzeta_dpi;

      vrho[2 * g + 0] =  dExc_dfzeta*dfzeta_drho + density*dfRPA1_drho*(-fpol*(fzeta - 2) + 1) + density*dfRPA2_drho*fpol*(fzeta - 2) + fRPA1 + fpol*(-fRPA1 + fRPA2)*(fzeta - 2);

   }
}

}  // namespace pdftvwn_rpa

//*********************************************************************************************************************
namespace pdftvwn5 {  // pdftvwn5 namespace

void
compute_exc_vxc(const int32_t np, const double* rho, double* exc, double* vrho)
{

   // Subroutine generated by xc_write in MultiPsi, copyright M.G. Delcey, 2024

   double rsfact = 0.90856029641606983*pow(M_PI, -0.33333333333333331);

   double f2_denom = 12.5549141492;

   double f_aux2 = 1.2117833427280604 + 0.44746923712635772/f2_denom;

   double f2_denom_2 = 15.868788500000001;

   double f_aux2_2 = 2.9847935235408163 + 6.2184785322323695/f2_denom_2;

   double fre = -(1.0/6.0)/pow(M_PI, 2);

   double f2_denom_3 = 12.99914055888256;

   double f_aux2_3 = 0.31757762321187655 + 0.0016948478615942716/f2_denom_3;

   double fpp_vwn = 4/(-9 + 9*cbrt(2));

   double fpol = 1.0/(-2 + 2*cbrt(2));

   for (int32_t g = 0; g < np; g++)
   {
      double density = rho[2 * g + 0];

      if (density < 1.0e-16)
      {
         exc[g] = 0.0;

         vrho[2 * g + 0] = 0.0;
         vrho[2 * g + 1] = 0.0;

         continue;
      }

      double pair_density = rho[2 * g + 1];

      double rs = rsfact/cbrt(density);

      double drs_drho = -1.0/3.0*rsfact/pow(density, 4.0/3.0);

      double fx_vwn = 3.7274400000000001*sqrt(rs) + rs + 12.9352;

      double dfx_vwn_drho = drs_drho*(1 + 1.86372/sqrt(rs));

      double f_aux1 = log(rs/fx_vwn);

      double df_aux1_drho = -dfx_vwn_drho/fx_vwn + drs_drho/rs;

      double f_aux3 = f_aux2*atan(6.1519908197590807/(2*sqrt(rs) + 3.7274400000000001));

      double df_aux3_drho = -0.44278648427543332*drs_drho*f_aux2/(sqrt(rs)*(1 + 2.7240183863758642/pow(0.53656128603009035*sqrt(rs) + 1, 2))*pow(0.53656128603009035*sqrt(rs) + 1, 2));

      double f_aux4 = -0.39130665120000002*log(pow(sqrt(rs) + 0.10498, 2)/fx_vwn)/f2_denom;

      double df_aux4_drho = 0.39130665120000002*dfx_vwn_drho/(f2_denom*fx_vwn) - 0.39130665120000002*drs_drho/(f2_denom*sqrt(rs)*(sqrt(rs) + 0.10498));

      double fMC1 = 0.031090699999999999*f_aux1 + 0.031090699999999999*f_aux3 - 0.031090699999999999*f_aux4;

      double dfMC1_drho = 0.031090699999999999*df_aux1_drho + 0.031090699999999999*df_aux3_drho - 0.031090699999999999*df_aux4_drho;

      double fx_vwn_2 = 7.0604199999999997*sqrt(rs) + rs + 18.0578;

      double dfx_vwn_2_drho = drs_drho*(1 + 3.5302099999999998/sqrt(rs));

      double f_aux1_2 = log(rs/fx_vwn_2);

      double df_aux1_2_drho = -dfx_vwn_2_drho/fx_vwn_2 + drs_drho/rs;

      double f_aux3_2 = f_aux2_2*atan(4.7309269095601145/(2*sqrt(rs) + 7.0604199999999997));

      double df_aux3_2_drho = -0.094904141620941407*drs_drho*f_aux2_2/(sqrt(rs)*(1 + 0.4489845574232158/pow(0.28326926726738638*sqrt(rs) + 1, 2))*pow(0.28326926726738638*sqrt(rs) + 1, 2));

      double f_aux4_2 = -2.2946365000000002*log(pow(sqrt(rs) + 0.32500000000000001, 2)/fx_vwn_2)/f2_denom_2;

      double df_aux4_2_drho = 2.2946365000000002*dfx_vwn_2_drho/(f2_denom_2*fx_vwn_2) - 2.2946365000000002*drs_drho/(f2_denom_2*sqrt(rs)*(sqrt(rs) + 0.32500000000000001));

      double fMC2 = 0.015545349999999999*f_aux1_2 + 0.015545349999999999*f_aux3_2 - 0.015545349999999999*f_aux4_2;

      double dfMC2_drho = 0.015545349999999999*df_aux1_2_drho + 0.015545349999999999*df_aux3_2_drho - 0.015545349999999999*df_aux4_2_drho;

      double DMC = -fMC1 + fMC2;

      double dDMC_drho = -dfMC1_drho + dfMC2_drho;

      double fx_vwn_3 = 1.13107*sqrt(rs) + rs + 13.0045;

      double dfx_vwn_3_drho = drs_drho*(1 + 0.56553500000000001/sqrt(rs));

      double f_aux1_3 = log(rs/fx_vwn_3);

      double df_aux1_3_drho = -dfx_vwn_3_drho/fx_vwn_3 + drs_drho/rs;

      double f_aux3_3 = f_aux2_3*atan(7.1231089178181177/(2*sqrt(rs) + 1.13107));

      double df_aux3_3_drho = -1.7807772294545294*drs_drho*f_aux2_3/(sqrt(rs)*(1 + 12.684670163774999/pow(sqrt(rs) + 0.56553500000000001, 2))*pow(sqrt(rs) + 0.56553500000000001, 2));

      double f_aux4_3 = -0.0053820834880000008*log(pow(sqrt(rs) + 0.0047584000000000003, 2)/fx_vwn_3)/f2_denom_3;

      double df_aux4_3_drho = 0.0053820834880000008*dfx_vwn_3_drho/(f2_denom_3*fx_vwn_3) - 0.0053820834880000008*drs_drho/(f2_denom_3*sqrt(rs)*(sqrt(rs) + 0.0047584000000000003));

      double fMC3 = fre*(f_aux1_3 + f_aux3_3 - f_aux4_3);

      double dfMC3_drho = df_aux1_3_drho*fre + df_aux3_3_drho*fre - df_aux4_3_drho*fre;

      double zeta2 = -2*pair_density/pow(density, 2);

      double dzeta2_dpi = -2/pow(density, 2);

      double dzeta2_drho = 4*pair_density/pow(density, 3);

      double z4 = pow(zeta2, 2);

      double dz4_dzeta2 = 2*zeta2;

      double dz4_dpi = dz4_dzeta2*dzeta2_dpi;

      double dz4_drho = dz4_dzeta2*dzeta2_drho;

      double dfzeta_dpi = 0;

      double fzeta = 0;

      double dfzeta_drho = 0;

      if (pair_density < -9.9999999999999998e-17)
      {
         double zeta = M_SQRT2*sqrt(-pair_density)/density;

         double dzeta_dpi = (1.0/2.0)*M_SQRT2*sqrt(-pair_density)/(density*pair_density);

         double dzeta_drho = -M_SQRT2*sqrt(-pair_density)/pow(density, 2);

         double dfzeta_dzeta = 0.0;

         if (1.0 - zeta > 1.0e-16)
         {
             fzeta = pow(1.0 - zeta, 4.0/3.0) + pow(zeta + 1.0, 4.0/3.0);

             dfzeta_dzeta = -4.0/3.0*cbrt(1.0 - zeta) + (4.0/3.0)*cbrt(zeta + 1.0);
         }
         else
         {
             fzeta = pow(zeta + 1.0, 4.0/3.0);

             dfzeta_dzeta = (4.0/3.0)*cbrt(zeta + 1.0);
         }

         dfzeta_dpi = dfzeta_dzeta*dzeta_dpi;

         dfzeta_drho = dfzeta_dzeta*dzeta_drho;

      }
      else if (pair_density < 9.9999999999999998e-17)
      {
         fzeta = (10.0/243.0)*pow(zeta2, 2) + (4.0/9.0)*zeta2 + 2.0;

         double dfzeta_dzeta2 = (20.0/243.0)*zeta2 + 4.0/9.0;

         dfzeta_dpi = dfzeta_dzeta2*dzeta2_dpi;

         dfzeta_drho = dfzeta_dzeta2*dzeta2_drho;

      }
      else
      {
         double eta = M_SQRT2*sqrt(pair_density)/density;

         double deta_dpi = (1.0/2.0)*M_SQRT2/(density*sqrt(pair_density));

         double deta_drho = -M_SQRT2*sqrt(pair_density)/pow(density, 2);

         double theta = (4.0/3.0)*atan(eta);

         double dtheta_deta = (4.0/3.0)/(pow(eta, 2) + 1);

         double dtheta_dpi = deta_dpi*dtheta_deta;

         double dtheta_drho = deta_drho*dtheta_deta;

         fzeta = 2.0*pow(pow(eta, 2) + 1, 2.0/3.0)*cos(theta);

         double dfzeta_dtheta = -2.0*pow(pow(eta, 2) + 1, 2.0/3.0)*sin(theta);

         double dfzeta_deta = 2.6666666666666665*eta*cos(theta)/cbrt(pow(eta, 2) + 1);

         dfzeta_dpi = deta_dpi*dfzeta_deta + dfzeta_dtheta*dtheta_dpi;

         dfzeta_drho = deta_drho*dfzeta_deta + dfzeta_dtheta*dtheta_drho;

      }
      exc[g] =  DMC*fpol*z4*(fzeta - 2) + fMC1 + fMC3*fpol*(1 - z4)*(fzeta - 2)/fpp_vwn;

      double dExc_dfzeta = density*(DMC*fpol*z4 + fMC3*fpol*(1 - z4)/fpp_vwn);

      double dExc_dz4 = density*(DMC*fpol*(fzeta - 2) - fMC3*fpol*(fzeta - 2)/fpp_vwn);

      vrho[2 * g + 1] =  dExc_dfzeta*dfzeta_dpi + dExc_dz4*dz4_dpi;

      vrho[2 * g + 0] =  DMC*fpol*z4*(fzeta - 2) + dDMC_drho*density*fpol*z4*(fzeta - 2) + dExc_dfzeta*dfzeta_drho + dExc_dz4*dz4_drho + density*dfMC1_drho + density*dfMC3_drho*fpol*(1 - z4)*(fzeta - 2)/fpp_vwn + fMC1 + fMC3*fpol*(1 - z4)*(fzeta - 2)/fpp_vwn;

   }
}

}  // namespace pdftvwn5
